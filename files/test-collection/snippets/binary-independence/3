Snippets for the query:  I'm interested in mechanisms for communicating between disjoint processes, possibly, but not exclusively, in a distributed environment. I would rather see descriptions of complete mechanisms, with or without implementations, as opposed to theoretical work on the abstract problem. Remote procedure calls and message-passing are examples of my interests.
************************
Total Hits:  29
************************

************************
Document:  CACM-1485.html
************************


The Structure of Programming Languages

In this paper the major components of every
programming language are identified as: (1) the 
elementary program statement, (2) <B>mechanisms for</B> linking
elementary statements together, (3) the means 
by which a program can obtain data inputs.  Several
alternative forms of each of these components are 
also described, compared and evaluated.  Many examples,
frequently from list processing languages, illustrate 
the forms described.  The advantages, disadvantages and
factors influencing the choice of a form of component 
for a language are discussed, and the paper concludes
with the suggestion that programming languages 
evolve toward one which will permit all the most convenient
ways of structuring programs, organizing 
systems and referencing data.

CACM February, 1966

Raphael, B.

CA660202 JB March 3, 1978  3:46 PM

1024	4	1485
1051	4	1485
1098	4	1485
1214	4	1485
1380	4	1485
1388	4	1485
1393	4	1485
1485	4	1485
1487	4	1485
1549	4	1485
1570	4	1485
1878	4	1485
1946	4	1485
1957	4	1485
2168	4	1485
2723	4	1485
2857	4	1485
3112	4	1485
1485	5	1485
1485	5	1485
1485	5	1485
731	5	1485


************************

************************
Document:  CACM-1847.html
************************


An Algorithm for Finding a Fundamental Set of Cycles of a Graph

A fast method is presented for finding a fundamental
set of cycles for an undirected finite 
graph.  A spanning tree is grown and the vertices examined
in turn, unexamined vertices being stored 
in a pushdown list to await examination.  One stage
in the process is to take the top element v of the 
pushdown list and examine it, i.e. inspect all those
edges (v,z) of the graph for which z has not yet 
been examined.  If z is already in the tree, a fundamental
cycle is added; if not, the edge (v,z) is 
placed in the tree.  There is exactly one such stage
for each of the n vertices of the graph.  For large 
n, the store required in creases as n^2 and the time as
n^g where g depends <B>on the</B> type of graph involved. 
 g is bounded below by 2 and above by 3, and it is shown
that both bounds are attained.  In terms of 
storage our algorithm is similar to that of Gotlieb and
Corneil and superior to that of Welch; in terms 
of speed it is similar to that of Welch and superior
to that of Gotlieb and Corneil.  Testsshow our 
algorithm to be remarkably efficient (g=2) on random graphs.

CACM September, 1969

Paton, K.

fundamental cycle set, graph, algorithm, cycle, spanning tree

5.32

CA690909 JB February 15, 1978  4:29 PM

1847	4	1847
1961	4	1847
2052	4	1847
1504	5	1847
1847	5	1847
1847	5	1847
1847	5	1847
1961	5	1847
2177	5	1847
2763	5	1847
1369	6	1847
1504	6	1847
1847	6	1847
1847	6	1847
1847	6	1847


************************



An Algorithm for Finding a Fundamental Set of Cycles of a Graph

A fast method is presented for finding a fundamental
set of cycles for an undirected finite 
graph.  A spanning tree is grown and the vertices examined
in turn, unexamined vertices being stored 
<B>in a</B> pushdown list to await examination.  One stage
in the process is to take the top element v of the 
pushdown list and examine it, i.e. inspect all those
edges (v,z) of the graph for which z has not yet 
been examined.  If z is already in the tree, a fundamental
cycle is added; if not, the edge (v,z) is 
placed in the tree.  There is exactly one such stage
for each of the n vertices of the graph.  For large 
n, the store required in creases as n^2 and the time as
n^g where g depends on the type of graph involved. 
 g is bounded below by 2 and above by 3, and it is shown
that both bounds are attained.  In terms of 
storage our algorithm is similar to that of Gotlieb and
Corneil and superior to that of Welch; in terms 
of speed it is similar to that of Welch and superior
to that of Gotlieb and Corneil.  Testsshow our 
algorithm to be remarkably efficient (g=2) on random graphs.

CACM September, 1969

Paton, K.

fundamental cycle set, graph, algorithm, cycle, spanning tree

5.32

CA690909 JB February 15, 1978  4:29 PM

1847	4	1847
1961	4	1847
2052	4	1847
1504	5	1847
1847	5	1847
1847	5	1847
1847	5	1847
1961	5	1847
2177	5	1847
2763	5	1847
1369	6	1847
1504	6	1847
1847	6	1847
1847	6	1847
1847	6	1847


************************

************************
Document:  CACM-2307.html
************************


Dynamic Document Processing

The current role of computers <B>in a</B>utomatic
document processing is briefly outlined, and some 
reasons are given why the early promise of library automation
and of the mechanization of documentation 
processes has not been fulfilled.  A new dynamic document
environment is then outlined in which clustered
files are searched and information is retrieved following
an interactive user-controlled search process. 
 Methods are described for an automatic query modification
based on user needs, and for a continuous 
reorganization of the stored information as a function of
earlier file processing and of normal collection 
growth.  The proposed procedures provide powerful tools
for information retrieval and for the control 
of dynamic library collections in which new items
are continually added and old ones are retired.

CACM July, 1972

Salton, G.

automatic indexing, automatic search and retrieval,
iterative searching, mechanized library processing, 
collection growth, collection retirement, feedback search

3.62 3.71 3.73 3.74

CA720721 JB January 30, 1978  10:59 AM

2307	5	2307
2307	5	2307
2307	5	2307


************************

************************
Document:  CACM-2219.html
************************


A Policy-Driven Scheduler for a Time-Sharing System

The service received by a process from a time-sharing
operating system can be characterized 
by a resource count SUM{w[i]R[ij]} where R[ij] is the
number of units of service received by process 
i from resource i and w[i] is the cost per unit of the
service.  Each class of users can be characterized 
by a policy function which specifies the amount of service
a user who belongs to this class should receive 
as a function of time.  Priority changes dynamically
as a function of the difference between the service 
promised to the user by the policy function and the service
he actually receives.  A scheduling and swapping 
algorithm which keeps the resource count of each process
above its policy function will provide the specified 
level of service.  Overhead can be reduced by avoiding
swaps of process which have received at least 
his level of service.  The algorithm has been implemented
<B>in a</B> general purpose operating system, and 
it has provided significantly better service to interactive
and to batch jobs than the previous scheduler.

CACM February, 1971

Bernstein, A. J.
Sharp, J. C.

scheduler, time-sharing, operating system,
resource allocation and swapping

4.32

CA710202 JB February 8, 1978  9:54 AM

2219	4	2219
2344	4	2219
1938	5	2219
2219	5	2219
2219	5	2219
2219	5	2219
2950	5	2219
3072	5	2219
1713	6	2219
2219	6	2219
2219	6	2219
2245	6	2219
2375	6	2219


************************

************************
Document:  CACM-1614.html
************************


A Proposal for Definitions in ALGOL

An extension to ALGOL is proposed for adding
new data types and operators to the language. 
 Definitions may occur <B>in a</B>ny block heading and terminate
with the block.  They are an integral part 
of the program and are not fixed in the language.  Even
the behavior of existing operators may be redefined. 
 The processing of text containing defined contexts features
a "replacement rule" that eliminates unnecessary 
iterations and temporary storage.  Examples of definition sets
are given for real and complex matrices, 
complex numbers, file processing, and list manipulation.

CACM April, 1967

Galler, B. A.
Perlis, A. J.

CA670401 JB February 28, 1978  11:43 AM

1086	4	1614
1132	4	1614
1234	4	1614
1263	4	1614
1265	4	1614
1270	4	1614
1323	4	1614
1358	4	1614
1379	4	1614
1380	4	1614
1453	4	1614
1464	4	1614
1484	4	1614
1491	4	1614
1498	4	1614
1613	4	1614
1614	4	1614
1614	4	1614
1781	4	1614
1825	4	1614
1860	4	1614
2083	4	1614
2178	4	1614
2179	4	1614
2252	4	1614
2253	4	1614
2325	4	1614
2341	4	1614
2546	4	1614
2557	4	1614
2645	4	1614
2652	4	1614
2684	4	1614
2842	4	1614
2929	4	1614
2934	4	1614
3069	4	1614
669	4	1614
679	4	1614
691	4	1614
761	4	1614
949	4	1614
989	4	1614
1614	5	1614
1614	5	1614
1614	5	1614
1693	5	1614
1781	5	1614
1824	5	1614
1861	5	1614
2126	5	1614
437	5	1614
3184	5	1614
823	6	1614
123	6	1614
196	6	1614
196	6	1614
919	6	1614
990	6	1614
1007	6	1614
1046	6	1614
1131	6	1614
1139	6	1614
1140	6	1614
1149	6	1614
1198	6	1614
1215	6	1614
1223	6	1614
1265	6	1614
1303	6	1614
1323	6	1614
1358	6	1614
1358	6	1614
1366	6	1614
1421	6	1614
1421	6	1614
1460	6	1614
1462	6	1614
1463	6	1614
1467	6	1614
1468	6	1614
1477	6	1614
1477	6	1614
1491	6	1614
1491	6	1614
1496	6	1614
1531	6	1614
1535	6	1614
1565	6	1614
1601	6	1614
1602	6	1614
1613	6	1614
1614	6	1614
1614	6	1614
1614	6	1614
1614	6	1614
1614	6	1614
1626	6	1614
1641	6	1614
1693	6	1614
1781	6	1614
1781	6	1614
1787	6	1614
1788	6	1614
205	6	1614
224	6	1614
249	6	1614
288	6	1614
316	6	1614
381	6	1614
398	6	1614
11	6	1614
404	6	1614
404	6	1614
404	6	1614
408	6	1614
410	6	1614
463	6	1614
464	6	1614
483	6	1614
3184	6	1614
3188	6	1614
584	6	1614
600	6	1614
680	6	1614
691	6	1614
763	6	1614
799	6	1614


************************

************************
Document:  CACM-0584.html
************************


Report <B>on the</B> Algorithmic Language FORTRAN II

CACM June, 1962

Rabinowitz, I. N.

CA620601 JB March 17, 1978  9:38 PM

1046	4	584
1105	4	584
1139	4	584
1140	4	584
1234	4	584
1263	4	584
1265	4	584
1496	4	584
1781	4	584
1824	4	584
2126	4	584
2546	4	584
464	4	584
584	4	584
631	4	584
653	4	584
680	4	584
763	4	584
795	4	584
799	4	584
945	4	584
949	5	584
1781	5	584
1945	5	584
404	5	584
584	5	584
584	5	584
584	5	584
823	6	584
123	6	584
196	6	584
914	6	584
915	6	584
917	6	584
919	6	584
984	6	584
989	6	584
990	6	584
990	6	584
1007	6	584
1012	6	584
1046	6	584
1084	6	584
1098	6	584
1122	6	584
1131	6	584
1138	6	584
1139	6	584
1139	6	584
1140	6	584
1141	6	584
1149	6	584
1198	6	584
1200	6	584
1215	6	584
1223	6	584
1223	6	584
1265	6	584
1265	6	584
1303	6	584
1323	6	584
1336	6	584
1358	6	584
1366	6	584
1396	6	584
1421	6	584
1455	6	584
1460	6	584
1462	6	584
1463	6	584
1467	6	584
1468	6	584
1477	6	584
1477	6	584
1487	6	584
1491	6	584
1491	6	584
1496	6	584
1496	6	584
1531	6	584
1535	6	584
1565	6	584
1601	6	584
1602	6	584
1613	6	584
1614	6	584
1626	6	584
1641	6	584
1787	6	584
1788	6	584
205	6	584
224	6	584
249	6	584
288	6	584
316	6	584
381	6	584
398	6	584
11	6	584
404	6	584
410	6	584
463	6	584
464	6	584
483	6	584
483	6	584
483	6	584
3184	6	584
3184	6	584
3188	6	584
584	6	584
584	6	584
584	6	584
600	6	584
669	6	584
680	6	584
680	6	584
691	6	584
763	6	584
763	6	584
799	6	584


************************

************************
Document:  CACM-1469.html
************************


The Next 700 Programming Languages 

A family of unimplemented computing languages
is described that is intended to span differences 
of application area by a unified framework.  This framework
dictates the rules about the uses of user-coined 
names, and the conventions about characterizing functional
relationships.  Within this framework the 
design of a specific language splits into two independent
parts.  One is the choice of written appearances 
of programs (or more generally, their physical representation).
 The other is the choice of <B>the abstract</B> 
entities (such as numbers, character-strings, lists
of them, functional relations among them) that can 
be referred to in the language.  The system is biased
towards "expressions" rather than "statements." 
 It includes a nonprocedural(purely functional) subsystem
that aims to expand the class of users' needs 
that can be met by a single print-instruction, without sacrificing
the important properties that make 
conventional right-hand-side expressions easy to construct and understand.

CACM March, 1966

Landin, P. J.

CA660303 JB March 3, 1978  2:05 PM

1469	4	1469
1486	4	1469
1491	4	1469
1781	4	1469
2178	4	1469
2326	4	1469
2470	4	1469
2684	4	1469
3044	4	1469
1303	5	1469
1469	5	1469
1469	5	1469
1469	5	1469
2060	5	1469
2294	5	1469
2470	5	1469
3124	5	1469
1303	6	1469
1380	6	1469
1421	6	1469
1469	6	1469
1469	6	1469
1469	6	1469
1469	6	1469
1477	6	1469
1491	6	1469
210	6	1469
1834	6	1469
1869	6	1469
2060	6	1469
2110	6	1469
2264	6	1469


************************

************************
Document:  CACM-1930.html
************************


Extremely Portable Random Number Generator

Extremely portable subroutines are sometimes
needed for which moderate quality and efficiency 
suffice.  Typically, this occurs for library functions
(like random number generation and in core sorting) 
which are not entirely universal or are not used <B>in a</B>
standardized way.  The literature on random number 
generators does not seem to contain an algorithm that
meets requirements of this sort.  An extremely 
portable 8-line FORTRAN program is provided which based
on an important paper by Coveyou and MacPherson 
(1967)sing their methods, Fourier analysis is applied
to the probability function for the consecutive 
n-tuples provided by our generator (with n less than
or equal to 4).  While the small modulus which must 
be used to maintain portability prevents the quality
of the generator from being high, the generator 
compares well with the bounds established in the above mentioned paper.

CACM February, 1969

Kruskal, J. B.

random number generators, random numbers, random
number analysis, random generators, linear sequential 
generators, random number program, pseudo random numbers 

4.49 5.19 5.5

CA690208 JB February 20, 1978  10:43 AM

1930	5	1930
1930	5	1930
1930	5	1930
2115	5	1930
1691	6	1930
1930	6	1930


************************

************************
Document:  CACM-1439.html
************************


Mechanization of the Curve Fitting Process: DATAN

A process for fitting a curve to approximate data
and the problem it creates for the engineer-programmer 
is defined.  An approach has also been defined and a system
has been written for the SRU 1107 to mechanize 
a major portion of this process.  The techniques developed
to accomplish the mechanization are largely 
empirical, and are dependent for their information
only <B>on the</B> actual data points.

CACM April, 1966

Simonsen, R. H.
Anketell, D. L.

CA660410 JB March 3, 1978  10:26 AM

1439	5	1439
1439	5	1439
1439	5	1439


************************

************************
Document:  CACM-0963.html
************************


Relative Effects of Central Processor and Input-Output
Speeds Upon Throughput <B>on the</B> Large Computer

Presented in this paper is a technique for
determining the relative effects of the internal 
speed of the computer and the speed of the input-output
units upon the overall speed of the system. Equations 
are derived which permit the determination of these
effects from hardware usage measurements.

CACM December, 1964

White, P.

CA641208 JB March 9, 1978  3:34 PM

963	5	963
963	5	963
963	5	963
1653	5	963
963	6	963
1069	6	963
1417	6	963


************************

************************
Document:  CACM-3118.html
************************


Permutation of Data Blocks <B>in a</B> Bubble Memory

A common internal organization of bubble memories consists of a set of (minor) 
loops, connected through another (major) loop.  The problem of obtaining any 
give n permutation of the minor loop contents in minimum time is studied
in this paper.  A lower bound to the number of steps required buy
a permutation algorithm is derived, and the class of optimum algorithms is 
identified.

CACM January, 1979

Bongiovanni, G.
Luccio, F.

Bubble memory, memory loops, permutation algorithm, data block shift

4.34 5.30 6.34

CA790103 DH April 10, 1979  12:04 PM

3118	5	3118
3118	5	3118
3118	5	3118


************************

************************
Document:  CACM-0118.html
************************


Character Scanning <B>on the</B> IBM 7070

CACM November, 1960

Speckhard, A. E.

CA601117 JB March 20, 1978  6:52 PM

118	5	118
118	5	118
118	5	118


************************

************************
Document:  CACM-1415.html
************************


Automatic Derivation of Microsentences

The decomposition of long complex English sentences
into shorter kernel-like constituent sentences 
(microsentences)has often been suggested as an avenue
toward conducting automatic retrieval of natural 
language messages.  To explore the prospects of such
a step, the authors attempted in 1963 to prepare 
a general program for deriving microsentences from longer
sentences that had been syntactically analyzed 
by the Harvard Multipath Analysis Program.  The basic
idea was to extract the subject, verb and object 
(if any) of each clause and to reassemble these materials
into a grammatical microsentence.  A program 
is described in this paper, which was designed to operate
<B>on the</B> tree structure output of the analyzer, 
and the microsentences that were produced are exhibited.
 The authors conclude that while microsentences 
of the quality achieved do not open up immediate prospects
for improving the performance of automatic 
message retrieval systems, they may have practical
value in man-machine systems using human monitors 
to select the preferred syntactic interpretation of a sentence.

CACM June, 1966

Carmody, B. T
Jones Jr., P. E.

CA660606 JB March 3, 1978  8:47 AM

1415	5	1415
1415	5	1415
1415	5	1415


************************

************************
Document:  CACM-3137.html
************************


A Methodology for the Design of Distributed Information Systems

A macro model of <B>a distributed</B> information system in presented.  The model
describes the major costs of using an information
system from the perspective of the end-user.  The making evident the effect of
various design and operating parameters on overall cost per transaction.
 The technique is illustrated by application to the design
of an interactive transaction processing system.

CACM April, 1979

Bucci, G.
Streeter, D.

Distributed processing, system design, cost minimization, distributed
database, interactive computing, economic modeling, transaction processing

4.32 4.33 6.2 8.1

CA790403 DH May 21, 1979  1:25 PM

3137	5	3137
3137	5	3137
3137	5	3137


************************

************************
Document:  CACM-2651.html
************************


The Treatment of Data Types in EL1

In constructing a general purpose programming
language, a key issue is providing a sufficient 
set of data types and associated operations <B>in a</B> manner
that permits both natural problem-oriented notation 
and efficient implementation.  The EL1 language contains
a number of features specifically designed to 
simultaneously satisfy both requirements.  The resulting
treatment of data types includes provision for 
programmer-defined data types data types and generic
routines, programmer control over type conversion, 
and very flexible data type behavior, in a context that
allows efficient compiled code and compact data 
representation.

CACM May, 1974

Wegbreit, B.

data types, modes, mode unions, type conversion,
coercion, generic functions, extensible languages, 
data type definition, data description language, compilation

4.12 4.13 4.22

CA740502 JB January 17, 1978  4:32 PM

2651	5	2651
2651	5	2651
2651	5	2651
2723	5	2651
2941	5	2651
2956	5	2651
3030	5	2651
1379	6	2651
1471	6	2651
1549	6	2651
1749	6	2651
1826	6	2651
210	6	2651
2247	6	2651
2356	6	2651
2356	6	2651
2457	6	2651
2558	6	2651
2651	6	2651
2651	6	2651
2651	6	2651
2651	6	2651
2958	6	2651
2972	6	2651
627	6	2651
731	6	2651


************************

************************
Document:  CACM-2691.html
************************


Comments <B>on the</B> Algorithms of Verhelst for the
Conversion of Limited-Entry Decision Tables to 
Flowcharts

CACM January, 1974

King, P. J. H.
Johnson, R. G.

decision table, flowcharting, preprocessor, optimal programs, search 

3.50 3.59 4.19 4.29 4.49 5.31

CA740108 JB January 18, 1978  1:45 PM

2598	4	2691
2691	4	2691
2726	4	2691
3113	4	2691
2263	5	2691
2598	5	2691
2691	5	2691
2691	5	2691
2691	5	2691
3113	5	2691
1172	6	2691
1354	6	2691
1548	6	2691
2220	6	2691
2263	6	2691
2263	6	2691
2453	6	2691
2598	6	2691
2691	6	2691
2691	6	2691
2856	6	2691


************************

************************
Document:  CACM-2925.html
************************


Optimal Surface Reconstruction from Planar Contours

In many scientific and technical endeavors,
a three-dimensional solid must be reconstructed 
from serial sections, either to aid in the comprehension
of the object's structure or to facilitate its 
automatic manipulation and analysis.  This paper presents
a general solution to the problem of constructing 
a surface over a set of cross-sectional contours. 
This surface, to be composed of triangular tiles, 
is constructed by separately determining an optimal
surface between each pair of consecutive contours.
 Determining such a surface is reduced to the problem
of finding certain minimum cost cycles in a directed 
toroidal graph.  A new fast algorithm for finding such
cycles is utilized.  Also developed is a closed-form 
expression, in term of the number of contour poin ts, for
an upper bound <B>on the</B> number of operations required 
to execute the algorithm.  An illustrated example which
involves the construction of a minimum area surface 
describing a human head is included.

CACM October, 1977

Fuchs, H.
Kedem,Z. M.
Uselton, S. P.

surface reconstruction, contour data, serial sections,
three-dimensional computer graphics, minimum 
cost paths, continuous tone displays

5.25 5.32 8.2

CA771001 JB December 27, 1977  12:40 PM

2925	5	2925
2925	5	2925
2925	5	2925


************************



Optimal Surface Reconstruction from Planar Contours

In many scientific and technical endeavors,
a three-dimensional solid must be reconstructed 
from serial sections, either to aid in the comprehension
of the object's structure or to facilitate its 
automatic manipulation and analysis.  This paper presents
a general solution to the problem of constructing 
a surface over a set of cross-sectional contours. 
This surface, to be composed of triangular tiles, 
is constructed by separately determining an optimal
surface between each pair of consecutive contours.
 Determining such a surface is reduced to the problem
of finding certain minimum cost cycles <B>in a</B> directed 
toroidal graph.  A new fast algorithm for finding such
cycles is utilized.  Also developed is a closed-form 
expression, in term of the number of contour poin ts, for
an upper bound on the number of operations required 
to execute the algorithm.  An illustrated example which
involves the construction of a minimum area surface 
describing a human head is included.

CACM October, 1977

Fuchs, H.
Kedem,Z. M.
Uselton, S. P.

surface reconstruction, contour data, serial sections,
three-dimensional computer graphics, minimum 
cost paths, continuous tone displays

5.25 5.32 8.2

CA771001 JB December 27, 1977  12:40 PM

2925	5	2925
2925	5	2925
2925	5	2925


************************

************************
Document:  CACM-1427.html
************************


Simulation of Radioisotope Scans by Computer

In radioisotope scanning, a field which is assuming
increasing importance in medical diagnosis, 
the scan is a two-dimensional pattern made up of dots.
 Areas of increased source activity are represented 
<B>on the</B> scan by areas of increased dot density.  To study
the output of scanners with various characteristics, 
a program which simulates radioisotope scans has been
written  for a PDP-1 computer with auxiliary disk 
storage and cathode ray tube display.  Past and present
research using the output of the simulator has 
shown the flexibility of the system to be important.
 The structure of this program can be useful in 
the simulation of the output of any quantum-limited system.

CACM May, 1966

Pizer, S. M.

CA660510 JB March 3, 1978  9:47 AM

1427	5	1427
1427	5	1427
1427	5	1427


************************

************************
Document:  CACM-1235.html
************************


A Stochastic Approach to the Grammatical Coding of English

A computer program is described which will
assign each word <B>in a</B>n English text to its form 
class or part of speech.  The program operates at relatively
high speed in only a limited storage space. 
 About half of the word-events in a corpus are identified
through the use of a small dictionary of function 
words and frequently occurring lexical words.  Some suffix
tests and logical-decision rules are employed 
to code additional words.  Finally, the remaining words
are assigned to one class or another on the basis 
of the most probable form classes to occur within the already
identified contexts.  The conditional probabilities 
used as a basis for this coding were empirically derived
from a separate hand-coded corpusn preliminary 
trials, the accuracy of the coder was 91% to 93%, with
obvious ways of improving the algorithm being 
suggested by an analysis of the results.

CACM June, 1965

Stolz, W. S.
Tannenbaum, H.
Carstensen, F. V.

CA650620 JB March 6, 1978  9:35 PM

1235	5	1235
1235	5	1235
1235	5	1235


************************



A Stochastic Approach to the Grammatical Coding of English

A computer program is described which will
assign each word in an English text to its form 
class or part of speech.  The program operates at relatively
high speed in only a limited storage space. 
 About half of the word-events in a corpus are identified
through the use of a small dictionary of function 
words and frequently occurring lexical words.  Some suffix
tests and logical-decision rules are employed 
to code additional words.  Finally, the remaining words
are assigned to one class or another <B>on the</B> basis 
of the most probable form classes to occur within the already
identified contexts.  The conditional probabilities 
used as a basis for this coding were empirically derived
from a separate hand-coded corpusn preliminary 
trials, the accuracy of the coder was 91% to 93%, with
obvious ways of improving the algorithm being 
suggested by an analysis of the results.

CACM June, 1965

Stolz, W. S.
Tannenbaum, H.
Carstensen, F. V.

CA650620 JB March 6, 1978  9:35 PM

1235	5	1235
1235	5	1235
1235	5	1235


************************

************************
Document:  CACM-2758.html
************************


A Note <B>on the</B> LU Factorization of a Symmetric Matrix

CACM May, 1975

Evans, D. J.
Hatzopoulos, M.

symmetric matrices, factorization, test matrices,
matrix inversion, separable systems

5.14

CA750509 JB January 9, 1978  2:26 PM

2758	5	2758
2758	5	2758
2758	5	2758


************************

************************
Document:  CACM-2919.html
************************


The Programmer's Workbench-A Machine for Software Development

On almost all software development projects the
assumption is made that the program development 
function will be done <B>on the</B> same machine on which the
eventual system will run.  It is only when this 
production machine is unavailable or when its programming
environment is totally inadequate that alternatives 
are considered.  In this paper it is suggested that
there are many other situations where it would be 
advantageous to separate the program development and
main tenance function onto a specialized computer 
which is dedicated to that purpose.  Such a computer
is here called a Programmer's Workbench.  The four 
basic sections of the paper in troduce the subject,outline
the general concept, discuss areas where such 
an approach may prove beneficial, and describe
an operational system utilizing this concept.

CACM October, 1977

Ivie, E. L.

computer configurations, computer networks, software
development, software engineering, software 
main tenance, UNIX

3.2 3.5 3.7 3.8 4.0

CA771007 JB December 27, 1977  10:37 AM

2626	4	2919
2786	4	2919
2840	4	2919
2919	4	2919
2919	4	2919
2919	4	2919
3017	4	2919
3110	4	2919
3174	4	2919
2536	5	2919
2593	5	2919
2629	5	2919
2919	5	2919
2919	5	2919
2919	5	2919


************************

************************
Document:  CACM-1497.html
************************


On the Normalization Requirement of
Divisor in Divide- and- Correct Methods

This paper presents an analysis on the normalization
requirement of the divisor <B>in a</B> divide-and-correct 
method.  This analysis is made subject to the condition
that not more than one correction is required 
to obtain the true quotient character, from the trial
estimate got from the division of a two-precision 
segment of every partial remainder by a suitably rounded
single-precision divisor.  (This segmented division 
is denoted here as a (2, 1) precision basic division.)
 It is found that the normalization requirement 
could be narrowed down to a smaller range of divisors,
provided the magnitude of the character next to 
the leading character of the divisor is known.  If,
however, the normalization is to be eliminated one 
has to choose proper higher precision segments of operands
for the basic division.  Also considered is 
the possibility of eliminating the normalization by an
increase on the number of corrections on the quotient 
estimate got from a (2, 1) precision basic division.
 It is shown that such a scheme is economical only 
for small radices.

CACM December, 1967

Krishnamurthy, E. V.
Nandi, S. K.

CA671210 JB February 26, 1978  2:15 PM

1026	4	1497
1258	4	1497
1258	4	1497
1292	4	1497
1292	4	1497
1497	4	1497
1497	4	1497
1497	4	1497
1497	4	1497
1593	4	1497
1975	4	1497
1975	4	1497
2605	4	1497
107	5	1497
1026	5	1497
1292	5	1497
1497	5	1497
1497	5	1497
1497	5	1497
1593	5	1497
1975	5	1497
1026	6	1497
1292	6	1497
1497	6	1497


************************



On the Normalization Requirement of
Divisor in Divide- and- Correct Methods

This paper presents an analysis <B>on the</B> normalization
requirement of the divisor in a divide-and-correct 
method.  This analysis is made subject to the condition
that not more than one correction is required 
to obtain the true quotient character, from the trial
estimate got from the division of a two-precision 
segment of every partial remainder by a suitably rounded
single-precision divisor.  (This segmented division 
is denoted here as a (2, 1) precision basic division.)
 It is found that the normalization requirement 
could be narrowed down to a smaller range of divisors,
provided the magnitude of the character next to 
the leading character of the divisor is known.  If,
however, the normalization is to be eliminated one 
has to choose proper higher precision segments of operands
for the basic division.  Also considered is 
the possibility of eliminating the normalization by an
increase on the number of corrections on the quotient 
estimate got from a (2, 1) precision basic division.
 It is shown that such a scheme is economical only 
for small radices.

CACM December, 1967

Krishnamurthy, E. V.
Nandi, S. K.

CA671210 JB February 26, 1978  2:15 PM

1026	4	1497
1258	4	1497
1258	4	1497
1292	4	1497
1292	4	1497
1497	4	1497
1497	4	1497
1497	4	1497
1497	4	1497
1593	4	1497
1975	4	1497
1975	4	1497
2605	4	1497
107	5	1497
1026	5	1497
1292	5	1497
1497	5	1497
1497	5	1497
1497	5	1497
1593	5	1497
1975	5	1497
1026	6	1497
1292	6	1497
1497	6	1497


************************

************************
Document:  CACM-2151.html
************************


User Program Measurement <B>in a</B> Time-Shared Environment

A general discussion of the measurement of
software systems is followed by a description of 
a hardware and software scheme for measuring user programs
in a time-shared environment.  The TX-2 computer 
at MIT Lincoln Laboratory was used for the implementation
of such a system and the characteristics of 
this implementation are reported.  A scenario showing
the system in use is presented.  Finally, it is 
shown how other time-sharing systems may provide similar measuring facilities.

CACM October, 1971

Nemeth, A. G.
Rovner, P. D.

operating systems, multiprogramming systems, time-sharing
systems, software measurement, user program 
measurement, measurement technology, TX-2 computer,
virtual computers, performance improvement

4.30 4.32 4.42 4.43

CA711005 JB February 2, 1978  1:05 PM

1957	4	2151
2151	4	2151
2151	4	2151
2151	4	2151
2318	4	2151
3103	4	2151
3148	4	2151
1653	5	2151
1747	5	2151
1860	5	2151
2151	5	2151
2151	5	2151
2151	5	2151
2719	5	2151
2967	5	2151
1626	6	2151
210	6	2151
2151	6	2151
2151	6	2151
2167	6	2151
2210	6	2151
2645	6	2151
2657	6	2151


************************

************************
Document:  CACM-2083.html
************************


Creation and Control of Internal Data Bases
Under a Fortran Programming Environment

A method is described for the definition of a user's COMMON structure
and the automatic generation of the necessary COMMON, DIMENSION, EQUIVALENCE,
and type declarations for each of the user's routines.  The definition
for the COMMON is contained in an easy to modify form, thus
allowing the control of general communications of data between routines.
The described system has been implemented <B>on the</B> IBM 7094,
CDC 6000 series, and the IBM 360.  The method has proved to be invaluable
for the definition and control of COMMON in many large-scale programs.

CACM April, 1970

DeSalvio, A. J.
Purdy, J. G.
Rau, J.

data base, Fortran, common, common equivalencing,
subroutine communication, data communication

3.73 4.12 4.43

CA700401 JB February 13, 1978  3:34 PM

1086	4	2083
1132	4	2083
1234	4	2083
1263	4	2083
1265	4	2083
1270	4	2083
1323	4	2083
1358	4	2083
1379	4	2083
1380	4	2083
1453	4	2083
1464	4	2083
1484	4	2083
1491	4	2083
1498	4	2083
1613	4	2083
1614	4	2083
1781	4	2083
1825	4	2083
1845	4	2083
1860	4	2083
1900	4	2083
2083	4	2083
2083	4	2083
2154	4	2083
2178	4	2083
2179	4	2083
2252	4	2083
2270	4	2083
2325	4	2083
2341	4	2083
2546	4	2083
2645	4	2083
2652	4	2083
2684	4	2083
2693	4	2083
2842	4	2083
2929	4	2083
2934	4	2083
3069	4	2083
669	4	2083
679	4	2083
691	4	2083
761	4	2083
949	4	2083
989	4	2083
988	5	2083
2083	5	2083
2083	5	2083
2083	5	2083
3184	5	2083


************************



Creation and Control of Internal Data Bases
Under a Fortran Programming Environment

A method is described for the definition of a user's COMMON structure
and the automatic generation of the necessary COMMON, DIMENSION, EQUIVALENCE,
and type declarations for each of the user's routines.  The definition
for the COMMON is contained <B>in a</B>n easy to modify form, thus
allowing the control of general communications of data between routines.
The described system has been implemented on the IBM 7094,
CDC 6000 series, and the IBM 360.  The method has proved to be invaluable
for the definition and control of COMMON in many large-scale programs.

CACM April, 1970

DeSalvio, A. J.
Purdy, J. G.
Rau, J.

data base, Fortran, common, common equivalencing,
subroutine communication, data communication

3.73 4.12 4.43

CA700401 JB February 13, 1978  3:34 PM

1086	4	2083
1132	4	2083
1234	4	2083
1263	4	2083
1265	4	2083
1270	4	2083
1323	4	2083
1358	4	2083
1379	4	2083
1380	4	2083
1453	4	2083
1464	4	2083
1484	4	2083
1491	4	2083
1498	4	2083
1613	4	2083
1614	4	2083
1781	4	2083
1825	4	2083
1845	4	2083
1860	4	2083
1900	4	2083
2083	4	2083
2083	4	2083
2154	4	2083
2178	4	2083
2179	4	2083
2252	4	2083
2270	4	2083
2325	4	2083
2341	4	2083
2546	4	2083
2645	4	2083
2652	4	2083
2684	4	2083
2693	4	2083
2842	4	2083
2929	4	2083
2934	4	2083
3069	4	2083
669	4	2083
679	4	2083
691	4	2083
761	4	2083
949	4	2083
989	4	2083
988	5	2083
2083	5	2083
2083	5	2083
2083	5	2083
3184	5	2083


************************

