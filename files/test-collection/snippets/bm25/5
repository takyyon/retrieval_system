Snippets for the query:  Interested in articles on robotics, motion planning particularly the geometric and combinatorial aspects. We are not interested in the dynamics of arm motion.
************************
Total Hits:  46
************************

************************
Document:  CACM-0695.html
************************


Use of the Disk File on Stretch

The paper begins by briefly describing the
Stretch (IBM 7030) computer with special emphasis 
given to the organization and operation of its input-output
equipment.  Physical characteristics of the 
two-disk system (4,194,304 72-bit words, 8 usec-per-word
transmission rate, etc.) <B>are not</B>ed.  Timing 
limitations due to arm motion and disk rotation are discussed.
 Applications of disk usage are discussed 
separately for problem programs and for systems programs
such as compilers and the supervisory program. 
Approximately 260,000 words of disk storage are reserved
for the storage of systems programs and the 
subroutine library.  Problem programs, however, are not
currently filed on the disk.  Certain programming 
techniques are discussed for transmitting words between
disk and core storage with minimum delaying and 
interruption of the arithmetic unit.  Dumps on disk are
considered for both recovery from computer malfunction 
and for mathematical or physical developments during
the calculation.  Some comments are made regarding 
the reliability, economics, utility and weaknesses or
limitations of the disk system.  Several possible 
future applications are noted which appear to have disk connotations.

CACM October, 1963

Carlson, B. G.
Voorhes, E. A.

CA631030 JB March 13, 1978  4:28 PM

695	5	695
695	5	695
695	5	695


************************

************************
Document:  CACM-2826.html
************************


Interactive Skeleton Techniques for Enhancing
Motion Dynamics in Key Frame Animation

A significant increase <B>in the</B> capability for
controlling motion dynamics in key frame animation 
is achieved through skeleton control.  This technique
allows an animator to develop a complex motion 
sequence by animating a stick figure representation
of an image.  This control sequence is then used 
to drive an image sequence through the same movement.
 The simplicity of the stick figure image encourages 
a high level of interaction during the design stage. 
Its compatibility with the basic key frame animation 
technique permits skeleton control to be applied selectively
to only those components of a composite 
image sequence that require enhancement.

CACM October, 1976

Burtnyk, N.
Wein, M.

interactive graphics, computer generated animation,
key frame animation, interactive skeleton control, 
stick figure animation

3.41 3.49 4.9 8.2

CA761005 JB January 3, 1978  4:24 PM

2826	5	2826
2826	5	2826
2826	5	2826


************************

************************
Document:  CACM-1325.html
************************


Remote, On-Line, Real-time Computer Diagnosis
of the Clinical Electrocardiogram

Presented in this paper is a brief report on
the hardware, software, system configuration and 
function of a system for the remote, online, real-time digital
computer diagnosis of clinical electrocardiograms. 
 It seems likely that efforts of this sort will lead
to a satisfactory solution to the problem of the 
automatic diagnosis of electrocardiograms.  Current
attempts by the authors to extend the diagnostic 
capabilities of the present system are particularly concerned
with increasing the fidelity of the adaptive 
matched filters, the development of three dimensional pattern analysis,
the analysis of parallel electrocardiographer-computer 
diagnostic interaction, and a study of the possibility
of introducing major, tree-like branching decisions 
early <B>in the</B> diagnostic process.

CACM January, 1965

Whipple, G. H.
Dickson, J. F.
Horibe, H.
Stark, L.

CA650112 JB March 8, 1978  2:27 PM

1325	4	1325
1325	5	1325
1325	5	1325
1325	5	1325
462	5	1325


************************

************************
Document:  CACM-2176.html
************************


Buffer Allocation in Merge-Sorting

A fixed buffer allocation for merge-sorting
is presented here which minimizes the number of 
input-output operations for a given order of merge.
 When sorting on movable arm disks, the number of 
seeks is equal to the number of input-output operations,
and the seek time usually controls the sort 
time.  First some standard terminology is introduced. 
Then the input buffer allocation method is described, 
followed by an analysis of the improvement to be expected
over more conventional allocation.  This analysis 
makes use of a particular distribution function.  An
analysis of a completely different distribution 
is given which yields similar results.  This suggests
that the results do not depend on a particular 
distribution function.  An optimum output buffer size
is also determined.  It is concluded that this 
buffering allocation can significantly reduce the time
of merge sorting on movable arm disks when the 
input data <B>are not</B> random, and that this output buffer
allocation should be used whether the data is 
random or not.

CACM July, 1971

Ferguson, D. E.

file, item, string, merge sort, seek time, gamma distribution function

4.41 5.31

CA710706 JB February 3, 1978  8:41 AM

1638	4	2176
2176	4	2176
2272	4	2176
2176	5	2176
2176	5	2176
2176	5	2176
677	5	2176


************************

************************
Document:  CACM-1148.html
************************


An Example in "Significant-Digit" Arithmetic*

Different methods of handling the summing process
for <B>the geometric</B> series are shown to give 
results indicating widely differing significances when carried
out in a machine incorporating "significant-digit" 
arithmetic.

CACM January, 1964

Miller, R. H.

CA640107 JB March 10, 1978  5:34 AM

1148	4	1148
1148	5	1148
1148	5	1148
1148	5	1148
85	5	1148
3131	5	1148
893	6	1148
1148	6	1148


************************

************************
Document:  CACM-2931.html
************************


Logic and Programming Languages

Logic has been long in terested in whether answers
to certain questions are computable in principle, 
since the outcome puts bounds on the possibilities of
formalization.  More recently, precise comparisons 
in the efficiency of decision methods have become available
through the developments in complexity theory. 
 These, however, are applications to logic, and a big question
is whether methods of logic have significance 
in the other direction for the more applied parts of
computability theory.  Programming languages offer 
an obvious opportunity as their syntactic formalization
is well advanced; however, the semantical theory 
can hardly be said to be complete.  Though we have
many examples, we have still to give wide-ranging 
mathematical answers to these queries:  What is a machine?
 What is a computable process?  How (or how 
well) does a machine simulate a process?  Programs naturally
enter in giving descriptions of processes. 
 The definition of the precise meaning of a program
then requires us to explain what are the objects 
of computation (in a way, the statics of the problem)
and how they are to be transformed (<B>the dynamics</B>). 
 So far the theories of automata and of nets, though
most in teresting for dynamics, have formalized only 
a portion of the field, and there has been perhaps too
much concentration on the finite-state and algebraic 
aspects.  It would seem that the understanding of higher-level
program features involves us with infinite 
objects and forces us to pass through several levels
of explanation to go from the conceptual ideas to 
the final simulation on a real machine.  These levels
can be made mathematically exact if we can find 
the right abstractions to represent the necessary structures.
 The experience of many independent workers 
with the method of data types as lattices (or partial
orderings) under an information content ordering, 
and with their continuous mappings, has demonstrated the
flexibility of this approach in providing definitions 
and proofs, which are clean and without undue dependence
on implementations.  Nevertheless much remains 
to be done in showing how abstract conceptualizations
can (or cannot) be actualized before we can say 
we have a unified theory.

CACM September, 1977

Scott, D. S.

logic, programming languages, automata, denotational
semantics, a-calculus models, computability, 
partial functions, approximation, function spaces

1.2 4.20 5.21 5.24 5.27

CA770902 JB December 28, 1977  6:49 AM

2931	5	2931
2931	5	2931
2931	5	2931


************************



Logic and Programming Languages

Logic has been long in terested in whether answers
to certain questions are computable in principle, 
since the outcome puts bounds on the possibilities of
formalization.  More recently, precise comparisons 
<B>in the</B> efficiency of decision methods have become available
through the developments in complexity theory. 
 These, however, are applications to logic, and a big question
is whether methods of logic have significance 
in the other direction for the more applied parts of
computability theory.  Programming languages offer 
an obvious opportunity as their syntactic formalization
is well advanced; however, the semantical theory 
can hardly be said to be complete.  Though we have
many examples, we have still to give wide-ranging 
mathematical answers to these queries:  What is a machine?
 What is a computable process?  How (or how 
well) does a machine simulate a process?  Programs naturally
enter in giving descriptions of processes. 
 The definition of the precise meaning of a program
then requires us to explain what are the objects 
of computation (in a way, the statics of the problem)
and how they are to be transformed (the dynamics). 
 So far the theories of automata and of nets, though
most in teresting for dynamics, have formalized only 
a portion of the field, and there has been perhaps too
much concentration on the finite-state and algebraic 
aspects.  It would seem that the understanding of higher-level
program features involves us with infinite 
objects and forces us to pass through several levels
of explanation to go from the conceptual ideas to 
the final simulation on a real machine.  These levels
can be made mathematically exact if we can find 
the right abstractions to represent the necessary structures.
 The experience of many independent workers 
with the method of data types as lattices (or partial
orderings) under an information content ordering, 
and with their continuous mappings, has demonstrated the
flexibility of this approach in providing definitions 
and proofs, which are clean and without undue dependence
on implementations.  Nevertheless much remains 
to be done in showing how abstract conceptualizations
can (or cannot) be actualized before we can say 
we have a unified theory.

CACM September, 1977

Scott, D. S.

logic, programming languages, automata, denotational
semantics, a-calculus models, computability, 
partial functions, approximation, function spaces

1.2 4.20 5.21 5.24 5.27

CA770902 JB December 28, 1977  6:49 AM

2931	5	2931
2931	5	2931
2931	5	2931


************************

************************
Document:  CACM-2828.html
************************


Hierarchical Geometric Models for Visible Surface Algorithms

The geometric structure inherent <B>in the</B> definition
of the shapes of three-dimensional objects 
and environments is used not just to define their relative
motion and placement, but also to assist in 
solving many other problems of systems for producing
pictures by computer.  By using an extension of 
traditional structure information, or a geometric hierarchy,
five significant improvements to current 
techniques are possible.  First, the range of complexity
of an environment is greatly increased while 
the visible complexity of any given scene is kept within
a fixed upper limit.  Second, a meaningful way 
is provided to vary the amount of detail presented in
a scene.  Third, "clipping" becomes a very fast 
logarithmic search for the resolvable parts of the environment
within the field of view.  Fourth, frame 
to frame coherence and clipping define a graphical
"working set," or fraction of the total structure 
that should be present in primary store for immediate
access by the visible surface algorithm.  Finally, 
the geometric structure suggests a recursive descent,
visible surface algorithm in which the computation 
time potentially grows linearly with the visible complexity of the scene.

CACM October, 1976

Clark, J. H.

visible surface algorithms, hidden surface algorithms,
hierarchical data structures, geometric 
models

5.31 8.2

CA761003 JB January 3, 1978  4:42 PM

1892	4	2828
1901	4	2828
2085	4	2828
2095	4	2828
2218	4	2828
2277	4	2828
2319	4	2828
2329	4	2828
2358	4	2828
2373	4	2828
2380	4	2828
2434	4	2828
2499	4	2828
2501	4	2828
2582	4	2828
2669	4	2828
2674	4	2828
2687	4	2828
2816	4	2828
2828	4	2828
2828	4	2828
2828	4	2828
2828	4	2828
2827	4	2828
2863	4	2828
2881	4	2828
2913	4	2828
2928	4	2828
2996	4	2828
3006	4	2828
3047	4	2828
3067	4	2828
1751	5	2828
2004	5	2828
2751	5	2828
2828	5	2828
2828	5	2828
2828	5	2828
2841	5	2828


************************



Hierarchical Geometric Models for Visible Surface Algorithms

The geometric structure inherent in the definition
of the shapes of three-dimensional objects 
and environments is used not just to define their relative
motion and placement, but also to assist in 
solving many other problems of systems for producing
pictures by computer.  By using an extension of 
traditional structure information, or a geometric hierarchy,
five significant improvements to current 
techniques are possible.  First, the range of complexity
of an environment is greatly increased while 
the visible complexity of any given scene is kept within
a fixed upper limit.  Second, a meaningful way 
is provided to vary the amount of detail presented in
a scene.  Third, "clipping" becomes a very fast 
logarithmic search for the resolvable parts of the environment
within the field of view.  Fourth, frame 
to frame coherence and clipping define a graphical
"working set," or fraction of the total structure 
that should be present in primary store for immediate
access by the visible surface algorithm.  Finally, 
<B>the geometric</B> structure suggests a recursive descent,
visible surface algorithm in which the computation 
time potentially grows linearly with the visible complexity of the scene.

CACM October, 1976

Clark, J. H.

visible surface algorithms, hidden surface algorithms,
hierarchical data structures, geometric 
models

5.31 8.2

CA761003 JB January 3, 1978  4:42 PM

1892	4	2828
1901	4	2828
2085	4	2828
2095	4	2828
2218	4	2828
2277	4	2828
2319	4	2828
2329	4	2828
2358	4	2828
2373	4	2828
2380	4	2828
2434	4	2828
2499	4	2828
2501	4	2828
2582	4	2828
2669	4	2828
2674	4	2828
2687	4	2828
2816	4	2828
2828	4	2828
2828	4	2828
2828	4	2828
2828	4	2828
2827	4	2828
2863	4	2828
2881	4	2828
2913	4	2828
2928	4	2828
2996	4	2828
3006	4	2828
3047	4	2828
3067	4	2828
1751	5	2828
2004	5	2828
2751	5	2828
2828	5	2828
2828	5	2828
2828	5	2828
2841	5	2828


************************

************************
Document:  CACM-3150.html
************************


Beyond Programming Languages

As computer technology matures, our growing ability to create large systems is 
leading to basic changes <B>in the</B> nature of programming.  Current programming 
language concepts will not be adequate for building and maintaining
systems of the complexity called for by the tasks we attempt.  Just
as high level languages enabled the programmer to escape from the
intricacies of a machine's order code, higher level programming systems
can provide the means to understand and manipulate complex
systems and components.  In order to develop such systems, we need
to shift our attention away from the detailed specification of
algorithms, towards the description of the properties of the packages
and objects with which we build.  This paper analyzes some of the
shortcomings of programming languages as they now exist,
and lays out some possible directions for future research.

CACM July, 1979

Winograd, T.

Programming, programming languages, programming systems, systems development

4.0 4.20 4.22 4.40

CA790701 DH August 22, 1979  2:00 PM

2155	4	3150
2294	4	3150
2558	4	3150
2837	4	3150
2842	4	3150
2945	4	3150
3031	4	3150
3077	4	3150
3105	4	3150
3148	4	3150
3148	4	3150
3150	4	3150
3150	4	3150
3150	4	3150
3150	4	3150
3150	4	3150
3150	4	3150
3150	4	3150
3150	4	3150
3150	4	3150
3155	4	3150
2060	5	3150
2704	5	3150
2842	5	3150
2939	5	3150
2941	5	3150
2943	5	3150
2940	5	3150
3073	5	3150
3148	5	3150
3150	5	3150
3150	5	3150
3150	5	3150


************************

************************
Document:  CACM-2519.html
************************


On the Problem of Communicating Complex Information

The nature of the difficulty involved in communicating
mathematical results between scientists 
using a computer based information retrieval system
is examined.  The problem is analyzed in terms of 
psychological and information-processing processes, and
what turns out to be a vicious circle of effects 
is described.  These include ways of augmenting written
natural language by various notational and linguistic 
devices, the exhibition of the structure inherent <B>in the</B>
information we are communicating, and a sophisticated 
interactive system controlled by computer.

CACM May, 1973

Pager, D.

complex information, information, communication,
mathematics, proof, interactive system, language

1.0 1.1 1.50 1.52 1.59 2.42 3.32 3.51 3.62 3.70 3.81

CA730501 JB January 24, 1978  9:25 AM

2519	4	2519
2390	5	2519
2519	5	2519
2519	5	2519
2519	5	2519


************************

************************
Document:  CACM-2582.html
************************


Improving Locality by Critical Working Sets

A new approach to program locality improvement
via restructuring is described.  The method 
is particularly suited to those systems where primary memory
is managed according to a working set strategy. 
 It is based on the concept of critical working set, a
working set which does not conta<B>in the</B> next memory 
reference.  The data the method operates upon are extracted from
a trace of the program to be restructured. 
 It is shown that, except in some special cases, the
method is not optimum.  However, the experimental 
results obtained by using the method to restructure an
interactive text editor and the file system module 
of an operating system have shown its substantial superiority
over the other methods proposed in the 
literature.

CACM November, 1974

Ferrari, D.

program restructuring, program segmentation, locality
improvement, memory hierarchies, virtual 
memory, multiprogramming, restructuring techniques, static
restructuring, dynamic restructuring, working 
set strategy, critical working set

4.32 4.39 4.43 4.49 4.9

CA741102 JB January 16, 1978  10:50 AM

1892	4	2582
1901	4	2582
2085	4	2582
2095	4	2582
2218	4	2582
2277	4	2582
2319	4	2582
2319	4	2582
2329	4	2582
2358	4	2582
2365	4	2582
2373	4	2582
2380	4	2582
2434	4	2582
2499	4	2582
2501	4	2582
2582	4	2582
2582	4	2582
2582	4	2582
2582	4	2582
2669	4	2582
2669	4	2582
2828	4	2582
2863	4	2582
2881	4	2582
2928	4	2582
2996	4	2582
3006	4	2582
3054	4	2582
3067	4	2582
3152	4	2582
1751	5	2582
1924	5	2582
2017	5	2582
2130	5	2582
2582	5	2582
2582	5	2582
2582	5	2582


************************

************************
Document:  CACM-0605.html
************************


Computer Simulation Of City Traffic

In simulating traffic flow on city streets,
the National Bureau of Standards has used data 
processing techniques to tabulate and make motion pictures
of vehicle movements <B>in the</B> model.  Each vehicle 
is assigned a digital identification giving points of
entry and exit, type of vehicle, desired speed, 
and actual speed, in proportions simulating field data.
 Changes in the model can be made to observe 
their consequences and to determine the ability of a
real street to carry loads expected in the future.

CACM April, 1962

CA620412 JB March 20, 1978  2:00 PM

605	5	605
605	5	605
605	5	605


************************

************************
Document:  CACM-1046.html
************************


A Compiler-Building System Developed by Brooker and Morris

In a number of articles published during the
past two years, R. A. Brooker and D. Morris (joined 
by J. Rohl <B>in the</B>ir most recent paper have presented
a very interesting programming system that they 
have developed for the Ferranti Atlas computer.  The
present paper describes some of the major features 
of their system. it expands on some points that the original
authors cover briefly, and treats only very 
lightly some topics to which they devote considerable space.
 The purpose of this paper is purely expository. 
 Except in some very small details, and in some comments,
it does not intentionally depart from or add 
to the material published in the listed references.

CACM July, 1964

Rosen, S.

CA640701 JB March 9, 1978  8:47 PM

1046	4	1046
1105	4	1046
1139	4	1046
1140	4	1046
1234	4	1046
1263	4	1046
1265	4	1046
1496	4	1046
1781	4	1046
1824	4	1046
2126	4	1046
2546	4	1046
464	4	1046
584	4	1046
631	4	1046
653	4	1046
680	4	1046
763	4	1046
795	4	1046
799	4	1046
945	4	1046
1046	5	1046
1046	5	1046
1046	5	1046
1781	5	1046
404	5	1046
123	6	1046
196	6	1046
919	6	1046
990	6	1046
1007	6	1046
1046	6	1046
1131	6	1046
1139	6	1046
1140	6	1046
1149	6	1046
1198	6	1046
1215	6	1046
1223	6	1046
1265	6	1046
1303	6	1046
1323	6	1046
1358	6	1046
1366	6	1046
1421	6	1046
1460	6	1046
1462	6	1046
1463	6	1046
1467	6	1046
1468	6	1046
1477	6	1046
1491	6	1046
1496	6	1046
1531	6	1046
1535	6	1046
1565	6	1046
1601	6	1046
1602	6	1046
1613	6	1046
1614	6	1046
1626	6	1046
1641	6	1046
1787	6	1046
1788	6	1046
205	6	1046
224	6	1046
249	6	1046
288	6	1046
316	6	1046
381	6	1046
398	6	1046
11	6	1046
404	6	1046
410	6	1046
463	6	1046
464	6	1046
483	6	1046
3184	6	1046
3188	6	1046
584	6	1046
600	6	1046
680	6	1046
691	6	1046
763	6	1046
799	6	1046


************************

************************
Document:  CACM-1348.html
************************


FLOWTRACE, A Computer Program for Flowcharting Programs

The FLOWTRACE system produces flowcharts of programs
written in "almost any" programming language. 
 One most describe the syntax of the control statements
in his language; for this purpose a metalanguage 
is available.  The resultant object deck is used to
flowchart any programs <B>in the</B> language described. 
 Several examples of FAP and SNOBOL flowcharts are given.
 However, it is not necessary to confine one's 
scope to existing languages.  One may define his own
language in any "well-structured" manner.  This 
feature is particularly useful when it is desirable
to chart only comments within a program.  Such an 
approach permits the documentation of descriptive remarks
and avoids the inclusion of coding details.

CACM December, 1966

Sherman, P. M.

CA661202 JB March 2, 1978  2:49 PM

1330	4	1348
1348	4	1348
2315	4	1348
1348	5	1348
1348	5	1348
1348	5	1348
2315	5	1348
728	5	1348
1348	6	1348
1834	6	1348
1987	6	1348
728	6	1348


************************

************************
Document:  CACM-2187.html
************************


Computer Science: A Conceptual Framework for Curriculum Planning

Two views of computer science are considered:
a global view which attempts to capture broad 
characteristics of the field and its relationships to
other fields, and a local view which focuses on 
the inner structure of the field.  This structure is presented
in terms of the kinds of knowledge, problems, 
and activities that exist with<B>in the</B> discipline, as
well as the relations between them.  An approach 
to curriculum planning in computer science is presented
which is guided by the structure of the field, 
by the fact that change is an important feature of the
situation, and by the expectation that computer
science will continue to increase its working contacts with other disciplines.

CACM June, 1971

Amarel, S.

computer science, curriculum planning, education

1.0 1.52

CA710603 JB February 3, 1978  10:17 AM

1665	4	2187
1768	4	2187
1787	4	2187
1805	4	2187
1824	4	2187
1825	4	2187
1828	4	2187
1836	4	2187
1854	4	2187
1861	4	2187
2015	4	2187
2110	4	2187
2127	4	2187
2187	4	2187
2187	4	2187
2317	4	2187
2545	4	2187
2698	4	2187
2733	4	2187
1748	5	2187
1781	5	2187
2187	5	2187
2187	5	2187
2187	5	2187
3003	5	2187
1659	6	2187
1678	6	2187
1927	6	2187
1945	6	2187
2097	6	2187
2147	6	2187
2163	6	2187
2187	6	2187
2329	6	2187
2345	6	2187
2367	6	2187
2407	6	2187
2478	6	2187
2479	6	2187
2480	6	2187
2538	6	2187


************************

************************
Document:  CACM-3033.html
************************


Optimizing Decision Trees Through Heuristically Guided Search

Optimal decision table conversion has been
tackled <B>in the</B> literature using two approaches, 
dynamic programming and branch-and-bound.  The former
technique is quite effective, but its time and 
space requirements are independent of how "easy" the
given table is.  Furthermore, it cannot be used 
to produce good, quasi optimal solutions.  The branch-and-bound
technique uses a good heuristic to direct 
the search, but is cluttered up by an enormous search
space, since the number of solutions increases 
with the number of test variables according to a double 
exponential.  In this paper we suggest a heuristically 
guided top-down search algorithm which, like dynamic
programming, recognizes identical subproblems but 
which can be used to find both optimal and quasi optimal
solutions.  The heuristic search method introduced 
in this paper combines the positive aspects of the above
two techniques.  Compressed tables with a large 
number of variables can be handled without deriving expanded tables first. 

CACM December, 1978

Martelli, A.
Montanari, U.

Decision table, optimal decision table conversion,
decision tree, heuristic search, AND/OR graphs, 
dynamic programming, branch-and-bound

3.59 3.66 5.42 8.3

CA781206 DH January 18, 1979  3:56 PM

3033	4	3033
3113	4	3033
2856	5	3033
3033	5	3033
3033	5	3033
3033	5	3033


************************

************************
Document:  CACM-1623.html
************************


An Application of FORMAC

A nonlinear circuit analysis problem is stated
and the way in which it was solved using FORMAC 
is indicated.  The solution of the problem using FORMAC
was notable since several other methods that 
were tried failed.  The problem is straightforward (although
untenable by hand) but nevertheless involved 
an elaborate use of the FORMAC language.  The program
was fairly large and utilized practically every 
command.  In particular, it made extensive use of the
PART command.  Several tricks were necessary in 
order to circumvent some of the shortcomings of the
FORMAC system.  This paper is more concerned with 
the use of programming techniques in FORMAC than with
the actual engineering problem, although readers 
may be interested <B>in the</B> problem because it is stated
in a general (mathematical) sense and could be 
of interest in areas other than circuit analysis.

CACM March, 1967

Neidleman, L. D.

CA670306 JB February 28, 1978  1:27 PM

1623	5	1623
1623	5	1623
1623	5	1623


************************



An Application of FORMAC

A nonlinear circuit analysis problem is stated
and the way in which it was solved using FORMAC 
is indicated.  The solution of the problem using FORMAC
was notable since several other methods that 
were tried failed.  The problem is straightforward (although
untenable by hand) but nevertheless involved 
an elaborate use of the FORMAC language.  The program
was fairly large and utilized practically every 
command.  In particular, it made extensive use of the
PART command.  Several tricks were necessary in 
order to circumvent some of the shortcomings of the
FORMAC system.  This paper is more concerned with 
the use of programming techniques in FORMAC than with
the actual engineering problem, although readers 
may be <B>interested in</B> the problem because it is stated
in a general (mathematical) sense and could be 
of interest in areas other than circuit analysis.

CACM March, 1967

Neidleman, L. D.

CA670306 JB February 28, 1978  1:27 PM

1623	5	1623
1623	5	1623
1623	5	1623


************************

************************
Document:  CACM-3135.html
************************


Detection of Three-Dimensional Patterns of Atoms in Chemical Structures

An algorithm for detecting occurrences of a three-dimensional pattern of
objects within a larger structure is presented.  The search technique
presented uses the geometric structure of the pattern to define
characteristics demanded of candidates for matching. This is useful
in cases where the properties of each atom, considered individually,
do not adequately limit the number of sets of possible matchings.
Several applications of this technique <B>in the</B> field of chemistry
are: (1) in pharmacology: searching for a common constellation
of atoms in molecules possessing similar biological activities;
(2) in X-ray crystallography: fitting a structure or a structural fragment
to a set of peaks in the electron-density distribution of
a Fourier map; (3) in chemical documentation; retrieving from
a file the structures containing specified substructures.

CACM April, 1979

Lesk, A.

Three-dimensional pattern recognition, chemical
structure search, information retrieval, crystal
-structure analysis, drug analysis and design

3.13 3.63 3.74

CA790401 DH May 21, 1979  10:50 AM

2521	5	3135
3135	5	3135
3135	5	3135
3135	5	3135
2028	6	3135
2031	6	3135
3135	6	3135


************************



Detection of Three-Dimensional Patterns of Atoms in Chemical Structures

An algorithm for detecting occurrences of a three-dimensional pattern of
objects within a larger structure is presented.  The search technique
presented uses <B>the geometric</B> structure of the pattern to define
characteristics demanded of candidates for matching. This is useful
in cases where the properties of each atom, considered individually,
do not adequately limit the number of sets of possible matchings.
Several applications of this technique in the field of chemistry
are: (1) in pharmacology: searching for a common constellation
of atoms in molecules possessing similar biological activities;
(2) in X-ray crystallography: fitting a structure or a structural fragment
to a set of peaks in the electron-density distribution of
a Fourier map; (3) in chemical documentation; retrieving from
a file the structures containing specified substructures.

CACM April, 1979

Lesk, A.

Three-dimensional pattern recognition, chemical
structure search, information retrieval, crystal
-structure analysis, drug analysis and design

3.13 3.63 3.74

CA790401 DH May 21, 1979  10:50 AM

2521	5	3135
3135	5	3135
3135	5	3135
3135	5	3135
2028	6	3135
2031	6	3135
3135	6	3135


************************

************************
Document:  CACM-2721.html
************************


The Digital Simulation of River Plankton Population Dynamics

This paper deals with the development of a
mathematical model for and the digital simulation 
in Fortran IV of phytoplankton and zooplankton population
densities in a river using previously developed 
rate expressions.  In order to study the relationships
between the ecological mechanisms involved, the 
simulation parameters were varied illustrating the
response of the ecosystem to different conditions, 
including those corresponding to certain types of chemical
and thermal pollution.  As an investigation 
of the accuracy of the simulation methods, a simulation
of the actual population dynamics of Asterionella 
<B>in the</B> Columbia River was made based on approximations
of conditions in that river. Although not totally 
accurate, the simulation was found to predict the general
annual pattern of plankton growth fairly well 
and, specifically, revealed the importance of the annual
velocity cycle in determining such patterns. 
 In addition, the study demonstrates the usefulness of
digital simulations in the examinations of certain 
aquatic ecosystems, as well as in environmental
planning involving such examinations.

CACM September, 1975

Claudson, R. M.

digital simulation, mathematical modeling, plankton
population dynamics, phytoplankton, zooplankton, 
river ecosystems, ecological mechanisms, environmental simulation,
modeling ecosystems, pollution, environmental 
impact, environmental planning

3.12 3.19

CA750903 JB January 6, 1978  2:55 PM

2721	5	2721
2721	5	2721
2721	5	2721


************************



The Digital Simulation of River Plankton Population Dynamics

This paper deals with the development of a
mathematical model for and the digital simulation 
in Fortran IV of phytoplankton and zooplankton population
densities in a river using previously developed 
rate expressions.  In order to study the relationships
between the ecological mechanisms involved, the 
simulation parameters were varied illustrating the
response of the ecosystem to different conditions, 
including those corresponding to certain types of chemical
and thermal pollution.  As an investigation 
of the accuracy of the simulation methods, a simulation
of the actual population <B>dynamics of</B> Asterionella 
in the Columbia River was made based on approximations
of conditions in that river. Although not totally 
accurate, the simulation was found to predict the general
annual pattern of plankton growth fairly well 
and, specifically, revealed the importance of the annual
velocity cycle in determining such patterns. 
 In addition, the study demonstrates the usefulness of
digital simulations in the examinations of certain 
aquatic ecosystems, as well as in environmental
planning involving such examinations.

CACM September, 1975

Claudson, R. M.

digital simulation, mathematical modeling, plankton
population dynamics, phytoplankton, zooplankton, 
river ecosystems, ecological mechanisms, environmental simulation,
modeling ecosystems, pollution, environmental 
impact, environmental planning

3.12 3.19

CA750903 JB January 6, 1978  2:55 PM

2721	5	2721
2721	5	2721
2721	5	2721


************************

************************
Document:  CACM-0531.html
************************


Person-Matching by Electronic Methods

Record linkage in the updating of files is
accomplished in many establishments through the 
use of a preassigned number, such as payroll number,
customer number, or social security number.  In 
vital and health records, however, a unique number
is generally not preassigned to an individual for 
purposes of reporting services received to the health
department.  In order to determine whether different 
physician reports refer to the same individual, name
and other identification must be compared.  This 
is a laborious operation which is subject to various
errors because of name misspellings, changes of 
name upon marriage, and other problems.  <B>We are</B> interested
in the maintenance of a psychiatric case register 
in Maryland, where many of the reports from over a hundred
psychiatric agencies refer to the same patient. 
 These records must be linked in order to provide unduplicated
counts of individuals under care and longitudinal 
records of psychiatric history.  An earlier paper [1] describes
our general procedures for register maintenance 
by use of a digital computer (Honeywell 800).  Here
we present in more detail our initial procedures 
for the person-matching process in order to elicit comments
and suggestions from persons who have had 
experience in matching.

CACM July, 1962

Phillips Jr., W.
Bahn, A. K.
Miyasaki, M.

CA620730 JB March 17, 1978  7:51 PM

531	5	531
531	5	531
531	5	531


************************



Person-Matching by Electronic Methods

Record linkage <B>in the</B> updating of files is
accomplished in many establishments through the 
use of a preassigned number, such as payroll number,
customer number, or social security number.  In 
vital and health records, however, a unique number
is generally not preassigned to an individual for 
purposes of reporting services received to the health
department.  In order to determine whether different 
physician reports refer to the same individual, name
and other identification must be compared.  This 
is a laborious operation which is subject to various
errors because of name misspellings, changes of 
name upon marriage, and other problems.  We are interested
in the maintenance of a psychiatric case register 
in Maryland, where many of the reports from over a hundred
psychiatric agencies refer to the same patient. 
 These records must be linked in order to provide unduplicated
counts of individuals under care and longitudinal 
records of psychiatric history.  An earlier paper [1] describes
our general procedures for register maintenance 
by use of a digital computer (Honeywell 800).  Here
we present in more detail our initial procedures 
for the person-matching process in order to elicit comments
and suggestions from persons who have had 
experience in matching.

CACM July, 1962

Phillips Jr., W.
Bahn, A. K.
Miyasaki, M.

CA620730 JB March 17, 1978  7:51 PM

531	5	531
531	5	531
531	5	531


************************

************************
Document:  CACM-2887.html
************************


A Study of Errors, Error-Proneness, and Error Diagnosis in Cobol

This paper provides data on Cobol error frequency
for correction of errors in student-oriented 
compilers, improvement of teaching, and changes in programming
language.  Cobol was studied because of 
economic importance, widespread usage, possible error-including
design, and lack of research.  The types 
of errors were identified in a pilot study; then, using
the 132 error types found, 1,777 errors were 
classified in 1,4000 runs of 73 Cobol students.  Error
density was high: 20 percent of the types contained 
80 percent of the total frequency, which implies high
potential effectiveness for software based correction 
of Cobol.  Surprisingly, only four high-frequency errors
were error-prone, which implies minimal error 
inducing design. 80 percent of Cobol misspellings were classifiable
<B>in the</B> four error categories of previous 
researchers, which implies that Cobol misspellings
are correctable by existent algorithms.  Reserved 
word usage was not error-prone, which implies minimal
interference with usage of reserved words.  Over 
80 percent of error diagnosis was found to be inaccurate.
 Such feedback is not optimal for users, particularly 
for the learning user of Cobol.

CACM January, 1976

Litecky, C. R.
Davis, G. B.

errors in programming, error correction, Cobol, programming
language errors, error analysis, diagnostics, 
error-proneness, error frequency, spelling errors, syntactic
errors, learning of programming, teaching 
of programming

4.22 4.2 4.6

CA760106 JB January 5, 1978  10:06 AM

2534	4	2887
2556	4	2887
2650	4	2887
2708	4	2887
2887	4	2887
2887	4	2887
1646	5	2887
2111	5	2887
2887	5	2887
2887	5	2887
2887	5	2887
3145	5	2887
2887	6	2887


************************

************************
Document:  CACM-1543.html
************************


Computer Formulation of the Equations of Motion Using Tensor Notation

A means is described for extending the area
of application of digital computers beyond the 
numerical data processing stage and reducing the need for
human participation <B>in the</B> formulation of certain 
types of computer problems.  By the use of tensor calculus
and a computer language designed to facilitate 
symbolic mathematical computation, a method has been
devised whereby a digital computer can be used to 
do non-numeric work, that is, symbolic algebraic manipulation
and differentiation. To illustrate the 
techniques involved, a digital computer has been used
to derive the equations of motion of a point mass 
in a general orthogonal curvilinear coordinate system.
 Since this operation involves a formulation in 
terms of first- and second-order differential coefficients,
it provides a good demonstration of a computer's 
capability to do non-numeric work and to assist in the
formulation process which normally precedes the 
numerical data processing stage.  Moreover, this particular
problem serves to illustrate the advantages 
of the mathematical techniques employed.  With the program
prepared for this purpose the computer will 
derive the equations of motion in any coordinate system
requested by the user.   Results are presented 
for the following coordinate systems: cylindrical
polar, spherical polar, and prolate spheroidal.

CACM September, 1967

Howard, J. C.

CA670903 JB February 27, 1978  3:58 PM

1543	4	1543
1543	4	1543
1664	4	1543
1664	4	1543
1345	5	1543
1543	5	1543
1543	5	1543
1543	5	1543
1616	5	1543
1664	5	1543
1345	6	1543
1543	6	1543
1616	6	1543


************************

************************
Document:  CACM-1362.html
************************


Code Extension in ASCII* (An ASA Tutorial)

The American Standard Code for Information
Interchange (ASCII) contains a number of control 
characters associated with the principle of code extension,
that is, with the representation of information 
which cannot be directly represented by means of the characters
in the Code.  The manner of use of these 
characters has not previously been completely described.
 This paper presents a set of mutually consistent 
philosophies regarding code extension applications,
and suggests a corollary set of doctrines for the 
application of the code extension characters.  Distinctions
are drawn between code extension and such 
other concepts as "graphic substitution" or "syntactic
representation" which are often used to meet similar 
requirements.  Also covered are certain topics which
<B>are not</B> truly concerned with code extension but 
which are often linked with it in discussion on code applications.
 The material in this paper is equally 
applicable in principle to the (proposed) ISO international
7-bit code for information interchange.

CACM October, 1966

CA661005 JB March 2, 1978  4:02 PM

1362	5	1362
1362	5	1362
1362	5	1362


************************



Code Extension in ASCII* (An ASA Tutorial)

The American Standard Code for Information
Interchange (ASCII) contains a number of control 
characters associated with the principle of code extension,
that is, with the representation of information 
which cannot be directly represented by means of the characters
<B>in the</B> Code.  The manner of use of these 
characters has not previously been completely described.
 This paper presents a set of mutually consistent 
philosophies regarding code extension applications,
and suggests a corollary set of doctrines for the 
application of the code extension characters.  Distinctions
are drawn between code extension and such 
other concepts as "graphic substitution" or "syntactic
representation" which are often used to meet similar 
requirements.  Also covered are certain topics which
are not truly concerned with code extension but 
which are often linked with it in discussion on code applications.
 The material in this paper is equally 
applicable in principle to the (proposed) ISO international
7-bit code for information interchange.

CACM October, 1966

CA661005 JB March 2, 1978  4:02 PM

1362	5	1362
1362	5	1362
1362	5	1362


************************

************************
Document:  CACM-2610.html
************************


Gauss Harmonic Interpolation Formulas

Let R be an open, bounded, simply connected
region <B>in the</B> (x,y)-plane and let (x*,y*) be a 
point in R.  Assuming R is starlike with respect to
(x*,y*), we discuss a method for computing Gauss 
harmonic interpolation formulas for R and the point (x*,y*).
 Such formulas approximate a harmonic function 
at (x*,y*) in terms of a linear combination of its
values at certain selected points on the boundary 
of R.  Such formulas are useful for approximating
the solution of the Dirichlet problem for R.

CACM August, 1974

Stroud, A. H.

interpolation, quadrature, harmonic interpolation,
harmonic quadrature, Dirichlet problem

5.13 5.16 5.17

CA740814 JB January 17, 1978  9:23 AM

2610	5	2610
2610	5	2610
2610	5	2610


************************

************************
Document:  CACM-0492.html
************************


Analysis of a File Addressing Method

This paper presents a new file addressing method
based on the calculation of an address from 
the identification of a record.  For large recirculating
type files, it seems to be more advantageous 
than customary ones.  The probability distribution of
the displacement of records from their calculated 
address, which is one less than the number of probes
required to address a record, is computed on the 
basis of a Markov chain model.  For the reader <B>not interested</B>
in the mathematics, the introduction and 
the summary should be sufficient.

CACM August, 1962

Schay Jr., G.
Spruth, W. G.

CA620836 JB March 17, 1978  9:02 PM

911	5	492
1785	5	492
2203	5	492
2860	5	492
492	5	492
492	5	492
492	5	492
911	6	492
911	6	492
1328	6	492
1785	6	492
1786	6	492
332	6	492
332	6	492
2107	6	492
2109	6	492
2203	6	492
492	6	492
492	6	492
492	6	492
492	6	492


************************



Analysis of a File Addressing Method

This paper presents a new file addressing method
based on the calculation of an address from 
the identification of a record.  For large recirculating
type files, it seems to be more advantageous 
than customary ones.  The probability distribution of
the displacement of records from their calculated 
address, which is one less than the number of probes
required to address a record, is computed on the 
basis of a Markov chain model.  For the reader not interested
<B>in the</B> mathematics, the introduction and 
the summary should be sufficient.

CACM August, 1962

Schay Jr., G.
Spruth, W. G.

CA620836 JB March 17, 1978  9:02 PM

911	5	492
1785	5	492
2203	5	492
2860	5	492
492	5	492
492	5	492
492	5	492
911	6	492
911	6	492
1328	6	492
1785	6	492
1786	6	492
332	6	492
332	6	492
2107	6	492
2109	6	492
2203	6	492
492	6	492
492	6	492
492	6	492
492	6	492


************************

************************
Document:  CACM-1014.html
************************


Machine Controls for Analysis of Variance

A major problem in using the analysis of variance,
as the number of factors increases, is the 
exponential rise in the number of interactions.  Even
though the experimenter may not be <B>interested in</B> 
these interactions it is impossible to ignore them in
most experimental designs because of the problem 
of getting error terms.  It is natural therefore to look
to the computer to handle the bulk of work involved 
in computing the interactions.  A program device
to get the computer to do this is described.

CACM August, 1964

Weldon, R. J.

CA640816 JB March 9, 1978  6:37 PM

1014	4	1014
912	5	1014
1014	5	1014
1014	5	1014
1014	5	1014


************************



Machine Controls for Analysis of Variance

A major problem in using the analysis of variance,
as the number of factors increases, is the 
exponential rise <B>in the</B> number of interactions.  Even
though the experimenter may not be interested in 
these interactions it is impossible to ignore them in
most experimental designs because of the problem 
of getting error terms.  It is natural therefore to look
to the computer to handle the bulk of work involved 
in computing the interactions.  A program device
to get the computer to do this is described.

CACM August, 1964

Weldon, R. J.

CA640816 JB March 9, 1978  6:37 PM

1014	4	1014
912	5	1014
1014	5	1014
1014	5	1014
1014	5	1014


************************

************************
Document:  CACM-3172.html
************************


An Algorithm for Planning Collision-Free
Paths Among Polyhedral Obstacles

This paper describes a collision avoidance algorithm
for planning a safe path for a polyhedral object moving among
known polyhedral objects.  The algorithm transforms the obstacles
so that they represent the locus of forbidden positions for an arbitrary
reference point on the moving object.  A trajectory of this
reference point which avoids all forbidden regions is free of collisions.
Trajectories are found by searching a network which indicates, for each vertex 
<B>in the</B> transformed obstacles, which other vertices can be reached safely.

CACM October, 1979

Lozano-Perez, T.
Wesley, M.

Path finding, collision-free paths, polyhedral objects,
polyhedral obstacles, graph searching, growing objects

3.15 3.64 3.66 8.1

CA791005 DB January 17, 1980  10:13 AM

3172	4	3172
3116	5	3172
3172	5	3172
3172	5	3172
3172	5	3172


************************

************************
Document:  CACM-1433.html
************************


A Note on Linear Programming Algorithm Design: A Combinatorial Problem

As linear programming models grow bigger and
bigger in size, much actual data that must be 
memorized is often put on magnetic tape or disk, and
consequently there is an improportionality fast 
rise <B>in the</B> consumption of computer timeo cut down
this expense, an ever increasing effort is made 
to design more efficient algorithms.  This paper is
meant to support the effort.  It is attempted to 
find some characteristics of the way a pivot column
is found.  The number of repetitions of a certain 
transfer of data from tape to core memory is considered.
 After some simplification, the problem is restated 
in a general way.  The generating function of the probability
distribution and the moment generating 
function of the number of repetitions is found.  Asymptotic
formulas are given for the moments using 
a result from a paper of S. Narumi [1].  The results
may be applied to write very efficient routines 
that search for an extreme value in a table.  Formulas
provide a means of calculating the computer timings 
in this case.

CACM May, 1966

Roes, P. B. M.

CA660504 JB March 3, 1978  10:10 AM

1433	5	1433
1433	5	1433
1433	5	1433


************************

************************
Document:  CACM-3117.html
************************


The Impact and Use of Computer Technology by the Police

Over the past decade there has been a significant growth
<B>in the</B> use of computer technology by U. police departments.  This
growth, however, has been at a slower rate than predicted in the
early 1970's.  Further, when computer applications extend
beyond "routine" uses to "nonroutine" efforts, such as resource allocation
or computer-aided-dispatch systems where the machine begins to become
a tool for decision making, strategic planning and person/machine
interaction, the results of the technology to date have been
mixed.  This paper reports on case studies and surveys which provinsights 
on the implementation and impact of police computer technology
and the relationship of this technology to law enforcement and society.

CACM January, 1979

Colton, K.

Computer technology, innovation, police resource allocation, police command 
and control, computer aided dispatch,
law enforcement, technology transfer

2.1 2.11 2.12 2.45 3.33 3.39

CA790102 DH April 10, 1979  11:32 AM 

3117	4	3117
3090	5	3117
3117	5	3117
3117	5	3117
3117	5	3117


************************

************************
Document:  CACM-1397.html
************************


Proceedings of the ACM Symposium on Symbolic and Algebraic Manipulation

The ACM Symposium on Symbolic and Algebraic
Manipulation brought together over four hundred 
people interested in programming languages designed
for manipulation of algebraic formulas and symbol 
strings, <B>in the</B>ir applications, and in algorithms for
their implementation.  Twenty-eight papers were 
presented, followed by a lively panel discussion of
future directions.  Evening meetings were arranged 
for several interest groups.  The conference was sponsored
by the ACM Special Interest Committee on Symbolic 
and Algebraic Manipulation.  The program committee consisted
of Chairman Jean E. Sammet, Paul Abrahams, 
Thomas E. Cheatham, Max Goldstein, and Douglas Mcllroy.
 Conference arrangements were made by Lewis C. 
Clapp, Daniel Bobrow and James H. Griesmer.-Robert W. Floyd, Editor

CACM August, 1966

CA660801 JB March 2, 1978  8:17 PM

1397	4	1397
2704	4	1397
1247	5	1397
1396	5	1397
1397	5	1397
1397	5	1397
1397	5	1397
964	6	1397
1028	6	1397
1029	6	1397
1083	6	1397
1132	6	1397
1214	6	1397
1278	6	1397
1334	6	1397
1365	6	1397
1386	6	1397
1387	6	1397
1388	6	1397
1392	6	1397
1393	6	1397
1394	6	1397
1395	6	1397
1396	6	1397
1397	6	1397
1496	6	1397
284	6	1397
407	6	1397
3199	6	1397
3200	6	1397
3201	6	1397
3202	6	1397
3203	6	1397
3204	6	1397
561	6	1397
730	6	1397


************************



Proceedings of the ACM Symposium on Symbolic and Algebraic Manipulation

The ACM Symposium on Symbolic and Algebraic
Manipulation brought together over four hundred 
people <B>interested in</B> programming languages designed
for manipulation of algebraic formulas and symbol 
strings, in their applications, and in algorithms for
their implementation.  Twenty-eight papers were 
presented, followed by a lively panel discussion of
future directions.  Evening meetings were arranged 
for several interest groups.  The conference was sponsored
by the ACM Special Interest Committee on Symbolic 
and Algebraic Manipulation.  The program committee consisted
of Chairman Jean E. Sammet, Paul Abrahams, 
Thomas E. Cheatham, Max Goldstein, and Douglas Mcllroy.
 Conference arrangements were made by Lewis C. 
Clapp, Daniel Bobrow and James H. Griesmer.-Robert W. Floyd, Editor

CACM August, 1966

CA660801 JB March 2, 1978  8:17 PM

1397	4	1397
2704	4	1397
1247	5	1397
1396	5	1397
1397	5	1397
1397	5	1397
1397	5	1397
964	6	1397
1028	6	1397
1029	6	1397
1083	6	1397
1132	6	1397
1214	6	1397
1278	6	1397
1334	6	1397
1365	6	1397
1386	6	1397
1387	6	1397
1388	6	1397
1392	6	1397
1393	6	1397
1394	6	1397
1395	6	1397
1396	6	1397
1397	6	1397
1496	6	1397
284	6	1397
407	6	1397
3199	6	1397
3200	6	1397
3201	6	1397
3202	6	1397
3203	6	1397
3204	6	1397
561	6	1397
730	6	1397


************************

************************
Document:  CACM-1930.html
************************


Extremely Portable Random Number Generator

Extremely portable subroutines are sometimes
needed for which moderate quality and efficiency 
suffice.  Typically, this occurs for library functions
(like random number generation and in core sorting) 
which are not entirely universal or are not used in a
standardized way.  The literature on random number 
generators does not seem to contain an algorithm that
meets requirements of this sort.  An extremely 
portable 8-line FORTRAN program is provided which based
on an important paper by Coveyou and MacPherson 
(1967)sing their methods, Fourier analysis is applied
to the probability function for the consecutive 
n-tuples provided by our generator (with n less than
or equal to 4).  While the small modulus which must 
be used to maintain portability prevents the quality
of the generator from being high, the generator 
compares well with the bounds established <B>in the</B> above mentioned paper.

CACM February, 1969

Kruskal, J. B.

random number generators, random numbers, random
number analysis, random generators, linear sequential 
generators, random number program, pseudo random numbers 

4.49 5.19 5.5

CA690208 JB February 20, 1978  10:43 AM

1930	5	1930
1930	5	1930
1930	5	1930
2115	5	1930
1691	6	1930
1930	6	1930


************************



Extremely Portable Random Number Generator

Extremely portable subroutines are sometimes
needed for which moderate quality and efficiency 
suffice.  Typically, this occurs for library functions
(like random number generation and in core sorting) 
which <B>are not</B> entirely universal or are not used in a
standardized way.  The literature on random number 
generators does not seem to contain an algorithm that
meets requirements of this sort.  An extremely 
portable 8-line FORTRAN program is provided which based
on an important paper by Coveyou and MacPherson 
(1967)sing their methods, Fourier analysis is applied
to the probability function for the consecutive 
n-tuples provided by our generator (with n less than
or equal to 4).  While the small modulus which must 
be used to maintain portability prevents the quality
of the generator from being high, the generator 
compares well with the bounds established in the above mentioned paper.

CACM February, 1969

Kruskal, J. B.

random number generators, random numbers, random
number analysis, random generators, linear sequential 
generators, random number program, pseudo random numbers 

4.49 5.19 5.5

CA690208 JB February 20, 1978  10:43 AM

1930	5	1930
1930	5	1930
1930	5	1930
2115	5	1930
1691	6	1930
1930	6	1930


************************

************************
Document:  CACM-0670.html
************************


Some Legal Implications of the Use of Computers <B>in the</B> Banking Business

The introduction of computers in to the banking
business has a wide variety of legal implications 
that merit careful attention at this very early stage.
 The industry is highly regulated by government 
and, hence, is subject to many statutes and regulations.
 It also is affected by important common law 
rules established by courts.  The legal ramifications
involve not only the mechanization itself, but 
also the very significant, economically attractive phenomenon
of off premises processing.  It is essential 
to identify and provide for many legal aspects right
now, before systems and practices crystallize, in 
order to avoid the later impact of unanticipated physical
complications and expense.  The legal aspects 
of computerization in the banking business are especially
diverse.  In some states, there might be the 
basic question whether banks are authorized by law to
invest in the new facilities, either directly or 
through cooperatives.  More challenging are questions
relating to off-premises processors, particularly 
with respect to the obligation not to disclose information
concerning a bank's customers, the adequacy 
of fidelity bond coverage, the extent of liability for
improper refusal to pay a check, and susceptibility 
to regulation by government agencies.  Also pertinent
is the propriety of data processing by banks for 
nonbank entities and particularly of the rendering of
that service without charge for bank depositors.

CACM December, 1963

Freed, R. N.

CA631204 JB March 13, 1978  3:09 PM

670	5	670
670	5	670
670	5	670


************************

************************
Document:  CACM-1867.html
************************


On the Expected Lengths of Sequences Generated
in Sorting by Replacement Selecting

In the replacement-selecting technique of sorting,
one is <B>interested in</B> the ratio L(j) of the 
expected length of the j-th sequence generated by the
technique to the number of memory cells used.  
Using complex-variable theory, it is shown that L(j)
-> 2 and that, asymptotically, the average interval 
between sign changes of L(j)-2 is 2.6662.

CACM July, 1969

Hooker, W. W.

replacement selecting, sorting, sequence lengths,
asymptotic expected length, recursion relation, 
generating function, meromorphic function

3.74 5.31

CA690713 JB February 15, 1978  6:37 PM

1867	4	1867
2272	4	1867
1638	5	1867
1867	5	1867
1867	5	1867
1867	5	1867


************************



On the Expected Lengths of Sequences Generated
in Sorting by Replacement Selecting

In the replacement-selecting technique of sorting,
one is interested <B>in the</B> ratio L(j) of the 
expected length of the j-th sequence generated by the
technique to the number of memory cells used.  
Using complex-variable theory, it is shown that L(j)
-> 2 and that, asymptotically, the average interval 
between sign changes of L(j)-2 is 2.6662.

CACM July, 1969

Hooker, W. W.

replacement selecting, sorting, sequence lengths,
asymptotic expected length, recursion relation, 
generating function, meromorphic function

3.74 5.31

CA690713 JB February 15, 1978  6:37 PM

1867	4	1867
2272	4	1867
1638	5	1867
1867	5	1867
1867	5	1867
1867	5	1867


************************

************************
Document:  CACM-0616.html
************************


An Information Algebra - Phase I Report-Language
Structure Group of the CODASYL Development Committee

This report represents the results of the
first phase of the work of the Language Structure 
Group.  The goal of this work is to arrive at a proper
structure for a machine-independent problem-defining 
language, at the systems level of data processing.  The
report is based, for the most part, on a mathematical 
model called "An Information Algebra" developed primarily
by R. Bosak.  It is hoped that this report 
will be read (a) with avid interest by programming language
designers and implementors, and all those 
<B>interested in</B> developing a theoretical approach to data
processing; (b) with interest and understanding 
by professional programmers and systems analysts; and (c)
with appreciation by the businessman-analyst-manager. 
 The authors have not attempted an exhaustive discourse
in this report.  Rather, they have tried to present 
a philosophy to the professional people who are vitally
concerned with providing a working language for 
the systems analyst's use.  They trust that the ideas
in this report will stimulate others to think along 
similar lines.  Questions and comments will be welcomed,
and can be addressed to any of the members of 
the Language Structure Group:  Robert Bosak, System
Development Corporation;  Richard F. Clippinger, 
Honeywell EDP Division;  Carey Dobbs, Remington Rand
Univac Division;  Roy Goldfinger (Chairman), IBM 
Corporation;  Renee B. Jasper, Navy Management Office;
 William Keating, National Cash Register;  George 
Kendrick, General Electric Company;  Jean E. Sammet, IBM Corporation.

CACM April, 1962

CA620401 JB March 20, 1978  2:40 PM

1135	5	616
1136	5	616
2710	5	616
2765	5	616
2888	5	616
2906	5	616
493	5	616
616	5	616
616	5	616
616	5	616
729	5	616
1515	6	616
288	6	616
1936	6	616
1976	6	616
2046	6	616
2046	6	616
2046	6	616
2451	6	616
2452	6	616
2715	6	616
493	6	616
616	6	616
616	6	616
616	6	616
616	6	616
616	6	616
616	6	616
616	6	616
616	6	616
657	6	616


************************

************************
Document:  CACM-3132.html
************************


Experiments with Some Algorithms that Find
Central Solutions for Pattern Classification

In two-class pattern recognition, it is a standard
technique to have an algorithm finding hyperplanes
which separates the two classes in a linearly separable training
set.  The traditional methods find a hyperplane which separates all
points <B>in the</B> other, but such a hyperplane is not necessarily centered
in the empty space between the two classes.  Since a central
hyperplane does not favor one class or the other, it should have
a lower error rate in classifying new points and is therefore better
than a noncentral hyperplane.  Six algorithms for finding central
hyperplanes are tested on three data sets.  Although frequently
used practice, the modified relaxation algorithm is very poor. 
Three algorithms which are defined in the paper are found to be
quite good.

CACM March, 1979

Slagle, J.

Pattern recognition, pattern classification, linear discriminants, central
hyperplanes, centering, centrality criteria, dead zone, hyperplane,
linearly separable, relaxation algorithm, accelerated relaxation

3.62 3.63

CA790303 DH April 12, 1979  3:20 PM

3132	4	3132
2215	5	3132
3132	5	3132
3132	5	3132
3132	5	3132


************************

