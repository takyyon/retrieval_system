Snippets for the query:  Parallel processors and paging algorithms
************************
Total Hits:  26
************************

************************
Document:  CACM-2373.html
************************


Properties of the Working-Set Model

A program's working set W(t,T) at time t is
the set of distinct pages among the T most recently 
referenced pages.  Relations between the average working-set size,
the missing-page rate, and the interreference-interval 
distribution may be derived both from time-average definitions
and from ensemble-average (statistical) 
definitions. An efficient algorithm for estimating these
quantities is given.  The relation to LRU (least 
recently used) paging is characterized.  The independent-reference
model, in which page references are 
statistically independent, is used to assess the effects
to interpage dependencies on working-set size 
observations. Under general assumptions, working-set
size is shown to be normally distributed.

CACM March, 1972

Denning, P. J.
Schwartz, S. C.

working-set model, paging, <B>paging algorithms</B>,
program behavior, program modeling

4.3

CA720308 JB January 31, 1978  2:07 PM

1604	4	2373
1892	4	2373
1901	4	2373
1951	4	2373
2085	4	2373
2095	4	2373
2218	4	2373
2218	4	2373
2277	4	2373
2319	4	2373
2329	4	2373
2358	4	2373
2373	4	2373
2373	4	2373
2373	4	2373
2373	4	2373
2373	4	2373
2380	4	2373
2434	4	2373
2499	4	2373
2450	4	2373
2501	4	2373
2582	4	2373
2669	4	2373
2828	4	2373
2863	4	2373
2881	4	2373
2894	4	2373
2928	4	2373
2996	4	2373
3006	4	2373
3006	4	2373
3067	4	2373
3067	4	2373
1410	5	2373
1751	5	2373
1810	5	2373
1951	5	2373
2373	5	2373
2373	5	2373
2373	5	2373
2374	5	2373
2380	5	2373
2450	5	2373
2595	5	2373
2996	5	2373
3006	5	2373
3067	5	2373
1728	6	2373
1751	6	2373
1751	6	2373
1751	6	2373
1751	6	2373
1884	6	2373
1901	6	2373
2374	6	2373
2374	6	2373
2374	6	2373
2373	6	2373
2373	6	2373
2373	6	2373
2373	6	2373
2373	6	2373
2373	6	2373
2373	6	2373
2595	6	2373
2595	6	2373
2595	6	2373
2682	6	2373
2863	6	2373
2864	6	2373
3006	6	2373


************************

************************
Document:  CACM-2069.html
************************


Comments on a Paper by Wallace and Mason

CACM April, 1970

Heess Jr., W. F.

page-on-demand, dem<B>and paging</B>, time-sharing multiprogramming,
Markovian computer models, scheduling strategies,
operating systems, memory management

2.44 4.32 4.39 6.20 6.21

CA700415 JB February 13, 1978  2:36 PM

2069	5	2069
2069	5	2069
2069	5	2069


************************

************************
Document:  CACM-3153.html
************************


The Control of Response Times in Multi-Class
Systems by Memory Allocations 

The possibility of giving different quality of service to jobs of different
classes by regulating their memory allocation is examined in
the context of a paged computer system.  Two parameterized algorithms
which partition the main memory between two classes of jobs are
considered.  Initially, a closed system consisting of a process
or <B>and paging</B> and file devices, with fixed numbers of jobs, is studied
to determine optimal degrees of multiprogramming and the proportion
of processor time devoted to each class.  Applying a decomposition
approach and treating the closed system as a single server,
the response times in an open system with external arrivals are
studied.  The object is to investigate the effect of the memory
alocation parameters on the expected response times under the two algorithms.
Numerical solutions and economical lower bounds for the
expected response times as functions of the control parameters
are obtained.  A way of applying the results to systems with more
than two job classes is indicated.

CACM July, 1979

Hine, J.
Mitrani, I.
Tsur, S.

Queueing networks, paging, virtual memory, performance control

4.32 8.1

CA790704 DH August 22, 1979  3:32 PM

3016	4	3153
3070	4	3153
3153	4	3153
3153	4	3153
2741	5	3153
2891	5	3153
3153	5	3153
3153	5	3153
3153	5	3153


************************

************************
Document:  CACM-1924.html
************************


Organizing Matrices and Matrix Operations for Paged Memory Systems

Matrix representations and operations are examined
for the purpose of minimizing the page faulting 
occurring in a paged memory system.  It is shown that
carefully designed matrix algorithms can lead to 
enormous savings in the number of page faults occurring
when only a small part of the total matrix can 
be in main memory at one time.  Examination of addition,
multiplication, and inversion algorithms shows 
that a partitioned matrix representation (i.e. one submatrix
or partition per page) in most cases induced 
fewer page faults than a row-by-row representation.
 The number of page-pulls required by these matrix 
manipulation algorithms is also studied as a function
of the number of pages of main memory available 
to the algorithm.

CACM March, 1969

McKellar, A. C.
Coffman Jr., E. G.

matrix algorithms, array processing, <B>paging algorithms</B>,
paged memory systems, virtual memory systems, 
array storage allocation, storage allocation

4.12 4.39 5.14

CA690303 JB February 20, 1978  9:35 AM

1892	4	1924
1924	4	1924
2095	4	1924
2218	4	1924
2297	4	1924
2374	4	1924
2526	4	1924
2667	4	1924
2668	4	1924
2862	4	1924
2863	4	1924
1728	5	1924
1924	5	1924
1924	5	1924
1924	5	1924
2365	5	1924
2582	5	1924
3152	5	1924
987	6	1924
1751	6	1924
1754	6	1924
1924	6	1924
1924	6	1924
1924	6	1924
2017	6	1924
2130	6	1924
2362	6	1924
2365	6	1924


************************

************************
Document:  CACM-2022.html
************************


Note on an Anomaly in Paging

CACM July, 1970

Pomeranz,J. E.

paging machines, dem<B>and paging</B>, replacement algorithm

4.30

CA700715 JB February 10, 1978  4:17 PM

2022	4	2022
2085	4	2022
3006	4	2022
1884	5	2022
2022	5	2022
2022	5	2022
2022	5	2022


************************

************************
Document:  CACM-2297.html
************************


A Model of Memory Contention in a Paging Machine

This paper is concerned with certain aspects of contention
for main memory resources in a multiprogrammed 
computer system operating under dem<B>and paging</B>.  In
the model presented, the number of page-frames of 
main memory allocated to a problem program varies in
time.  These changes in memory configuration are 
represented explicitly in the model, CPU requirements and
page exception characteristics of program material 
being described statistically.  Expressions for the distribution
of the number of page-frames allocated 
to an executing program, the long run expected fraction
of a program's execution time in a given number 
of page-frames, and the average execution interval of the
multiprogrammed load are obtained.  It is pointed 
out heuristically and demonstrated numerically that
an increase is obtain able in the average execution 
interval of the multiprogrammed load over that resulting
from equal fixed partitioning of main memory.

CACM August, 1972

Oden, P. H.
Shedler, G. S.

paging machines, demand paging, operating systems
studies, queuing analysis, memory contention, 
memory management

4.32

CA720805 JB January 30, 1978  9:50 AM

1879	4	2297
1884	4	2297
1892	4	2297
1901	4	2297
1924	4	2297
2095	4	2297
2095	4	2297
2218	4	2297
2277	4	2297
2297	4	2297
2297	4	2297
2365	4	2297
2374	4	2297
2526	4	2297
2667	4	2297
2668	4	2297
2862	4	2297
2863	4	2297
1728	5	2297
1754	5	2297
2297	5	2297
2297	5	2297
2297	5	2297


************************

************************
Document:  CACM-2526.html
************************


Asymmetric Memory Hierarchies

 A study is presented of some of the system
implications of memory hierarchies in which the 
backing or secondary store has a very small read time,
relative of both the time required for writing 
and to the read time of conventional backing storage
devices. Several analytic models are introduced, 
and it is shown that such hierarchies may operate in
ways which differ from those of more conventional 
hierarchies.  In particular, it is shown that it may not
be necessary to multiprogram in such a situation. 
 In the past, backing storage devices have been roughly
symmetric with respect to their read and write 
times.  This situation may not continue, as several
devices are currently under development which may 
have a very small read-time/write-time ratio.  This study
places particular emphasis on one such system-the 
RCA read/write holographic optical memory.

CACM April, 1973

Williams, J.

asymmetric memory hierarchy, dem<B>and paging</B>, holographic
optical memory, memory device, memory hierarchy, 
paging, storage device, storage hierarchy, virtual memory

4.3 4.32 5.2 6.2 6.34

CA730402 JB January 24, 1978  10:15 AM

1892	4	2526
1924	4	2526
2095	4	2526
2218	4	2526
2297	4	2526
2374	4	2526
2526	4	2526
2667	4	2526
2668	4	2526
2862	4	2526
2863	4	2526
1728	5	2526
2526	5	2526
2526	5	2526
2526	5	2526


************************

************************
Document:  CACM-2016.html
************************


The Instrumentation of Multics

An array of measuring tools devised to aid in the implementation of a prototype
computer utility is discussed.  These tools include special hardware
clocks and data channels, general purpose programmed probing
and recording tools, and specialized measurement facilities.  Some
particular measurements of interest in a system which combines demand 
paging with multiprogramming are described in detail.  Where appropriate, 
insight into effectiveness (or lack there of) of individual tools is provided.

CACM August, 1970

Gintell, J. W.
Saltzer, J. H.

instrumentation, performance measurement,
multiprogramming systems, measuring tools, system analysis, Multics,
metering, event tracing, dem<B>and paging</B>, script driven
measurement

2.44 4.32 4.39 4.42

CA700805 JB February 10, 1978  3:43 PM

2016	5	2016
2016	5	2016
2016	5	2016
2193	5	2016
2319	5	2016
2894	5	2016
1408	6	2016
1719	6	2016
1749	6	2016
1751	6	2016
1951	6	2016
2016	6	2016
2016	6	2016
2016	6	2016
2017	6	2016
2080	6	2016
2188	6	2016
2203	6	2016
2204	6	2016
3186	6	2016


************************

************************
Document:  CACM-2667.html
************************


Execution Characteristics of Programs in a Page-on-Demand System

Data are presented which show the execution characteristics
of two types of commonly used programs 
in a large-scale, time-shared computer system.  A software
monitoring facility built into the supervisor 
was used for data collection during normal system operation.
 These data were analyzed, and results of 
this analysis are presented for a Fortran compiler
and an interactive line file editor.  Probability 
distribution functions and other data are given for
such things as CPU intervals, I/O intervals, and 
the number of such intervals during execution.  Empirical
distributions are compared with simple theoretical 
distributions (exponential, hyperexponential, and geometric).
 Other data show paging characteristics 
of tasks as a function of the number of pages those tasks have in core.

CACM April, 1974

Boyse, J. W.

program behavior, virtual memory, paging, dem<B>and paging</B>,
software monitor, program execution characteristics, 
compiler execution behavior, editor execution behavior

4.12 4.19 4.32 4.39 4.9 8.1

CA740403 JB January 18, 1978  10:12 AM

1533	4	2667
1892	4	2667
1924	4	2667
1951	4	2667
2095	4	2667
2218	4	2667
2297	4	2667
2374	4	2667
2526	4	2667
2667	4	2667
2667	4	2667
2667	4	2667
2668	4	2667
2668	4	2667
2668	4	2667
2862	4	2667
2863	4	2667
1604	5	2667
1728	5	2667
1827	5	2667
2667	5	2667
2667	5	2667
2667	5	2667


************************

************************
Document:  CACM-1810.html
************************


Is Automatic "Folding" of Programs Efficient Enough To Displace Manual?

The operation of "folding" a program into
the available memory is discussed.  Measurements 
by Brown et al. and by Nelson on an automatic folding
mechanism of simple design, a dem<B>and paging</B> unit 
built at the IBM Research Center by Belady, Nelson,
O'Neil, and others, permitting its quality to be 
compared with that of manual folding, are discussed,
and it is shown that given some care in use the 
unit performs satisfactorily under the conditions tested,
even though it is operating across a memory-to-storage 
interface with a very large speed difference.  The disadvantages
of prefolding, which is required when 
the folding is manual, are examined, and a number of
the important troubles which beset computing today 
are shown to arise from, or be aggravated by, this
source.  It is concluded that a folding mechanism 
will probably become a normal part of most computing systems.

CACM December, 1969

Sayre, D.

paging, automatic paging, demand paging, folding,
automatic folding, storage hierarchies, memory 
hierarchies, replacement algorithms, performance, measurement

4.0 4.19 4.39 6.20 6.34

CA691202 JB February 15, 1978  4:33 PM

1810	5	1810
1810	5	1810
1810	5	1810
2218	5	1810
2373	5	1810
1380	6	1810
1410	6	1810
1572	6	1810
1728	6	1810
1751	6	1810
1751	6	1810
1752	6	1810
1810	6	1810
1810	6	1810
1879	6	1810
1951	6	1810
2095	6	1810
2374	6	1810


************************

************************
Document:  CACM-1752.html
************************


Resource Management for a Medium Scale Time-Sharing Operating system

Task scheduling and resource balancing for
a medium size virtual memory paging machine are 
discussed in relation to a combined batch processing
and time-sharing environment.  A synopsis is given 
of the task scheduling and <B>paging algorithms</B> that were implemented,
and the results of comparative simulation 
are given by tracing the development of the algorithms
through six predecessor versions.  Throughout 
the discussion particular emphasis is placed on balancing
the system performance relative to the characteristics 
of all the system resources.  Simulation results relative
to alternate hardware characteristics and the 
effects of program mix and loading variations are also presented.

CACM May, 1968

Oppenheimer, G.
Weizer, N.

time-sharing, operating systems, resource management,
task scheduling, paging, system simulation, 
memory management, virtual memories

4.30 4.31 4.32

CA680504 JB February 23, 1978  9:39 AM

1751	5	1752
1752	5	1752
1752	5	1752
1752	5	1752
1892	5	1752
2128	5	1752
2218	5	1752
1380	6	1752
1526	6	1752
1572	6	1752
1572	6	1752
1728	6	1752
1728	6	1752
1751	6	1752
1751	6	1752
1752	6	1752
1752	6	1752
1752	6	1752
1752	6	1752
1810	6	1752
1879	6	1752
2095	6	1752


************************



Resource Management for a Medium Scale Time-Sharing Operating system

Task scheduling and resource balancing for
a medium size virtual memory paging machine are 
discussed in relation to a combined batch processing
and time-sharing environment.  A synopsis is given 
of the task scheduling <B>and paging</B> algorithms that were implemented,
and the results of comparative simulation 
are given by tracing the development of the algorithms
through six predecessor versions.  Throughout 
the discussion particular emphasis is placed on balancing
the system performance relative to the characteristics 
of all the system resources.  Simulation results relative
to alternate hardware characteristics and the 
effects of program mix and loading variations are also presented.

CACM May, 1968

Oppenheimer, G.
Weizer, N.

time-sharing, operating systems, resource management,
task scheduling, paging, system simulation, 
memory management, virtual memories

4.30 4.31 4.32

CA680504 JB February 23, 1978  9:39 AM

1751	5	1752
1752	5	1752
1752	5	1752
1752	5	1752
1892	5	1752
2128	5	1752
2218	5	1752
1380	6	1752
1526	6	1752
1572	6	1752
1572	6	1752
1728	6	1752
1728	6	1752
1751	6	1752
1751	6	1752
1752	6	1752
1752	6	1752
1752	6	1752
1752	6	1752
1810	6	1752
1879	6	1752
2095	6	1752


************************

************************
Document:  CACM-2863.html
************************


VMIN-An Optimal Variable-Space Page Replacement Algorithm

A criterion for comparing variable space page
replacement algorithms is presented.  An optimum 
page replacement algorithm, called VMIN, is described and
shown to be optimum with respect to this criterion. 
The results of simulating VMIN, Denning's working set,
and the page partitioning replacement algorithms 
on five virtual memory programs are presented to demonstrate
the improvement possible over the known 
realizable variable space algorithms.

CACM May, 1976

Prieve, B. G.
Fabry, R. S.

dem<B>and paging</B>, performance measurement, multilevel
memory systems, virtual memory, working set, 
page replacement algorithms, optimal page replacement

4.30 4.32

CA760508 JB January 4, 1978  3:06 PM

1892	4	2863
1892	4	2863
1901	4	2863
1924	4	2863
2085	4	2863
2095	4	2863
2095	4	2863
2218	4	2863
2218	4	2863
2277	4	2863
2297	4	2863
2319	4	2863
2329	4	2863
2358	4	2863
2373	4	2863
2374	4	2863
2374	4	2863
2380	4	2863
2434	4	2863
2499	4	2863
2481	4	2863
2501	4	2863
2526	4	2863
2582	4	2863
2667	4	2863
2668	4	2863
2669	4	2863
2669	4	2863
2828	4	2863
2862	4	2863
2863	4	2863
2863	4	2863
2863	4	2863
2863	4	2863
2881	4	2863
2928	4	2863
2996	4	2863
3006	4	2863
3016	4	2863
3052	4	2863
3067	4	2863
3067	4	2863
1728	5	2863
1751	5	2863
1901	5	2863
2863	5	2863
2863	5	2863
2863	5	2863
2863	5	2863
3067	5	2863
1728	6	2863
1751	6	2863
1751	6	2863
1901	6	2863
2374	6	2863
2373	6	2863
2595	6	2863
2682	6	2863
2863	6	2863
2863	6	2863
2864	6	2863
3006	6	2863


************************

************************
Document:  CACM-2277.html
************************


Demand Paging Through Utilization of Working Sets on the MANIAC II

A hardware implementation on the Maniac II computer
of the working set model for dem<B>and paging</B>, 
as introduced by Denning, is discussed.  Characteristics
of the Maniac II are given, along with a description 
of the basic demand paging scheme and the associate memory
which has been added to the Maniac II hardware. 
 Finally, a description of the hardware design for implementation
of the working set model is discussed 
and a specification of the actions taken under various
conditions which may arise during the operation 
of the full working set model, demand paging system is given.

CACM October, 1972

Morris, J. B.

demand paging, dynamic storage allocation, Maniac
II, memory allocation, one-level store, paging, 
paging associative memory, storage allocation,
thrashing, virtual memory, working set model

4.30 6.21

CA721001 JB January 27, 1978  4:06 PM

1879	4	2277
1884	4	2277
1892	4	2277
1901	4	2277
1901	4	2277
2085	4	2277
2095	4	2277
2095	4	2277
2218	4	2277
2277	4	2277
2277	4	2277
2297	4	2277
2319	4	2277
2329	4	2277
2358	4	2277
2365	4	2277
2373	4	2277
2380	4	2277
2434	4	2277
2499	4	2277
2501	4	2277
2582	4	2277
2669	4	2277
2828	4	2277
2863	4	2277
2881	4	2277
2928	4	2277
2996	4	2277
3006	4	2277
3067	4	2277
1751	5	2277
1754	5	2277
2277	5	2277
2277	5	2277
2277	5	2277
2928	5	2277
3127	5	2277
1751	6	2277
2080	6	2277
2277	6	2277
2277	6	2277
2380	6	2277
2522	6	2277
2569	6	2277


************************

************************
Document:  CACM-2128.html
************************


A Processor Allocation Method for Time-Sharing

A scheduling algorithm is proposed which is intended to minimize changes of 
tasks on <B>processors and</B> thereby reduce over-head.  The algorithm also has
application to more general resource allocation problems.  It is implemented 
by means of a method for efficiently handling dynamically changing segmented 
lists.

CACM January, 1970

Mullery, A. P.
Driscoll, G. C.

time sharing, resource allocation, scheduling algorithms,
monitors, dynamic allocation, processor
allocation, multiprogramming, multiprocessing, time
slicing, scheduling, conversational systems, 
interactive systems 

3.80 4.30 4.31 4.32 6.33

CA700103 JB February 14, 1978  2:15 PM

1751	4	2128
1892	4	2128
2128	4	2128
2218	4	2128
1752	5	2128
2128	5	2128
2128	5	2128
2128	5	2128


************************

************************
Document:  CACM-1884.html
************************


An Anomaly in Space-Time Characteristics of
Certain Programs Running in a Paging Machine

The running time of programs in a paging machine
generally increases as the store in which 
programs are constrained to run decreases.  Experiments,
however, have revealed cases in which the reverse 
is true: a decrease in the size of the store is accompanied
by a decrease in running time.  An informal 
discussion of the anomalous behavior is given, and for
the case of the FIFO replacement algorithm a formal 
treatment is presented.

CACM June, 1969

Belady, L. A.
Nelson, R. A.
Shedler, G. S.

paging machines, dem<B>and paging</B>, replacement algorithm

4.30

CA690609 JB February 17, 1978  9:59 AM

1879	4	1884
1884	4	1884
1901	4	1884
2095	4	1884
2277	4	1884
2297	4	1884
2365	4	1884
1754	5	1884
1884	5	1884
1884	5	1884
1884	5	1884
2022	5	1884
2085	5	1884
3006	5	1884
1751	6	1884
1751	6	1884
1884	6	1884
1884	6	1884
1884	6	1884
2374	6	1884
2373	6	1884
2595	6	1884


************************

************************
Document:  CACM-1964.html
************************


Comment on the Working Set Model for Program Behavior

CACM November, 1970

Bernstein, A.

dem<B>and paging</B>, working set, paging rate, multiprogramming

4.30 4.32

CA701115 JB February 9, 1978  4:23 PM

1964	5	1964
1964	5	1964
1964	5	1964


************************

************************
Document:  CACM-2579.html
************************


Register Allocation Via Usage Counts

This paper introduces the notion of usage counts,
shows how usage counts can be developed by 
algorithms that eliminate redundant computations, and
describes how usage counts can provide the basis 
for register allocation.  The paper compares register
allocation based on usage counts to other commonly 
used register allocation techniques, and presents evidence
which shows that the usage count technique 
is significantly better than these other techniques.

CACM November, 1974

Freiburghouse, R. A.

optimization, redundant computations, common subexpressions,
register allocation, compilers, programming 
languages, virtual memory, dem<B>and paging</B>

4.12 4.2 4.39

CA741105 JB January 16, 1978  10:24 AM

1781	4	2579
1807	4	2579
2034	4	2579
2290	4	2579
2579	4	2579
2579	4	2579
2579	4	2579
2923	4	2579
2923	4	2579
2945	4	2579
1535	5	2579
1807	5	2579
1947	5	2579
2579	5	2579
2579	5	2579
2579	5	2579


************************

************************
Document:  CACM-2450.html
************************


Empirical Working Set Behavior

The working set model for program behavior
has been proposed in recent years as a basis for 
the design of scheduling <B>and paging</B> algorithms.  Although
the words "working set" are now commonly encountered 
in the literature dealing with resource allocation, there
is a dearth of published data on program measurements, 
in the hope that workers in the field might find experimental
evidence upon which to substantiate and 
base theoretical work.

CACM September, 1973

Rodriguez-Rosell, J.

virtual memory, paging, working set,
software measurement, program behavior

4.3

CA730905 JB January 23, 1978  9:22 AM

2373	4	2450
2374	4	2450
2380	4	2450
2450	4	2450
2450	4	2450
2595	4	2450
2996	4	2450
3006	4	2450
3006	4	2450
3067	4	2450
3067	4	2450
2373	5	2450
2374	5	2450
2450	5	2450
2450	5	2450
2450	5	2450


************************



Empirical Working Set Behavior

The working set model for program behavior
has been proposed in recent years as a basis for 
the design of scheduling and <B>paging algorithms</B>.  Although
the words "working set" are now commonly encountered 
in the literature dealing with resource allocation, there
is a dearth of published data on program measurements, 
in the hope that workers in the field might find experimental
evidence upon which to substantiate and 
base theoretical work.

CACM September, 1973

Rodriguez-Rosell, J.

virtual memory, paging, working set,
software measurement, program behavior

4.3

CA730905 JB January 23, 1978  9:22 AM

2373	4	2450
2374	4	2450
2380	4	2450
2450	4	2450
2450	4	2450
2595	4	2450
2996	4	2450
3006	4	2450
3006	4	2450
3067	4	2450
3067	4	2450
2373	5	2450
2374	5	2450
2450	5	2450
2450	5	2450
2450	5	2450


************************

************************
Document:  CACM-2668.html
************************


Computation of Page Fault Probability from Program Transition Diagram

An algorithm is given for calculating page fault
probability in a virtual memory system operating 
under dem<B>and paging</B> with various memory sizes and replacement
rules.  A first order Markov model of program 
behavior is assumed, and a representation of the system
based on memory states, control states, and memory 
substates is presented.  The algorithm is general in
the sense that the page fault probabilities can 
be calculated for nonpredictive replacement rules applied
to any program represented by a one-step Markov 
chain.  A detailed example is given to illustrate the
algorithm for Random and Least Recently Used (LRU) 
replacement rules.

CACM April, 1974

Franklin, M. A.
Gupta, R. K.

virtual memory, demand paging, replacement rule,
program model, program behavior, Markov model, 
page fault, page fault probability

4.30 6.20

CA740402 JB January 18, 1978  10:31 AM

1533	4	2668
1892	4	2668
1924	4	2668
1951	4	2668
2095	4	2668
2218	4	2668
2297	4	2668
2374	4	2668
2526	4	2668
2667	4	2668
2667	4	2668
2667	4	2668
2668	4	2668
2668	4	2668
2668	4	2668
2668	4	2668
2668	4	2668
2862	4	2668
2863	4	2668
1604	5	2668
1728	5	2668
1761	5	2668
1827	5	2668
2668	5	2668
2668	5	2668
2668	5	2668
2677	5	2668


************************

************************
Document:  CACM-2497.html
************************


Synchronizing Processors with Memory-Content-Generated Interrupts

Implementations of the "Lock-Unlock" method
of synchronizing processors in a multiprocessor 
system usually require uninterruptable, memory-pause type instructions.
 An interlock scheme called read-interlock, 
which does not require memory-pause instructions, has
been developed for a dual DEC PDP-10 system with 
real-time requirements.  The read-interlock method does
require a special"read-interlock" instruction 
in the repertoire of the <B>processors and</B> a special "read-interlock"
cycle in the repertoire of the memory 
modules.  When a processor examines a "lock" (a memory
location) with a read-interlock instruction, it 
will be interrupted if the lock was already set; examining
a lock immediately sets it if it was not already 
set (this event sequence is a read-interlock cycle). 
Writing into a lock clears it.  Having the processor 
interrupted upon encountering a set lock instead of
branching is advantageous if the branch would have 
resulted in an effective interrupt.

CACM June, 1973

Hill, J. C.

interrupts,supervisors, monitors, debugging, parallel
processing, associative memories, microprogramming

4.32 6.29

CA730603 JB January 23, 1978  3:29 PM

1458	4	2497
1523	4	2497
1603	4	2497
1698	4	2497
1747	4	2497
1748	4	2497
1854	4	2497
1877	4	2497
1960	4	2497
2377	4	2497
2378	4	2497
2497	4	2497
2497	4	2497
2534	4	2497
2558	4	2497
2625	4	2497
2632	4	2497
2840	4	2497
2941	4	2497
3105	4	2497
3144	4	2497
1471	5	2497
2182	5	2497
2497	5	2497
2497	5	2497
2497	5	2497


************************

************************
Document:  CACM-2085.html
************************


Comment on a Paging Anomaly

CACM March, 1970

Dempster, J. R. H.

paging machines, dem<B>and paging</B>, replacement algorithm

4.30

CA700313 JB February 13, 1978  3:39 PM

1892	4	2085
1901	4	2085
2022	4	2085
2085	4	2085
2085	4	2085
2095	4	2085
2218	4	2085
2277	4	2085
2319	4	2085
2329	4	2085
2358	4	2085
2373	4	2085
2380	4	2085
2434	4	2085
2499	4	2085
2501	4	2085
2582	4	2085
2669	4	2085
2828	4	2085
2863	4	2085
2881	4	2085
2928	4	2085
2996	4	2085
3006	4	2085
3006	4	2085
3067	4	2085
1751	5	2085
1884	5	2085
2085	5	2085
2085	5	2085
2085	5	2085


************************

************************
Document:  CACM-3006.html
************************


Anomalies with Variable Partition Paging Algorithms

Five types of anomalous behavior which may
occur in paged virtual memory operating systems 
a redefined.  One type of anomaly, for example, concerns
the fact that, with certain reference strings 
<B>and paging</B> algorithms, an increase in mean memory allocation
may result in an increase in fault rate. 
 Two paging algorithms, are examined in terms of their
anomaly potential, and reference string examples 
of various anomalies are presented.  Two paging algorithm
properties, the inclusion property and the 
generalized inclusion property, are discussed and the
anomaly implications of these properties presented.

CACM March, 1978

Franklin, M.
Graham, G.
Gupta, R.

anomaly, memory management, program behavior, stack
algorithms, virtual memory, working set, page 
fault frequency, paging algorithms

4.32 4.35 4.6 8.1

CA780307 JB March 28,1978  1:01 PM

1892	4	3006
1901	4	3006
2022	4	3006
2085	4	3006
2085	4	3006
2095	4	3006
2218	4	3006
2277	4	3006
2319	4	3006
2329	4	3006
2358	4	3006
2373	4	3006
2373	4	3006
2374	4	3006
2380	4	3006
2380	4	3006
2434	4	3006
2499	4	3006
2450	4	3006
2450	4	3006
2501	4	3006
2582	4	3006
2595	4	3006
2669	4	3006
2828	4	3006
2863	4	3006
2881	4	3006
2928	4	3006
2996	4	3006
2996	4	3006
2996	4	3006
3006	4	3006
3006	4	3006
3006	4	3006
3006	4	3006
3006	4	3006
3067	4	3006
3067	4	3006
3067	4	3006
3067	4	3006
1751	5	3006
1884	5	3006
2373	5	3006
2374	5	3006
2595	5	3006
3006	5	3006
3006	5	3006
3006	5	3006
3067	5	3006
1751	6	3006
2374	6	3006
2373	6	3006
2595	6	3006
2682	6	3006
2863	6	3006
2864	6	3006
3006	6	3006


************************



Anomalies with Variable Partition Paging Algorithms

Five types of anomalous behavior which may
occur in paged virtual memory operating systems 
a redefined.  One type of anomaly, for example, concerns
the fact that, with certain reference strings 
and <B>paging algorithms</B>, an increase in mean memory allocation
may result in an increase in fault rate. 
 Two paging algorithms, are examined in terms of their
anomaly potential, and reference string examples 
of various anomalies are presented.  Two paging algorithm
properties, the inclusion property and the 
generalized inclusion property, are discussed and the
anomaly implications of these properties presented.

CACM March, 1978

Franklin, M.
Graham, G.
Gupta, R.

anomaly, memory management, program behavior, stack
algorithms, virtual memory, working set, page 
fault frequency, paging algorithms

4.32 4.35 4.6 8.1

CA780307 JB March 28,1978  1:01 PM

1892	4	3006
1901	4	3006
2022	4	3006
2085	4	3006
2085	4	3006
2095	4	3006
2218	4	3006
2277	4	3006
2319	4	3006
2329	4	3006
2358	4	3006
2373	4	3006
2373	4	3006
2374	4	3006
2380	4	3006
2380	4	3006
2434	4	3006
2499	4	3006
2450	4	3006
2450	4	3006
2501	4	3006
2582	4	3006
2595	4	3006
2669	4	3006
2828	4	3006
2863	4	3006
2881	4	3006
2928	4	3006
2996	4	3006
2996	4	3006
2996	4	3006
3006	4	3006
3006	4	3006
3006	4	3006
3006	4	3006
3006	4	3006
3067	4	3006
3067	4	3006
3067	4	3006
3067	4	3006
1751	5	3006
1884	5	3006
2373	5	3006
2374	5	3006
2595	5	3006
3006	5	3006
3006	5	3006
3006	5	3006
3067	5	3006
1751	6	3006
2374	6	3006
2373	6	3006
2595	6	3006
2682	6	3006
2863	6	3006
2864	6	3006
3006	6	3006


************************

************************
Document:  CACM-2669.html
************************


A Simple Linear Model of Demand Paging Performance

Predicting the performance of a proposed automatically
managed multilevel memory system requires 
a model of the patterns by which programs refer to the
information stored in the memory.  Some recent 
experimental measurements on the Multics virtual memory
suggest that, for rough approximations, a remarkably 
simple program reference model will suffice.  The simple
model combines the effect of the information 
reference pattern with the effect of the automatic management
algorithm to produce a single, composite 
statement: the mean number of memory references between
paging exceptions increases linearly with the 
size of the paging memory.  The resulting model is easy
to manipulate, and is applicable to such diverse 
problems as choosing an optimum size for a paging memory,
arranging for reproducible memory usage charges, 
and estimating the amount of core memory sharing.

CACM April, 1974

Saltzer, J. H.

paging, dem<B>and paging</B>, memory models, program models,
performance measurement, multilevel memory 
systems, virtual memory, associative memory, memory usage accounting, Multics

3.79 4.30 4.32

CA740401 JB January 18, 1978  10:41 AM

1892	4	2669
1901	4	2669
2085	4	2669
2095	4	2669
2218	4	2669
2277	4	2669
2319	4	2669
2319	4	2669
2329	4	2669
2358	4	2669
2377	4	2669
2373	4	2669
2374	4	2669
2380	4	2669
2434	4	2669
2499	4	2669
2481	4	2669
2501	4	2669
2582	4	2669
2582	4	2669
2625	4	2669
2626	4	2669
2669	4	2669
2669	4	2669
2669	4	2669
2669	4	2669
2828	4	2669
2863	4	2669
2863	4	2669
2881	4	2669
2928	4	2669
2996	4	2669
3006	4	2669
3016	4	2669
3052	4	2669
3054	4	2669
3067	4	2669
1751	5	2669
1901	5	2669
2017	5	2669
2358	5	2669
2669	5	2669
2669	5	2669
2669	5	2669


************************

