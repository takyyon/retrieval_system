Snippets for the query:  I am interested in distributed algorithms - concurrent programs in which processes communicate and synchronize by using message passing. Areas of particular interest include fault-tolerance and techniques for understanding the correctness of these algorithms.
************************
Total Hits:  58
************************

************************
Document:  CACM-2913.html
************************


The Aliasing Problem in Computer-Generated Shaded Images

Certain defects, such as jagged edges and
disappearing detail, have long been an annoyance 
in digitally generated shaded images.  Although increasing
the resolution or defocusing the display can 
attenuate them, an understanding <B>of these</B> defects leads
to more effective methods.  This paper explains 
the observed defects in terms of the aliasing phenomenon
inherent in sampled signals and discusses prefiltering 
as a recognized cure.  A method for evaluating filters
is presented, the application of prefiltering 
to hidden-surface algorithms is discussed, and an implementation
of a filtering tiler is shown accompanied 
by examples of its effectiveness.

CACM November, 1977

Crow, F. C.

aliasing, computer graphics, convolutional
filtering, hidden-surface removal, sampling

8.2

CA771103 JB December 27, 1977  7:56 AM

2816	4	2913
2828	4	2913
2827	4	2913
2913	4	2913
3047	4	2913
2751	5	2913
2913	5	2913
2913	5	2913
2913	5	2913


************************

************************
Document:  CACM-3014.html
************************


Is "Sometime" Sometimes Better than "Always"? (Intermittent
Assertions in Proving Program Correctness)

This paper explores a technique for proving the
correctness and termination of programs simultaneously. 
 This approach, the intermittent-assertion method, involves
documenting the program with assertions that 
must be true at some time when control passes through
the corresponding point, but that need not be true 
every time.  The method, introduced by Burstall, promises
to provide a valuable complement to the more 
conventional methods.  The intermittent-assertion method
is presented with a number of examples of correctness 
and termination proofs.  Some <B>of these</B> proofs are markedly
simpler than their conventional counterparts. 
 On the other hand, it is shown that a proof of correctness
or termination by any of the conventional 
techniques can be rephrased directly as a proof using
intermittent assertions.  Finally, it is shown 
how the intermittent-assertion method can be applied
to prove the validity of program transformations 
and the correctness of continuously operating programs.

CACM February, 1978

Manna, Z.
Waldinger, R.

intermittent assertions, correctness of programs,
termination of programs, program verification, 
program transformation, continuously operating programs.

5.24

CA780209 JB March 28, 1978  2:04 PM

2021	4	3014
2222	4	3014
2227	4	3014
2315	4	3014
2326	4	3014
2470	4	3014
2732	4	3014
2865	4	3014
2896	4	3014
2943	4	3014
3014	4	3014
3014	4	3014
3068	4	3014
3077	4	3014
3143	4	3014
1834	5	3014
2981	5	3014
3014	5	3014
3014	5	3014
3014	5	3014
3157	5	3014
3014	6	3014


************************



Is "Sometime" Sometimes Better than "Always"? (Intermittent
Assertions in Proving Program Correctness)

This paper explores a technique for proving the
correctness and termination of programs simultaneously. 
 This approach, the intermittent-assertion method, involves
documenting the program with assertions that 
must be true at some time when control passes through
the corresponding point, but that need not be true 
every time.  The method, introduced by Burstall, promises
to provide a valuable complement to the more 
conventional methods.  The intermittent-assertion method
is presented with a number of examples of correctness 
and termination proofs.  Some of these proofs are markedly
simpler than their conventional counterparts. 
 On the other hand, it is shown that a proof of correctness
or termination by any of the conventional 
techniques can be rephrased directly as a proof using
intermittent assertions.  Finally, it is shown 
how the intermittent-assertion method can be applied
to prove the validity of program transformations 
and the <B>correctness of</B> continuously operating programs.

CACM February, 1978

Manna, Z.
Waldinger, R.

intermittent assertions, correctness of programs,
termination of programs, program verification, 
program transformation, continuously operating programs.

5.24

CA780209 JB March 28, 1978  2:04 PM

2021	4	3014
2222	4	3014
2227	4	3014
2315	4	3014
2326	4	3014
2470	4	3014
2732	4	3014
2865	4	3014
2896	4	3014
2943	4	3014
3014	4	3014
3014	4	3014
3068	4	3014
3077	4	3014
3143	4	3014
1834	5	3014
2981	5	3014
3014	5	3014
3014	5	3014
3014	5	3014
3157	5	3014
3014	6	3014


************************



Is "Sometime" Sometimes Better than "Always"? (Intermittent
Assertions in Proving Program Correctness)

This paper explores a technique for proving the
correctness and termination of programs simultaneously. 
 This approach, the intermittent-assertion method, involves
documenting the program with assertions that 
must be true at some time when control passes through
the corresponding point, but that need not be true 
every time.  The method, introduced by Burstall, promises
to provide a valuable complement to the more 
conventional methods.  The intermittent-assertion method
is presented with a number of examples of correctness 
and termination proofs.  Some of these proofs are markedly
simpler than their conventional counterparts. 
 On the other hand, it is shown that a proof of correctness
or termination by any of the conventional 
techniques can be rephrased directly as a proof using
intermittent assertions.  Finally, it is shown 
how the intermittent-assertion method can be applied
to prove the validity of program transformations 
and <B>the correctness</B> of continuously operating programs.

CACM February, 1978

Manna, Z.
Waldinger, R.

intermittent assertions, correctness of programs,
termination of programs, program verification, 
program transformation, continuously operating programs.

5.24

CA780209 JB March 28, 1978  2:04 PM

2021	4	3014
2222	4	3014
2227	4	3014
2315	4	3014
2326	4	3014
2470	4	3014
2732	4	3014
2865	4	3014
2896	4	3014
2943	4	3014
3014	4	3014
3014	4	3014
3068	4	3014
3077	4	3014
3143	4	3014
1834	5	3014
2981	5	3014
3014	5	3014
3014	5	3014
3014	5	3014
3157	5	3014
3014	6	3014


************************

************************
Document:  CACM-1623.html
************************


An Application of FORMAC

A nonlinear circuit analysis problem is stated
and the way in which it was solved using FORMAC 
is indicated.  The solution of the problem using FORMAC
was notable since several other methods that 
were tried failed.  The problem is straightforward (although
untenable by hand) but nevertheless involved 
an elaborate use of the FORMAC language.  The program
was fairly large and utilized practically every 
command.  In particular, it made extensive use of the
PART command.  Several tricks were necessary in 
order to circumvent some of the shortcomings of the
FORMAC system.  This paper is more concerned with 
the use of programming techniques in FORMAC than with
the actual engineering problem, although readers 
may be <B>interested in</B> the problem because it is stated
in a general (mathematical) sense and could be 
of interest in areas other than circuit analysis.

CACM March, 1967

Neidleman, L. D.

CA670306 JB February 28, 1978  1:27 PM

1623	5	1623
1623	5	1623
1623	5	1623


************************



An Application of FORMAC

A nonlinear circuit analysis problem is stated
and the way <B>in which</B> it was solved using FORMAC 
is indicated.  The solution of the problem using FORMAC
was notable since several other methods that 
were tried failed.  The problem is straightforward (although
untenable by hand) but nevertheless involved 
an elaborate use of the FORMAC language.  The program
was fairly large and utilized practically every 
command.  In particular, it made extensive use of the
PART command.  Several tricks were necessary in 
order to circumvent some of the shortcomings of the
FORMAC system.  This paper is more concerned with 
the use of programming techniques in FORMAC than with
the actual engineering problem, although readers 
may be interested in the problem because it is stated
in a general (mathematical) sense and could be 
of interest in areas other than circuit analysis.

CACM March, 1967

Neidleman, L. D.

CA670306 JB February 28, 1978  1:27 PM

1623	5	1623
1623	5	1623
1623	5	1623


************************

************************
Document:  CACM-3141.html
************************


An Improved Algorithm for Decentralized Extrema-Finding
in Circular Configurations of Processes

This note presents an improvement to LeLann's
algorithm for finding the largest (or smallest) of a set of uniquely
numbered processes arranged in a circle, <B>in which</B> no central
controller exists and the number of processes is not known a priori.
This decentralized algorithm uses a technique of selective
message extinction in order to achieve an average number of
message passes of order (n log n) rather than O(n2).  

CACM May, 1979

Chang, E.
Roberts, R.

Decentralized algorithms, distributed systems, operating systems

4.32 4.35 5.25 5.32

CA790502 DH June 5, 1979  2:35 PM

3141	5	3141
3141	5	3141
3141	5	3141


************************

************************
Document:  CACM-2912.html
************************


Concurrent Reading and Writing

The problem of sharing data among asynchronous
process is considered.  It is assumed that only 
one process at a time can modify the data, but concurrent
reading and writing is permitted.  Two general 
theorems are proved, and some algorithms are presented
to illustrate their use.  These include a solution 
to the general problem in which a read is repeated if
it might have obtained an incorrect result, and 
two <B>techniques for</B> transmitting messages between processes.
 These solutions do not assume any synchronizing 
mechanism other than data which can be written
by one process and read by other processes.

CACM November, 1977

Lamport, L.

asynchronous multiprocessing, multiprocess synchronization,
readers/writers problem, shared data

4.32 5.24

CA771104 JB December 27, 1977  7:47 AM

2320	4	2912
2597	4	2912
2777	4	2912
2851	4	2912
2895	4	2912
2912	4	2912
2946	4	2912
3128	4	2912
2150	5	2912
2912	5	2912
2912	5	2912
2912	5	2912
3128	5	2912
2150	6	2912
2376	6	2912
2436	6	2912
2597	6	2912
2865	6	2912
2866	6	2912
2870	6	2912
2912	6	2912
3082	6	2912


************************



Concurrent Reading and Writing

The problem of sharing data among asynchronous
process is considered.  It is assumed that only 
one process at a time can modify the data, but concurrent
reading and writing is permitted.  Two general 
theorems are proved, and some algorithms are presented
to illustrate their use.  These include a solution 
to the general problem <B>in which</B> a read is repeated if
it might have obtained an incorrect result, and 
two techniques for transmitting messages between processes.
 These solutions do not assume any synchronizing 
mechanism other than data which can be written
by one process and read by other processes.

CACM November, 1977

Lamport, L.

asynchronous multiprocessing, multiprocess synchronization,
readers/writers problem, shared data

4.32 5.24

CA771104 JB December 27, 1977  7:47 AM

2320	4	2912
2597	4	2912
2777	4	2912
2851	4	2912
2895	4	2912
2912	4	2912
2946	4	2912
3128	4	2912
2150	5	2912
2912	5	2912
2912	5	2912
2912	5	2912
3128	5	2912
2150	6	2912
2376	6	2912
2436	6	2912
2597	6	2912
2865	6	2912
2866	6	2912
2870	6	2912
2912	6	2912
3082	6	2912


************************

************************
Document:  CACM-2344.html
************************


On the Optimization of Performance of Time-Sharing Systems by Simulation

A simulation model of a time-sharing system
with a finite noncontiguous store and an infinite 
auxiliary store is used to study the variation of system
parameters such as store size, number of jobs 
allowed to execute simultaneously, job-scheduling algorithm,
etc.  The effects of these variations on 
a measure of system performance is used to ascerta<B>in which</B>
of the parameters controllable by the job-scheduling 
algorithm, including the scheduling itself, require optimization,
and which of the parameters not normally 
controllable by the scheduling algorithm have a marked
effect on system performance.  System performance 
is based upon the mean cost of delay to all jobs processed.
 It is shown that significant improvements 
in the measure of system performance can be obtained by
using variable time-slice techniques and by selecting 
the optimum round-robin cycle time.  It appears that these
features would benefit from optimization whereas 
other parameters controllable by the scheduling algorithm
affect system performance in a predictable 
manner and would not benefit from optimization.  Features
not normally under the control of the scheduling 
algorithm can also have a marked effect on the measure
of performance; in particular, supervisor overheads, 
the size of the store, and the speed of the CPU.  A comparison
is made between the results of the simulation 
model and two analytical equations for quantum-oriented
nonpreemptive time-sharing systems.  The comparison 
is found to be very favorable.

CACM June, 1972

Blatny, J.
Clark, S. R.
Rourke, T. A.

time-sharing, simulation studies, optimization,
measure of performance, scheduling algorithms

3.80 4.30 4.32

CA720601 JB January 31, 1978  9:19 AM

2219	4	2344
2344	4	2344
1938	5	2344
2344	5	2344
2344	5	2344
2344	5	2344


************************



On the Optimization of Performance of Time-Sharing Systems by Simulation

A simulation model of a time-sharing system
with a finite noncontiguous store and an infinite 
auxiliary store is used to study the variation of system
parameters such as store size, number of jobs 
allowed to execute simultaneously, job-scheduling algorithm,
etc.  The effects <B>of these</B> variations on 
a measure of system performance is used to ascertain which
of the parameters controllable by the job-scheduling 
algorithm, including the scheduling itself, require optimization,
and which of the parameters not normally 
controllable by the scheduling algorithm have a marked
effect on system performance.  System performance 
is based upon the mean cost of delay to all jobs processed.
 It is shown that significant improvements 
in the measure of system performance can be obtained by
using variable time-slice techniques and by selecting 
the optimum round-robin cycle time.  It appears that these
features would benefit from optimization whereas 
other parameters controllable by the scheduling algorithm
affect system performance in a predictable 
manner and would not benefit from optimization.  Features
not normally under the control of the scheduling 
algorithm can also have a marked effect on the measure
of performance; in particular, supervisor overheads, 
the size of the store, and the speed of the CPU.  A comparison
is made between the results of the simulation 
model and two analytical equations for quantum-oriented
nonpreemptive time-sharing systems.  The comparison 
is found to be very favorable.

CACM June, 1972

Blatny, J.
Clark, S. R.
Rourke, T. A.

time-sharing, simulation studies, optimization,
measure of performance, scheduling algorithms

3.80 4.30 4.32

CA720601 JB January 31, 1978  9:19 AM

2219	4	2344
2344	4	2344
1938	5	2344
2344	5	2344
2344	5	2344
2344	5	2344


************************

************************
Document:  CACM-2979.html
************************


Studies in Machine Cognition Using The Game of Poker

A progress report is presented of on-going
research efforts concerning human decision making 
under uncertainly and risk and human problem solving
and learning processes on the one hand, and machine 
learning, large scale programming systems, and novel
programming techniques on the other.  There has 
also been in terest in how humans make deductive and inductive
inferences and form and optimize heuristic 
rules, and how machines can reach similar results.
 Although the vehicle <B>of these</B> investigations has 
been the game of poker, a conceptual framework has been
provided that should have a fairly wide range 
of applicability.  The models of human judgment, choice,
and decision making are incorporated in a large 
scale complex program.  They represent both descriptive
and normative theories of behavior. An in teractive 
game environment has been recently established which,
besides its usefulness for experiments in game 
playing, enables humans to construct machine strategies
"on-line" in a question answering, advice taking 
mode.

CACM April, 1977

Findler, N. V.

machine learning, game playing programs, decision
making under uncertain ty and risk, automatic 
forming and optimizing of heuristic rules, automatic
inductive and deductive inference making, models 
of game learning, poker, gambling and bluffing

3.36 3.62 3.61 3.64 3.65 3.66

CA770403 JB December 29, 1977  5:34 AM

2979	5	2979
2979	5	2979
2979	5	2979


************************

************************
Document:  CACM-2208.html
************************


Storage Utilization in a Memory Hierarchy When Storage
Assignment Is Performed by a Hashing Algorithm

The utilization of storage is studied in a two-level
memory hierarchy.  The first storage level, 
which is the fast store, is divided into a number of
storage areas.  When an entry is to be filed in 
the hierarchy, a hashing algorithm will attempt to
place the entry into one <B>of these</B> areas.  If this 
particular area is full, then the entry will be placed
into the slower second-level store, even though 
other areas in the first-level store may have space
available.  Given the N entries have been filed in 
the entire hierarchy, an expression is derived for the
expected number of entries filed in the first-level 
storehis expression gives a measure of how effectively
the first-level store is being used.  By means 
of examples, storage utilization is then studied as a
function of the hashing algorithm, the number of 
storage areas into which the first-level store is divided
and the total size of the first-level store. 

CACM March, 1971

Williams, J. G.

hashing algorithms, memory allocation, memory hierarchy,
memory utilization, storage allocation, 
storage hierarchy, storage utilization

3.74 4.3

CA710304 JB February 3, 1978  4:37 PM

2208	5	2208
2208	5	2208
2208	5	2208


************************

************************
Document:  CACM-2033.html
************************


Space/Time Trade-offs in Hash Coding with Allowable Errors

In this paper trade-offs among certain computational factors
a given set of messages.  Two new hash-coding methods are examined
and compared with a particular conventional hash-coding method.
The computational factors considered are the size of the hash area
(space), the time required to identify a message as a nonmember of the 
given set (reject time), and an allowable error frequency.  The new methods 
are intended to reduce the amount of space required to contain the hash-coded 
information from that associated with conventional methods.  The reduction in 
space is accomplished by exploiting the possibility that a small fraction of 
errors of commission may be tolerable in some applications, in particular, 
applications <B>in which</B> a large amount of data is involved and a core resident
hash area is consequently not feasible using conventional methods.  In such 
applications, it is envisaged that overall performance
could be improved by using a smaller core resident hash area in
conjunction with the new methods and, when necessary, by using some
secondary and perhaps time-consuming test to "catch" the small
fraction of errors associated with new methods.  An example is discussed
which illustrates possible areas of application for the new
methods.  Analysis of the paradigm problem demonstrates that allowing
a small number of test messages to be falsely identified as
members of the given set will permit a much smaller hash
area to be used without increasing reject time.

CACM July, 1970

Bloom, B. H.

hash coding, hash addressing, scatter storage, searching, storage
layout, retrieval trade-offs, retrieval efficiency, storage efficiency

3.73 3.74 3.79

CA700704 JB February 13, 1978  9:18 AM

1676	4	2033
1682	4	2033
1728	4	2033
1860	4	2033
1860	4	2033
1973	4	2033
1973	4	2033
1992	4	2033
2018	4	2033
2018	4	2033
2032	4	2033
2033	4	2033
2033	4	2033
2033	4	2033
2107	4	2033
2107	4	2033
2109	4	2033
2109	4	2033
2203	4	2033
2203	4	2033
2251	4	2033
2251	4	2033
2359	4	2033
2524	4	2033
2543	4	2033
2543	4	2033
2552	4	2033
2559	4	2033
2573	4	2033
2770	4	2033
2991	4	2033
3053	4	2033
1314	5	2033
1785	5	2033
1786	5	2033
2033	5	2033
2033	5	2033
2033	5	2033
3001	5	2033
2033	6	2033
2139	6	2033


************************



Space/Time Trade-offs in Hash Coding with Allowable Errors

In this paper trade-offs among certain computational factors
a given set of messages.  Two new hash-coding methods are examined
and compared with a particular conventional hash-coding method.
The computational factors considered are the size of the hash area
(space), the time required to identify a message as a nonmember of the 
given set (reject time), and an allowable error frequency.  The new methods 
are intended to reduce the amount of space required to contain the hash-coded 
information from that associated with conventional methods.  The reduction in 
space is accomplished by exploiting the possibility that a small fraction of 
errors of commission may be tolerable in some applications, in particular, 
applications in which a large amount of data is involved and a core resident
hash area is consequently not feasible using conventional methods.  In such 
applications, it is envisaged that overall performance
could be improved <B>by using</B> a smaller core resident hash area in
conjunction with the new methods and, when necessary, by using some
secondary and perhaps time-consuming test to "catch" the small
fraction of errors associated with new methods.  An example is discussed
which illustrates possible areas of application for the new
methods.  Analysis of the paradigm problem demonstrates that allowing
a small number of test messages to be falsely identified as
members of the given set will permit a much smaller hash
area to be used without increasing reject time.

CACM July, 1970

Bloom, B. H.

hash coding, hash addressing, scatter storage, searching, storage
layout, retrieval trade-offs, retrieval efficiency, storage efficiency

3.73 3.74 3.79

CA700704 JB February 13, 1978  9:18 AM

1676	4	2033
1682	4	2033
1728	4	2033
1860	4	2033
1860	4	2033
1973	4	2033
1973	4	2033
1992	4	2033
2018	4	2033
2018	4	2033
2032	4	2033
2033	4	2033
2033	4	2033
2033	4	2033
2107	4	2033
2107	4	2033
2109	4	2033
2109	4	2033
2203	4	2033
2203	4	2033
2251	4	2033
2251	4	2033
2359	4	2033
2524	4	2033
2543	4	2033
2543	4	2033
2552	4	2033
2559	4	2033
2573	4	2033
2770	4	2033
2991	4	2033
3053	4	2033
1314	5	2033
1785	5	2033
1786	5	2033
2033	5	2033
2033	5	2033
2033	5	2033
3001	5	2033
2033	6	2033
2139	6	2033


************************

************************
Document:  CACM-1870.html
************************


Some Techniques for Using Pseudorandom Numbers in Computer Simulation

An algorithm is described by which uniform pseudorandom
integers may be used to construct binary 
"numbers" <B>in which</B> the probability that each bit in the
word is a 1-bit and can assume any desired parameter 
value.  Techniques for making use of such "numbers"
in simulation programming are described.

CACM July, 1969

Donnelly, T.

random numbers,  simulation, Boolean algebra, bit manipulation

5.19 5.39

CA690710 JB February 17, 1978  8:54 AM

1794	4	1870
1870	4	1870
2122	4	1870
1674	5	1870
1870	5	1870
1870	5	1870
1870	5	1870


************************

************************
Document:  CACM-2317.html
************************


Programming Systems and Languages 1965-1975

In spite of impressive gains by PL/I, Fortran
and Cobol remain the languages <B>in which</B> most 
of the world's production programs are written and will
remain so into the foreseeable future.  There 
is a great deal of theoretical interest in Algol 68
and in extensible languages, but so far at least 
they have had little practical impact.  Problem-oriented
languages may very well become the most important 
language development area in the next five to ten years.
 In the operating system area all major computer 
manufacturers set out to produce very ambitious multiprogramming
systems, and they all ran into similar 
problems.  A number of university projects,though not
directly comparable to those of the manufacturers, 
have contributed greatly to a better understanding
of operating system principles.  Important trends 
include the increased interest in the development of
system measurement and evaluation techniques,and 
increased use of microprogramming for some programming system functions.

CACM July, 1972

Rosen, S.

languages, operating systems, programming
systems, multiprogramming, history

1.2 4.22 4.32

CA720711 JB January 30, 1978  1:47 PM

1665	4	2317
1768	4	2317
1781	4	2317
1787	4	2317
1805	4	2317
1824	4	2317
1825	4	2317
1828	4	2317
1836	4	2317
1846	4	2317
1854	4	2317
1861	4	2317
1877	4	2317
1892	4	2317
1960	4	2317
2015	4	2317
2110	4	2317
2126	4	2317
2127	4	2317
2150	4	2317
2150	4	2317
2187	4	2317
2188	4	2317
2218	4	2317
2228	4	2317
2256	4	2317
2314	4	2317
2317	4	2317
2317	4	2317
2317	4	2317
2317	4	2317
2317	4	2317
2317	4	2317
2317	4	2317
2317	4	2317
2319	4	2317
2358	4	2317
2377	4	2317
2342	4	2317
2342	4	2317
2376	4	2317
2376	4	2317
2379	4	2317
2424	4	2317
2482	4	2317
2545	4	2317
2546	4	2317
2618	4	2317
2618	4	2317
2625	4	2317
2632	4	2317
2698	4	2317
2704	4	2317
2723	4	2317
2733	4	2317
2738	4	2317
2740	4	2317
2741	4	2317
2842	4	2317
2867	4	2317
3184	4	2317
3184	4	2317
1198	5	2317
1572	5	2317
1693	5	2317
1749	5	2317
1753	5	2317
1781	5	2317
2126	5	2317
2148	5	2317
2317	5	2317
2317	5	2317
2317	5	2317
2874	5	2317
1682	6	2317
2227	6	2317
2317	6	2317
2683	6	2317
2871	6	2317
521	6	2317


************************

************************
Document:  CACM-1609.html
************************


Scheduling University Course Examinations by Computer

A new approach to the problem of scheduling
course examinations is presented.  In principle, 
an examination schedule which requires a minimum number
of examination periods and satisfies the constraint 
that no student be required to take two examinations
simultaneously can be found in two steps.  First, 
course which may have their examinations scheduled at
the same period are grouped together in all possible 
ways.  Then a minimum number <B>of these</B> groups, such that
each course is included at least once, are selected. 
 By removing multiple occurrences of courses and then scheduling
each group at a different period a minimal 
schedule can be obtained.  Known algorithms for carrying
out these procedures are prohibitively expensive. 
 Approximations to the ideal procedure outlined above are
given which yield nonminimal but feasible schedules 
with a very small expenditure of time.  Results of experiments
using these techniques are given.  These 
are encouraging and indicate that further experimentation would be worthwhile.

CACM April, 1967

Hall Jr., A. D.
Acton, F. S.

CA670406 JB February 28, 1978  11:22 AM

1609	4	1609
2052	4	1609
1013	5	1609
1609	5	1609
1609	5	1609
1609	5	1609


************************

************************
Document:  CACM-1099.html
************************


Professional Computer Work for the Blind

Developments in computer technology have opened
new professional opportunities for the intelligent 
blind.  Since there are few if any occupations in which the
blind can participate without serious disadvantage, 
the opportunities offered them to gain entrance into
various occupations through computer use including 
that of programmer, is important for future rehabilitation
planning. Also of immediate interest is the 
fact that the blind may be especially suited for programming
work.  Because of intense training in and 
constant experience with locating objects in the unseen
environment and also because of superbly trained 
memory, the blind brings to the work of programming skills
which the sighted has had little need to acquire. 
 These qualifications should result in fewer debugging
problems and make the blind a valuable addition 
to any systems group.  Before the blind could become a
serious professional, a number of aids <B>and techniques</B> 
had to be developed that can mediate between machines
and programmer.  This paper describes the techniques 
and aids which were designed by the staff of the Medical
Computing Center of the University of Cincinnati 
College of Medicine.

CACM April, 1964

Sterling, T. D.
Lichstein, M. 
Scarpino, F.
Stuebing, D.

CA640409 JB March 10, 1978  1:46 AM

1099	5	1099
1099	5	1099
1099	5	1099
1264	5	1099
1740	5	1099
1099	6	1099
1099	6	1099


************************



Professional Computer Work for the Blind

Developments in computer technology have opened
new professional opportunities for the intelligent 
blind.  Since there are few if any occupations <B>in which</B> the
blind can participate without serious disadvantage, 
the opportunities offered them to gain entrance into
various occupations through computer use including 
that of programmer, is important for future rehabilitation
planning. Also of immediate interest is the 
fact that the blind may be especially suited for programming
work.  Because of intense training in and 
constant experience with locating objects in the unseen
environment and also because of superbly trained 
memory, the blind brings to the work of programming skills
which the sighted has had little need to acquire. 
 These qualifications should result in fewer debugging
problems and make the blind a valuable addition 
to any systems group.  Before the blind could become a
serious professional, a number of aids and techniques 
had to be developed that can mediate between machines
and programmer.  This paper describes the techniques 
and aids which were designed by the staff of the Medical
Computing Center of the University of Cincinnati 
College of Medicine.

CACM April, 1964

Sterling, T. D.
Lichstein, M. 
Scarpino, F.
Stuebing, D.

CA640409 JB March 10, 1978  1:46 AM

1099	5	1099
1099	5	1099
1099	5	1099
1264	5	1099
1740	5	1099
1099	6	1099
1099	6	1099


************************

************************
Document:  CACM-2866.html
************************


Proving Monitors

Interesting scheduling and sequential properties
of monitors can be proved <B>by using</B> state variables 
which record the monitor's history and by defining extended
proof rules for their wait and signal operations. 
 These two techniques are defined, discussed, and applied
to examples to prove properties such as freedom 
from indefinitely repeated overtaking or unnecessary waiting
upper bounds on queue lengths, and historical 
behavior.

CACM May, 1976

Howard, J.

monitors, correctness, proof rules, historical variables,
concurrency, scheduling, bounded buffer, 
semaphores, alarm clock, disk head

4.32 4.35 5.24

CA760505 JB January 4, 1978  3:28 PM

2704	4	2866
2738	4	2866
2865	4	2866
2866	4	2866
2866	4	2866
2866	4	2866
2869	4	2866
2898	4	2866
2941	4	2866
2958	4	2866
2972	4	2866
3004	4	2866
3030	4	2866
3043	4	2866
3128	4	2866
3144	4	2866
2356	5	2866
2597	5	2866
2796	5	2866
2866	5	2866
2866	5	2866
2866	5	2866
2938	5	2866
2946	5	2866
3128	5	2866
2150	6	2866
2150	6	2866
2376	6	2866
2436	6	2866
2597	6	2866
2865	6	2866
2866	6	2866
2866	6	2866
2866	6	2866
2870	6	2866
2912	6	2866
3082	6	2866


************************

************************
Document:  CACM-1135.html
************************


A General Business-Oriented Language Based on Decision Expressions*

The structure of a digital compute programming
language which covers a wide class of business 
and file processing applications is presented.  Such
a structure, based on identifying and incorporating 
into a compiler the aspects common to all processes
of such class, permits writing extremely compact 
programs, even for comparatively complex applications,
in terms of tables of control expressions which 
express only information characteristic of the particular
application.  Furthermore,local changes of 
a process (e.g. changes affecting only one of the output
files involved) can be effected by local modifications 
in the program (e.g. modification of only one entry of the
tables).  This structure also allows for inexpensive 
preparation of loading-speed compilers which translate the
source <B>programs in</B>to efficient machine codes. 
 The approach adopted here departs from conventional mechanical
language design philosophies.  It stresses 
the structural analysis of the class of processes to be represented
in the languages, as opposed to emphasizing 
formal (i.e., contents-independent) syntactical definitions.
 It relies exclusively on nonprocedural 
representation of process as sets (tables) of relations
between data and results (there are no control 
statements such as GO TO, etc.), instead of using procedure
descriptions (which are one-to-one translations 
of flowcharts).  Here an invariant pattern of procedure
is identified as characteristic of the class 
of all batch file processes.  This new philosophy has
the potential to overcome well-known deficiencies 
of other business-oriented languages and fully meets
the requirements set by CODASYL for such languages, 
including machine-independence.

CACM February, 1964

Lombardi, L. A.

CA640208 JB March 10, 1978  4:08 AM

1135	4	1135
1136	4	1135
493	4	1135
2710	4	1135
2765	4	1135
2888	4	1135
2906	4	1135
729	4	1135
1135	5	1135
1135	5	1135
1135	5	1135
1959	5	1135
616	5	1135
1135	6	1135


************************

************************
Document:  CACM-3059.html
************************


Models for Parallel Processing WIthin Programs:
Application to CPU:I/O and I/O:I/O Overlap

Approximate queueing models for internal parallel
processing by individual <B>programs in</B> a multiprogrammed 
system are developed in this paper.  The solution technique
is developed by network decomposition.  The 
models are formulated in terms of CPU:I/O and I/O:I/O overlap
and applied to the analysis of these problems. 
 The percentage performance improvement from CPU:I/O
overlap is found to be greatest for systems which 
are in approximate CPU:I/O utilization balance and for
low degrees of multiprogramming.  The percentage 
improvement from I/O:I/O overlap is found to be greatest
for systemtems in which the I/O system is more 
utilized than the CPU.

CACM October, 1978

Towsley, D.
Chandy, K.
Browne, J.

Multiprogramming, parallel processing, queueing
network models, multiprocessing of computation 
and I/O 

4.32 8.1

CA781002 DH January 29, 1979  6:23 PM

3059	4	3059
3070	4	3059
1685	5	3059
2988	5	3059
3059	5	3059
3059	5	3059
3059	5	3059
3059	6	3059


************************



Models for Parallel Processing WIthin Programs:
Application to CPU:I/O and I/O:I/O Overlap

Approximate queueing models for internal parallel
processing by individual programs in a multiprogrammed 
system are developed in this paper.  The solution technique
is developed by network decomposition.  The 
models are formulated in terms of CPU:I/O and I/O:I/O overlap
and applied to the analysis <B>of these</B> problems. 
 The percentage performance improvement from CPU:I/O
overlap is found to be greatest for systems which 
are in approximate CPU:I/O utilization balance and for
low degrees of multiprogramming.  The percentage 
improvement from I/O:I/O overlap is found to be greatest
for systemtems in which the I/O system is more 
utilized than the CPU.

CACM October, 1978

Towsley, D.
Chandy, K.
Browne, J.

Multiprogramming, parallel processing, queueing
network models, multiprocessing of computation 
and I/O 

4.32 8.1

CA781002 DH January 29, 1979  6:23 PM

3059	4	3059
3070	4	3059
1685	5	3059
2988	5	3059
3059	5	3059
3059	5	3059
3059	5	3059
3059	6	3059


************************



Models for Parallel Processing WIthin Programs:
Application to CPU:I/O and I/O:I/O Overlap

Approximate queueing models for internal parallel
processing by individual programs in a multiprogrammed 
system are developed in this paper.  The solution technique
is developed by network decomposition.  The 
models are formulated in terms of CPU:I/O and I/O:I/O overlap
and applied to the analysis of these problems. 
 The percentage performance improvement from CPU:I/O
overlap is found to be greatest for systems which 
are in approximate CPU:I/O utilization balance and for
low degrees of multiprogramming.  The percentage 
improvement from I/O:I/O overlap is found to be greatest
for systemtems <B>in which</B> the I/O system is more 
utilized than the CPU.

CACM October, 1978

Towsley, D.
Chandy, K.
Browne, J.

Multiprogramming, parallel processing, queueing
network models, multiprocessing of computation 
and I/O 

4.32 8.1

CA781002 DH January 29, 1979  6:23 PM

3059	4	3059
3070	4	3059
1685	5	3059
2988	5	3059
3059	5	3059
3059	5	3059
3059	5	3059
3059	6	3059


************************

************************
Document:  CACM-2903.html
************************


Improving Programs by the Introduction of Recursion

A new technique of program transformation,
called "recursion in troduction," is described and 
applied to two algorithms which solve pattern matching problems.
 By using recursion in troduction, algorithms 
which manipulate a stack are first translated into
recursive algorithms <B>in which</B> no stack operations 
occur.  These algorithms are then subjected to a second
transformation, a method of recursion elimination 
called "tabulation," to produce programs with a very
efficient running time.  In particular, it is shown 
how the fast linear pattern matching algorithm of Knuth,
Morris, and Pratt can be derived in a few steps 
from a simple nonlinear stack algorithm.

CACM November, 1977

Bird, R. S.

program transformation, optimization of programs,
recursion elimination, pattern matching algorithms, 
stacks, computational induction

4.0 4.2 5.20 5.24 5.25

CA771113 JB December 27, 1977  6:29 AM

2326	4	2903
2457	4	2903
2842	4	2903
2903	4	2903
2192	5	2903
2903	5	2903
2903	5	2903
2903	5	2903


************************

************************
Document:  CACM-3043.html
************************


Distributed Processes: A Concurrent Programming Concept

A language concept for concurrent processes
without common variables is introduced.  These 
processes communicate and <B>synchronize by</B> means of procedure
calls and guarded regions.  This concept 
is proposed for real-time applications controlled by
microcomputer networks with distributed storage. 
 The paper gives several examples of distributed processes
and shows that they include procedures, coroutines, 
classes, monitors, processes, semaphores, buffers, path
expressions, and input/output as special cases.

CACM November, 1978

Hansen, P.

Concurrent programming, distributed processes,
microprocessor networks, nondeterminism, guarded 
regions, programming languages, process communication
and scheduling, sorting arrays, coroutines, classes, 
monitors, processes, semaphores, buffers, path expressions, input/output 

3.8 4.2 4.22 4.32 5.24

CA781108 DH January 26, 1979  10:40 AM

2865	4	3043
2866	4	3043
2896	4	3043
2898	4	3043
2972	4	3043
2972	4	3043
3037	4	3043
3039	4	3043
3043	4	3043
3043	4	3043
3073	4	3043
3128	4	3043
3144	4	3043
2597	5	3043
2732	5	3043
3043	5	3043
3043	5	3043
3043	5	3043


************************



Distributed Processes: A Concurrent Programming Concept

A language concept for concurrent processes
without common variables is introduced.  These 
processes <B>communicate and</B> synchronize by means of procedure
calls and guarded regions.  This concept 
is proposed for real-time applications controlled by
microcomputer networks with distributed storage. 
 The paper gives several examples of distributed processes
and shows that they include procedures, coroutines, 
classes, monitors, processes, semaphores, buffers, path
expressions, and input/output as special cases.

CACM November, 1978

Hansen, P.

Concurrent programming, distributed processes,
microprocessor networks, nondeterminism, guarded 
regions, programming languages, process communication
and scheduling, sorting arrays, coroutines, classes, 
monitors, processes, semaphores, buffers, path expressions, input/output 

3.8 4.2 4.22 4.32 5.24

CA781108 DH January 26, 1979  10:40 AM

2865	4	3043
2866	4	3043
2896	4	3043
2898	4	3043
2972	4	3043
2972	4	3043
3037	4	3043
3039	4	3043
3043	4	3043
3043	4	3043
3073	4	3043
3128	4	3043
3144	4	3043
2597	5	3043
2732	5	3043
3043	5	3043
3043	5	3043
3043	5	3043


************************



Distributed Processes: A Concurrent Programming Concept

A language concept for concurrent processes
without common variables is introduced.  These 
processes communicate <B>and synchronize</B> by means of procedure
calls and guarded regions.  This concept 
is proposed for real-time applications controlled by
microcomputer networks with distributed storage. 
 The paper gives several examples of distributed processes
and shows that they include procedures, coroutines, 
classes, monitors, processes, semaphores, buffers, path
expressions, and input/output as special cases.

CACM November, 1978

Hansen, P.

Concurrent programming, distributed processes,
microprocessor networks, nondeterminism, guarded 
regions, programming languages, process communication
and scheduling, sorting arrays, coroutines, classes, 
monitors, processes, semaphores, buffers, path expressions, input/output 

3.8 4.2 4.22 4.32 5.24

CA781108 DH January 26, 1979  10:40 AM

2865	4	3043
2866	4	3043
2896	4	3043
2898	4	3043
2972	4	3043
2972	4	3043
3037	4	3043
3039	4	3043
3043	4	3043
3043	4	3043
3073	4	3043
3128	4	3043
3144	4	3043
2597	5	3043
2732	5	3043
3043	5	3043
3043	5	3043
3043	5	3043


************************



Distributed Processes: A Concurrent Programming Concept

A language concept for concurrent processes
without common variables is introduced.  These 
<B>processes communicate</B> and synchronize by means of procedure
calls and guarded regions.  This concept 
is proposed for real-time applications controlled by
microcomputer networks with distributed storage. 
 The paper gives several examples of distributed processes
and shows that they include procedures, coroutines, 
classes, monitors, processes, semaphores, buffers, path
expressions, and input/output as special cases.

CACM November, 1978

Hansen, P.

Concurrent programming, distributed processes,
microprocessor networks, nondeterminism, guarded 
regions, programming languages, process communication
and scheduling, sorting arrays, coroutines, classes, 
monitors, processes, semaphores, buffers, path expressions, input/output 

3.8 4.2 4.22 4.32 5.24

CA781108 DH January 26, 1979  10:40 AM

2865	4	3043
2866	4	3043
2896	4	3043
2898	4	3043
2972	4	3043
2972	4	3043
3037	4	3043
3039	4	3043
3043	4	3043
3043	4	3043
3073	4	3043
3128	4	3043
3144	4	3043
2597	5	3043
2732	5	3043
3043	5	3043
3043	5	3043
3043	5	3043


************************

************************
Document:  CACM-3148.html
************************


High Level Programming for Distributed Computing

Programming for distributed and other loosely coupled systems
is a problem of growing interest.  This paper describes an approach
to distributed computing at the level of general purpose programming
languages.  Based on primitive notions of module, message,
and transaction key, the methodology is shown to be independent
<B>of particular</B> languages and machines.  It appears to be useful for
programming a wide range of tasks.  This is part of an ambitious
program of development in advanced programming languages, and relations
with other aspects of the project are also discussed.

CACM June, 1979

Feldman, J.

Distributed computing, modules, messages, assertions

4.22 4.32

CA790604 DH August 21, 1979  4:31 PM

1957	4	3148
2151	4	3148
3031	4	3148
3103	4	3148
3105	4	3148
3128	4	3148
3148	4	3148
3148	4	3148
3148	4	3148
3148	4	3148
3148	4	3148
3150	4	3148
3150	4	3148
3155	4	3148
1860	5	3148
2817	5	3148
2865	5	3148
2939	5	3148
3073	5	3148
3148	5	3148
3148	5	3148
3148	5	3148
3150	5	3148
2060	6	3148
2704	6	3148
2842	6	3148
2939	6	3148
2940	6	3148
2941	6	3148
2943	6	3148
3073	6	3148
3148	6	3148


************************

************************
Document:  CACM-3078.html
************************


Analysis of the Availability of Computer
Systems Using Computer- Aided Algebra

Analytical results, related to the availability
of a computer system constructed of unreliable 
processors, are presented in this paper.  These results
are obtained <B>by using</B> various computer-aided 
algebraic manipulation techniques.  A major purpose of
this paper is to demonstrate that the difficulties 
of obtaining analytical solutions to Markov processes
can be considerably reduced by the application 
of symbol manipulation programs.  Since many physical
systems can be modeled by Markov and semi-Markov 
processes, the potential range of application of these techniques
is much wider than the problem of availability 
analyzed here.

CACM July, 1978

Chattergy, R.
Pooch, U.

Computer-aided algebra, symbol manipulation, Markov
process, reliability, redundant structures, 
on-line computer system.

3.82 5.5 5.7 8.1 8.3

CA780710 DH February 7, 1979 3:37 PM

3078	5	3078
3078	5	3078
3078	5	3078


************************



Analysis of the Availability of Computer
Systems Using Computer- Aided Algebra

Analytical results, related to the availability
of a computer system constructed of unreliable 
processors, are presented in this paper.  These results
are obtained by using various computer-aided 
algebraic manipulation techniques.  A major purpose of
this paper is to demonstrate that the difficulties 
of obtaining analytical solutions to Markov processes
can be considerably reduced by the application 
of symbol manipulation programs.  Since many physical
systems can be modeled by Markov and semi-Markov 
processes, the potential range of application <B>of these</B> techniques
is much wider than the problem of availability 
analyzed here.

CACM July, 1978

Chattergy, R.
Pooch, U.

Computer-aided algebra, symbol manipulation, Markov
process, reliability, redundant structures, 
on-line computer system.

3.82 5.5 5.7 8.1 8.3

CA780710 DH February 7, 1979 3:37 PM

3078	5	3078
3078	5	3078
3078	5	3078


************************

************************
Document:  CACM-2851.html
************************


Formal Verification of Parallel Programs

Two formal models for parallel computation
are presented: an abstract conceptual model and 
a parallel-program model.  The former model does not
distinguish between control and data states.  The 
latter model includes the capability for the representation
of an infinite set of control states by allowing 
there to be arbitrarily many instruction pointers (or
processes) executing the program.  An induction 
principle is presented which treats the control and
data state sets on the same ground.  Through the 
use of "place variables," it is observed that certain
correctness conditions can be expressed without 
enumeration of the set of all possible control states.
 Examples are presented <B>in which</B> the induction 
principle is used to demonstrate proofs of mutual exclusion.
 It is shown that assertions-oriented proof 
methods are special cases of the induction principle.
A special case of the assertions method, which 
is called parallel place assertions, is shown to be
incomplete.  A formalization of "deadlock" is then 
presented. The concept of a "norm" is introduced, which
yields an extension, to the deadlock problem, 
of Floyd's technique for proving termination.  Also discussed
is an extension of the program model which 
allows each process to have its own local variables
and permits shared global variables.  Correctness 
of certain forms of implementation is also discussed.
 An Appendix is included which relates this work 
to previous work on the satisfiability of certain logical formulas.

CACM July, 1976

Keller, R. M.

parallel program, correctness, verification,
assertions, deadlock, mutual exclusion, Petrinet

4.6 5.2 6.9 8.1

CA760702 JB January 4, 1978  1:20 PM

2228	4	2851
2280	4	2851
2379	4	2851
2320	4	2851
2482	4	2851
2597	4	2851
2740	4	2851
2777	4	2851
2851	4	2851
2851	4	2851
2895	4	2851
2912	4	2851
2920	4	2851
2946	4	2851
3128	4	2851
1877	5	2851
2150	5	2851
2851	5	2851
2851	5	2851
2851	5	2851


************************

************************
Document:  CACM-2860.html
************************


A Practitioner's Guide To Addressing Algorithms

This paper consolidates a number of popular
rules of thumb which have been suggested for the
design of record addressing algorithms, and discusses
the applicability <B>of these</B> rules to large commercial 
databases.  Guidelines for selecting identifier transformations,
overflow techniques, loading factors, 
bucket sizes, and loading order and considered.  Particular
attention is focused on the reasonableness 
of common heuristics for determining primary or secondary
bucket sizes. A mathematical model which explicitly 
considers storage device characteristics and time/space
cost tradeoffs is used to analyze the effect 
of design parameters on overall system costs.  A
specific design example is presented and solved.

CACM June, 1976

Severance, D.
Duhne, R.

data management, file retrieval, searching, addressing
techniques, hashing functions, synonym resolution, 
loading factor, bucket size, heuristic design, rules of thumb

3.50 3.72 3.74 4.33 4.34 4.41 8.1

CA760602 JB January 4, 1978  2:47 PM

1785	4	2860
2203	4	2860
2258	4	2860
2282	4	2860
2319	4	2860
2313	4	2860
2359	4	2860
2437	4	2860
2552	4	2860
2781	4	2860
2860	4	2860
2860	4	2860
2860	4	2860
2991	4	2860
3083	4	2860
911	4	2860
1328	5	2860
2203	5	2860
2860	5	2860
2860	5	2860
2860	5	2860
492	5	2860


************************

************************
Document:  CACM-1427.html
************************


Simulation of Radioisotope Scans by Computer

In radioisotope scanning, a field which is assuming
increasing importance in medical diagnosis, 
the scan is a two-dimensional pattern made up of dots.
 <B>Areas of</B> increased source activity are represented 
on the scan by areas of increased dot density.  To study
the output of scanners with various characteristics, 
a program which simulates radioisotope scans has been
written  for a PDP-1 computer with auxiliary disk 
storage and cathode ray tube display.  Past and present
research using the output of the simulator has 
shown the flexibility of the system to be important.
 The structure of this program can be useful in 
the simulation of the output of any quantum-limited system.

CACM May, 1966

Pizer, S. M.

CA660510 JB March 3, 1978  9:47 AM

1427	5	1427
1427	5	1427
1427	5	1427


************************

************************
Document:  CACM-2905.html
************************


Perfect Hashing Functions: A Single
Probe Retrieving Method for Static Sets

A refinement of hashing which allows retrieval
of an item in a static table with a single probe 
is considered.  Given a set I of identifiers, two methods
are presented for building, in a mechanical 
way, perfect hashing functions, i.e. functions transforming
the elements of I into unique addresses. 
 The first method, the "quotient reduction" method, is
shown to be complete in the sense that for every 
set I the smallest table in which the elements of I
can be stored and from which they can be retrieved 
<B>by using</B> a perfect hashing function constructed by this
method can be found.  However, for nonuniformly 
distributed sets, this method can give rather sparse tables.
 The second method, the "remainder reduction" 
method, is not complete in the above sense, but it seems
to give minimal (or almost minimal) tables for 
every kind of set.  The two techniques are applicable
directly to small sets.  Some methods to extend 
these results to larger sets are also presented.  A rough
comparison with ordinary hashing is given which 
shows that this method can be used conveniently
in several practical applications.

CACM November, 1977

Sprugnoli, R.

hashing, hashing methods, hash coding, direct addressing,
identifier-to-address transformations, 
perfect hashing functions, perfect hash coding, reduction, scatter storage

3.7 3.74 4.34

CA771111 JB December 27, 1977  6:45 AM

2905	4	2905
2905	5	2905
2905	5	2905
2905	5	2905
3041	5	2905
3126	5	2905
3176	5	2905
829	5	2905
2846	6	2905
2905	6	2905
2905	6	2905
2905	6	2905


************************



Perfect Hashing Functions: A Single
Probe Retrieving Method for Static Sets

A refinement of hashing which allows retrieval
of an item in a static table with a single probe 
is considered.  Given a set I of identifiers, two methods
are presented for building, in a mechanical 
way, perfect hashing functions, i.e. functions transforming
the elements of I into unique addresses. 
 The first method, the "quotient reduction" method, is
shown to be complete in the sense that for every 
set I the smallest table <B>in which</B> the elements of I
can be stored and from which they can be retrieved 
by using a perfect hashing function constructed by this
method can be found.  However, for nonuniformly 
distributed sets, this method can give rather sparse tables.
 The second method, the "remainder reduction" 
method, is not complete in the above sense, but it seems
to give minimal (or almost minimal) tables for 
every kind of set.  The two techniques are applicable
directly to small sets.  Some methods to extend 
these results to larger sets are also presented.  A rough
comparison with ordinary hashing is given which 
shows that this method can be used conveniently
in several practical applications.

CACM November, 1977

Sprugnoli, R.

hashing, hashing methods, hash coding, direct addressing,
identifier-to-address transformations, 
perfect hashing functions, perfect hash coding, reduction, scatter storage

3.7 3.74 4.34

CA771111 JB December 27, 1977  6:45 AM

2905	4	2905
2905	5	2905
2905	5	2905
2905	5	2905
3041	5	2905
3126	5	2905
3176	5	2905
829	5	2905
2846	6	2905
2905	6	2905
2905	6	2905
2905	6	2905


************************

************************
Document:  CACM-2740.html
************************


A Large Semaphore Based Operating System

The paper describes the internal structure of
a large operating system as a set of cooperating 
sequential processes.  The processes <B>synchronize by</B>
means of semaphores and extended semaphores (queue 
semaphores).  The number of parallel processes is carefully
justified, and the various semaphore constructions 
are explained.  The system is proved to be free of "deadly
embrace" (deadlock).  The design principle 
is an alternative to Dijkstra's hierarchical structuring
of operating systems.  The project management 
and the performance are discussed, too.  The operating
system is the first large one using the RC 4000 
multiprogramming system.

CACM July, 1975

Lauesen, S.

cooperating processes, operating system, semaphores,
semaphore applications, queue semaphores, 
deadlock, deadly embrace, hierarchical structuring, multiprogramming,
operating system structure, asynchronous 
structuring, buffering, parallel processes, synchronizing
primitives, reentrant code, RC 4000, project 
management, time schedule, debugging, project planning,
project scheduling, reliability, program proving, 
coroutines, correctness, program maintenance, software paging

4.30 4.31 4.32 4.42 4.43 5.24

CA750702 JB January 9, 1978  10:32 AM

1828	4	2740
1854	4	2740
1877	4	2740
1960	4	2740
2150	4	2740
2228	4	2740
2280	4	2740
2317	4	2740
2319	4	2740
2319	4	2740
2377	4	2740
2378	4	2740
2342	4	2740
2376	4	2740
2379	4	2740
2379	4	2740
2320	4	2740
2424	4	2740
2482	4	2740
2482	4	2740
2618	4	2740
2632	4	2740
2632	4	2740
2704	4	2740
2723	4	2740
2738	4	2740
2738	4	2740
2740	4	2740
2740	4	2740
2740	4	2740
2741	4	2740
2851	4	2740
2867	4	2740
2868	4	2740
2920	4	2740
3127	4	2740
3184	4	2740
1749	5	2740
1877	5	2740
2080	5	2740
2740	5	2740
2740	5	2740
2740	5	2740


************************

************************
Document:  CACM-2324.html
************************


Management Science: A View from Nonlinear Programming

A brief history of integer and continuous
nonlinear programming is presented as well as the 
current obstacles to practical use <B>of these</B> mathematical
programming techniques.  It is forecast that 
the useful contributions to nonlinear programming actually
made in the next few years are more likely 
to be consolidations than theoretical breakthroughs.  These
contributions are likely to be the documentation 
of standard test problems, construction of user oriented
software, and comparisons of currently known 
algorithms to demonstrate which techniques are best for specific problems.

CACM July, 1972

Shanno, D. F.
Weil, R. L.

integer programming, linear programming, mathematical
programming, nonlinear programming, quadratic 
programming, management science, operations research, algorithms

5.41 8.3

CA720704 JB January 30, 1978  3:14 PM

2324	5	2324
2324	5	2324
2324	5	2324


************************

************************
Document:  CACM-2895.html
************************


A Language for Formal Problem Specification

A language for specifying the in tended behavior
of communicating parallel processes is described. 
 The specifications are constrain ts on the order <B>in which</B>
events of a computation can occur.  The language 
is used to write specifications of the readers/writers
problem and the writer priority of the second 
readers/writers problem.

CACM December, 1977 

Greif, I.

formal specifications,program correctness, parallel
processing, synchronization, readers/writers 
problem

4.22 4.32 5.24

CA771205 DMM December 22, 1977  12:44 PM

2320	4	2895
2597	4	2895
2777	4	2895
2851	4	2895
2895	4	2895
2895	4	2895
2912	4	2895
2946	4	2895
3128	4	2895
2150	5	2895
2618	5	2895
2895	5	2895
2895	5	2895
2895	5	2895


************************

************************
Document:  CACM-3128.html
************************


Synchronization with Eventcounts and Sequencers

Synchronization of concurrent processes requires controlling the relative 
ordering of events in the processes.
A new synchronization mechanism is proposed, using 
abstract objects called eventcounts and sequencers, that allows processes
to control the ordering of events directly, rather than using mutual
exclusion to protect manipulations of shared variables that control
ordering of events.  Direct control of ordering seems to simplify
correctness arguments and also simplifies implementation <B>in distributed</B>
systems.  The mechanism is defined formally, and then several
examples of its use are given.  The relationship of the mechanism
to protection mechanisms in the system is explained; in particular,
eventcounts are shown to be applicable to situations where confinement
of information matters.  An implementation of eventcount
s and sequencers in a system with shared memory is described.

CACM February, 1979

Reed, D.
Kanodia, R.

Process synchronization, interprocess communication, distributed
systems, security models, mutual exclusion, semaphores

4.30 4.32

CA790207 DH April 12, 1979  10:03 AM

2320	4	3128
2597	4	3128
2700	4	3128
2777	4	3128
2840	4	3128
2851	4	3128
2865	4	3128
2866	4	3128
2869	4	3128
2895	4	3128
2898	4	3128
2912	4	3128
2938	4	3128
2945	4	3128
2946	4	3128
2946	4	3128
2972	4	3128
3043	4	3128
3128	4	3128
3128	4	3128
3128	4	3128
3128	4	3128
3128	4	3128
3128	4	3128
3128	4	3128
3128	4	3128
3128	4	3128
3144	4	3128
3148	4	3128
3158	4	3128
2150	5	3128
2376	5	3128
2436	5	3128
2597	5	3128
2865	5	3128
2866	5	3128
2870	5	3128
2912	5	3128
3082	5	3128
3128	5	3128
3128	5	3128
3128	5	3128


************************

************************
Document:  CACM-2657.html
************************


An Improved Program-Synthesizing Algorithm and Its Correctness

An improved program-synthesizing algorithm
based on the algorithm proposed by Waldinger and 
Lee in 1969 is given.  In the old algorithm, the program-synthesizing
problem is translated into a theorem-proving 
problem, and a program is obtained by analyzing a proof.
 For the improved algorithm, the analysis is 
not necessary, and a program is obtained as soon as
the proof is completed.  This is achieved by using 
a modified variable tracing mechanism invented by Green
in 1969.  The <B>correctness of</B> the improved algorithm 
is also proved; i.e. the program thus obtained
always satisfies the specification.

CACM April, 1974

Lee, R. C. T.
Chang, C. L.
Waldinger, R. J.

program-synthesizing algorithms, theorem proving,
consequence finding, primitive resolutions

3.60 3.64 4.20 4.42 5.21 5.22 5.24

CA740413 JB January 18, 1978  9:32 AM

2657	4	2657
2719	4	2657
2210	5	2657
2657	5	2657
2657	5	2657
2657	5	2657
2719	5	2657
1626	6	2657
210	6	2657
2151	6	2657
2167	6	2657
2210	6	2657
2645	6	2657
2657	6	2657


************************



An Improved Program-Synthesizing Algorithm and Its Correctness

An improved program-synthesizing algorithm
based on the algorithm proposed by Waldinger and 
Lee in 1969 is given.  In the old algorithm, the program-synthesizing
problem is translated into a theorem-proving 
problem, and a program is obtained by analyzing a proof.
 For the improved algorithm, the analysis is 
not necessary, and a program is obtained as soon as
the proof is completed.  This is achieved <B>by using</B> 
a modified variable tracing mechanism invented by Green
in 1969.  The correctness of the improved algorithm 
is also proved; i.e. the program thus obtained
always satisfies the specification.

CACM April, 1974

Lee, R. C. T.
Chang, C. L.
Waldinger, R. J.

program-synthesizing algorithms, theorem proving,
consequence finding, primitive resolutions

3.60 3.64 4.20 4.42 5.21 5.22 5.24

CA740413 JB January 18, 1978  9:32 AM

2657	4	2657
2719	4	2657
2210	5	2657
2657	5	2657
2657	5	2657
2657	5	2657
2719	5	2657
1626	6	2657
210	6	2657
2151	6	2657
2167	6	2657
2210	6	2657
2645	6	2657
2657	6	2657


************************

************************
Document:  CACM-1738.html
************************


Writing an Outline Debugging Program for the Experienced User

Presently available online debugging routines
are often unsatisfactory for the experienced 
user because they require unnecessarily rigid and complicated
typing formats, make it difficult for the 
user to correct typing errors, and consume excessive
memory with intricate features.  In a debugging 
program it is of prime importance that the program
be simple, flexible, and highly efficient to use. 
 Communication between the user and the debugging program
can be improved <B>by using</B> certain techniques 
applicable to most online debugging programs.  These
techniques are presented and are illustrated by 
their use in OPAK (octal package), a debugging program coded
for the PDP-5/8 and the SDS-930.  The compromise 
between economy of utility program core storage and incorporation
of elegant debugging features is discussed.

CACM June, 1968

Brady, P. T.

debugging, utility program, programming languages

4.42

CA680607 JB February 22, 1978  4:14 PM

1738	4	1738
1257	5	1738
1738	5	1738
1738	5	1738
1738	5	1738


************************

************************
Document:  CACM-1014.html
************************


Machine Controls for Analysis of Variance

A major problem in using the analysis of variance,
as the number of factors increases, is the 
exponential rise in the number of interactions.  Even
though the experimenter may not be <B>interested in</B> 
these interactions it is impossible to ignore them in
most experimental designs because of the problem 
of getting error terms.  It is natural therefore to look
to the computer to handle the bulk of work involved 
in computing the interactions.  A program device
to get the computer to do this is described.

CACM August, 1964

Weldon, R. J.

CA640816 JB March 9, 1978  6:37 PM

1014	4	1014
912	5	1014
1014	5	1014
1014	5	1014
1014	5	1014


************************

************************
Document:  CACM-2342.html
************************


Interference Between Communicating Parallel Processes

Various kinds of interference between communicating
parallel processes have been examined by 
Dijkstra, Knuth, and others.  Solutions have been given
for the mutual exclusion problem and associated 
subproblems, in the form of parallel programs, and informal
proofs of correctness have been given for 
these solutions.  In this paper a system of parallel
processes is regarded as a machine which proceeds 
from one state S (i.e. a collection of pertinent data
values and process configurations) to a next state 
S' in accordance with a transition rule S --> S'.  A
set of such rules yields sequences of states, which 
dictate the system's behavior.  The mutual exclusion problem
and the associated subproblems are formulated 
as questions of inclusion between sets of states, or
of the existence of certain sequences.  A mechanical 
proof procedure is shown, which will either verify (prove
<B>the correctness</B> of ) or discredit (prove the 
incorrectness of) an attempted solution, with respect
to any of the interference properties.  It is shown 
how to calculate transition rules from the "partial
rules" by which the individual processes operate. 
 The formation of partial rules and the calculation of
transition rules are both applicable to hardware 
processes as well as to software processes, and
symmetry between processes is not required.

CACM June, 1972

Gilbert, P.
Chandler, W. J.

concurrent programming control, cooperating processes,
formal programs, interference, mutual exclusion, 
operating systems, parallel processes

4.0 4.10 4.30 4.32 4.42 5.24 6.20

CA720603 JB January 31, 1978  8:44 AM

1781	4	2342
1828	4	2342
1854	4	2342
1877	4	2342
1960	4	2342
2150	4	2342
2150	4	2342
2150	4	2342
2228	4	2342
2228	4	2342
2256	4	2342
2256	4	2342
2317	4	2342
2317	4	2342
2319	4	2342
2377	4	2342
2342	4	2342
2342	4	2342
2342	4	2342
2376	4	2342
2376	4	2342
2379	4	2342
2424	4	2342
2482	4	2342
2618	4	2342
2618	4	2342
2618	4	2342
2632	4	2342
2704	4	2342
2723	4	2342
2738	4	2342
2740	4	2342
2741	4	2342
2867	4	2342
3184	4	2342
3184	4	2342
1198	5	2342
1338	5	2342
1749	5	2342
2342	5	2342
2342	5	2342
2342	5	2342


************************



Interference Between Communicating Parallel Processes

Various kinds of interference between communicating
parallel processes have been examined by 
Dijkstra, Knuth, and others.  Solutions have been given
for the mutual exclusion problem and associated 
subproblems, in the form of parallel programs, and informal
proofs of correctness have been given for 
these solutions.  In this paper a system of parallel
processes is regarded as a machine which proceeds 
from one state S (i.e. a collection of pertinent data
values and process configurations) to a next state 
S' in accordance with a transition rule S --> S'.  A
set of such rules yields sequences of states, which 
dictate the system's behavior.  The mutual exclusion problem
and the associated subproblems are formulated 
as questions of inclusion between sets of states, or
of the existence of certain sequences.  A mechanical 
proof procedure is shown, which will either verify (prove
the <B>correctness of</B> ) or discredit (prove the 
incorrectness of) an attempted solution, with respect
to any of the interference properties.  It is shown 
how to calculate transition rules from the "partial
rules" by which the individual processes operate. 
 The formation of partial rules and the calculation of
transition rules are both applicable to hardware 
processes as well as to software processes, and
symmetry between processes is not required.

CACM June, 1972

Gilbert, P.
Chandler, W. J.

concurrent programming control, cooperating processes,
formal programs, interference, mutual exclusion, 
operating systems, parallel processes

4.0 4.10 4.30 4.32 4.42 5.24 6.20

CA720603 JB January 31, 1978  8:44 AM

1781	4	2342
1828	4	2342
1854	4	2342
1877	4	2342
1960	4	2342
2150	4	2342
2150	4	2342
2150	4	2342
2228	4	2342
2228	4	2342
2256	4	2342
2256	4	2342
2317	4	2342
2317	4	2342
2319	4	2342
2377	4	2342
2342	4	2342
2342	4	2342
2342	4	2342
2376	4	2342
2376	4	2342
2379	4	2342
2424	4	2342
2482	4	2342
2618	4	2342
2618	4	2342
2618	4	2342
2632	4	2342
2704	4	2342
2723	4	2342
2738	4	2342
2740	4	2342
2741	4	2342
2867	4	2342
3184	4	2342
3184	4	2342
1198	5	2342
1338	5	2342
1749	5	2342
2342	5	2342
2342	5	2342
2342	5	2342


************************

************************
Document:  CACM-2871.html
************************


Logical Analysis of Programs

Most present systems for verification of computer
programs are incomplete in that intermediate 
inductive assertions must be provided manually by the
user, termination is not proven, and incorrect 
programs are not treated.  As a unified solution to
these problems, this paper suggests conducting a 
logical analysis of programs <B>by using</B> invariants which
express what is actually occurring in the program. 
 The first part of the paper is devoted to techniques
for the automatic generation of invariants.  The 
second part provides criteria for using the invariants
to check simultaneously for correctness (including 
termination) or incorrectness.  A third part examines
the implications of the approach for the automatic 
diagnosis and correction of logical errors.

CACM April, 1976

Katz, S.
Manna, Z.

logical analysis, invariants, program verification,
correctness, incorrectness, termination, automatic 
debugging

3.66 4.42 5.24

CA760405 JB January 4, 1978  4:15 PM

2871	5	2871
2871	5	2871
2871	5	2871
2874	5	2871
1682	6	2871
2227	6	2871
2317	6	2871
2683	6	2871
2871	6	2871
521	6	2871


************************

************************
Document:  CACM-1397.html
************************


Proceedings of the ACM Symposium on Symbolic and Algebraic Manipulation

The ACM Symposium on Symbolic and Algebraic
Manipulation brought together over four hundred 
people <B>interested in</B> programming languages designed
for manipulation of algebraic formulas and symbol 
strings, in their applications, and in algorithms for
their implementation.  Twenty-eight papers were 
presented, followed by a lively panel discussion of
future directions.  Evening meetings were arranged 
for several interest groups.  The conference was sponsored
by the ACM Special Interest Committee on Symbolic 
and Algebraic Manipulation.  The program committee consisted
of Chairman Jean E. Sammet, Paul Abrahams, 
Thomas E. Cheatham, Max Goldstein, and Douglas Mcllroy.
 Conference arrangements were made by Lewis C. 
Clapp, Daniel Bobrow and James H. Griesmer.-Robert W. Floyd, Editor

CACM August, 1966

CA660801 JB March 2, 1978  8:17 PM

1397	4	1397
2704	4	1397
1247	5	1397
1396	5	1397
1397	5	1397
1397	5	1397
1397	5	1397
964	6	1397
1028	6	1397
1029	6	1397
1083	6	1397
1132	6	1397
1214	6	1397
1278	6	1397
1334	6	1397
1365	6	1397
1386	6	1397
1387	6	1397
1388	6	1397
1392	6	1397
1393	6	1397
1394	6	1397
1395	6	1397
1396	6	1397
1397	6	1397
1496	6	1397
284	6	1397
407	6	1397
3199	6	1397
3200	6	1397
3201	6	1397
3202	6	1397
3203	6	1397
3204	6	1397
561	6	1397
730	6	1397


************************

************************
Document:  CACM-2535.html
************************


The Effects of Multiplexing on a Computer-Communications System

A study is made of the way <B>in which</B> asynchronous
time division multiplexing changes the stochastic 
nature of the arrival process from a user to the computer
and, consequently, affects the performance 
of a time-shared computer-communications system.  It is
concluded that while, for certain values of system 
parameters, there is noticeable improvement in the
performance of the computer (model), in the sense 
that time-shared scheduling delays are reduced, these
improvements are offset by the transmission delays 
imposed by multiplexing so that there may be little or
no change in the computer-communications system 
performance.  Analytical and simulation results are
based on the model of the computer-communications 
system being an M/D/1 queue (the multiplexor) in tandem
with a single exponential server (the computer). 
 Analytical results include a general description of the
output process of an M/D/1 queue and the conditions 
under which this output process is approximately Poisson.

CACM March, 1973

Pack, C. D.

computer communications, time-sharing, multiplexing,
scheduling algorithms, operating systems

3.80 3.81 6.20

CA730304 JB January 24, 1978  11:13 AM

2535	5	2535
2535	5	2535
2535	5	2535


************************

************************
Document:  CACM-1430.html
************************


Multiple Precision Floating-Point Conversion
from Decimal-to-Binary and Vice Versa

Decimal-to-binary and binary-to-decimal floating-point
conversion is often performed <B>by using</B> 
a table of the powers 10^i, (ia positive integer) for
converting from base 10 to base 2, and by using 
a table of the coefficient of a polynomial approximation
of 10^x, (0<=x<1) for converting from base 2 
to base 10.  These tables occupy a large storage region
in the case of a nonsingle precision conversion. 
 This paper shows that a single small table suffices
for a floating-point conversion from decimal to 
binary, and vice versa, in any useful precision.

CACM May, 1966

Mancino, O. G.

CA660507 JB March 3, 1978  9:56 AM

1430	5	1430
1430	5	1430
1430	5	1430


************************

************************
Document:  CACM-3031.html
************************


Abstract Data Types and Software Validation

A data abstraction can be naturally specified
using algebraic axioms.  The virtue of these 
axioms is that they permit a representation-independent
formal specification of a data type.  An example 
is given which shows how to employ algebraic axioms at
successive levels of implementation.  The  major 
thrust of the paper is twofold.  First, it is shown how
the use of algebraic axiomatizations can simplify 
the process of proving the <B>correctness of</B> an implementation
of an abstract data type.  Second, semi-automatic 
tools are described which can be used both to automate
such proofs of correctness and to derive an immediate 
implementation from the axioms.  This implementation
allows for limited testing of programs at design 
time, before a conventional implementation is accomplished.

CACM December, 1978

Guttag, J.
Horowitz, E.
Musser, D.

Abstract data type, correctness proof,
data type, data structure, specification 

4.34 5.24

CA781208 DH January 18, 1979  2:51 PM   

3030	4	3031
3031	4	3031
3031	4	3031
3049	4	3031
3105	4	3031
3148	4	3031
3150	4	3031
2939	5	3031
2958	5	3031
3031	5	3031
3031	5	3031
3031	5	3031


************************



Abstract Data Types and Software Validation

A data abstraction can be naturally specified
using algebraic axioms.  The virtue <B>of these</B> 
axioms is that they permit a representation-independent
formal specification of a data type.  An example 
is given which shows how to employ algebraic axioms at
successive levels of implementation.  The  major 
thrust of the paper is twofold.  First, it is shown how
the use of algebraic axiomatizations can simplify 
the process of proving the correctness of an implementation
of an abstract data type.  Second, semi-automatic 
tools are described which can be used both to automate
such proofs of correctness and to derive an immediate 
implementation from the axioms.  This implementation
allows for limited testing of programs at design 
time, before a conventional implementation is accomplished.

CACM December, 1978

Guttag, J.
Horowitz, E.
Musser, D.

Abstract data type, correctness proof,
data type, data structure, specification 

4.34 5.24

CA781208 DH January 18, 1979  2:51 PM   

3030	4	3031
3031	4	3031
3031	4	3031
3049	4	3031
3105	4	3031
3148	4	3031
3150	4	3031
2939	5	3031
2958	5	3031
3031	5	3031
3031	5	3031
3031	5	3031


************************



Abstract Data Types and Software Validation

A data abstraction can be naturally specified
using algebraic axioms.  The virtue of these 
axioms is that they permit a representation-independent
formal specification of a data type.  An example 
is given which shows how to employ algebraic axioms at
successive levels of implementation.  The  major 
thrust of the paper is twofold.  First, it is shown how
the use of algebraic axiomatizations can simplify 
the process of proving <B>the correctness</B> of an implementation
of an abstract data type.  Second, semi-automatic 
tools are described which can be used both to automate
such proofs of correctness and to derive an immediate 
implementation from the axioms.  This implementation
allows for limited testing of programs at design 
time, before a conventional implementation is accomplished.

CACM December, 1978

Guttag, J.
Horowitz, E.
Musser, D.

Abstract data type, correctness proof,
data type, data structure, specification 

4.34 5.24

CA781208 DH January 18, 1979  2:51 PM   

3030	4	3031
3031	4	3031
3031	4	3031
3049	4	3031
3105	4	3031
3148	4	3031
3150	4	3031
2939	5	3031
2958	5	3031
3031	5	3031
3031	5	3031
3031	5	3031


************************

************************
Document:  CACM-1771.html
************************


CURRICULUM 68 -- Recommendations for Academic
Programs in Computer Science -- A Report of the 
ACM Curriculum Committee on Computer science

This report contains recommendations on academic
<B>programs in</B> computer science which were developed 
by the ACM Curriculum Committee on Computer Science.
 A classification of the subject areas contained 
in computer science is presented and twenty-two courses
in these areas are described.  Prerequisites, 
catalog descriptions, detailed outlines, and annotated
bibliographies for these courses are included. 
 Specific recommendations which have evolved from the
Committee's 1965 Preliminary Recommendations are 
given for undergraduate programs.  Graduate programs in computer
science are discussed and some recommendations 
are presented for the development of master's degree programs.
 Ways of developing guidelines for doctoral 
programs are discussed, but no specific recommendations
are made. The importance of service courses, 
minors, and continuing education in computer science is
emphasized.  Attention is given to the organization, 
staff requirements, computer resources, and other facilities
needed to implement computer science educational 
programs.

CACM March, 1968

computer science courses, computer science curriculum,
computer science education, computer science 
academic programs, computer science graduate programs,
computer science undergraduate programs, computer 
science course bibliographies

1.52

CA680301 JB February 23, 1978  11:52 AM

1413	4	1771
1654	4	1771
1720	4	1771
1771	4	1771
1771	4	1771
2478	4	1771
1205	5	1771
1654	5	1771
1720	5	1771
1771	5	1771
1771	5	1771
1771	5	1771
1927	5	1771
2147	5	1771
2163	5	1771
2345	5	1771
2478	5	1771
2594	5	1771
2852	5	1771
2899	5	1771
3130	5	1771
1205	6	1771
1417	6	1771
1654	6	1771
1659	6	1771
1720	6	1771
1771	6	1771
1771	6	1771
1771	6	1771
1771	6	1771
1771	6	1771
1771	6	1771
1771	6	1771
1771	6	1771
1771	6	1771
1771	6	1771
1927	6	1771
2155	6	1771
2181	6	1771
2181	6	1771
2204	6	1771
2329	6	1771
2345	6	1771
2387	6	1771
2479	6	1771
2538	6	1771
3003	6	1771
3186	6	1771


************************

************************
Document:  CACM-2802.html
************************


The New Math of Computer Programming

Structured programming has proved to be an important
methodology for systematic program design 
and development.  Structured programs are identified
as compound function expressions in the algebra 
of functions. The algebraic properties <B>of these</B> function
expressions permit the reformulation (expansion 
as well as reduction) of a nested subexpression independently
of its environment, thus modeling what 
is known as stepwise program refinement as well as program
execution.  Finally, structured programming 
is characterized in terms of the selection and solution
of certain elementary equations defined in the 
algebra of functions.  These solutions can be given in
general formulas, each involving a single parameter, 
which display the entire freedom available
in creating correct structured programs.

CACM January, 1975

Mills, H. D.

structured programming, algebra of functions,
stepwise refinement, program correctness

4.6 5.21 5.24

CA750109 JB January 12, 1978  9:50 AM

2709	4	2802
2802	4	2802
3004	4	2802
1425	5	2802
2802	5	2802
2802	5	2802
2802	5	2802


************************

************************
Document:  CACM-0616.html
************************


An Information Algebra - Phase I Report-Language
Structure Group of the CODASYL Development Committee

This report represents the results of the
first phase of the work of the Language Structure 
Group.  The goal of this work is to arrive at a proper
structure for a machine-independent problem-defining 
language, at the systems level of data processing.  The
report is based, for the most part, on a mathematical 
model called "An Information Algebra" developed primarily
by R. Bosak.  It is hoped that this report 
will be read (a) with avid interest by programming language
designers and implementors, and all those 
<B>interested in</B> developing a theoretical approach to data
processing; (b) with interest and understanding 
by professional programmers and systems analysts; and (c)
with appreciation by the businessman-analyst-manager. 
 The authors have not attempted an exhaustive discourse
in this report.  Rather, they have tried to present 
a philosophy to the professional people who are vitally
concerned with providing a working language for 
the systems analyst's use.  They trust that the ideas
in this report will stimulate others to think along 
similar lines.  Questions and comments will be welcomed,
and can be addressed to any of the members of 
the Language Structure Group:  Robert Bosak, System
Development Corporation;  Richard F. Clippinger, 
Honeywell EDP Division;  Carey Dobbs, Remington Rand
Univac Division;  Roy Goldfinger (Chairman), IBM 
Corporation;  Renee B. Jasper, Navy Management Office;
 William Keating, National Cash Register;  George 
Kendrick, General Electric Company;  Jean E. Sammet, IBM Corporation.

CACM April, 1962

CA620401 JB March 20, 1978  2:40 PM

1135	5	616
1136	5	616
2710	5	616
2765	5	616
2888	5	616
2906	5	616
493	5	616
616	5	616
616	5	616
616	5	616
729	5	616
1515	6	616
288	6	616
1936	6	616
1976	6	616
2046	6	616
2046	6	616
2046	6	616
2451	6	616
2452	6	616
2715	6	616
493	6	616
616	6	616
616	6	616
616	6	616
616	6	616
616	6	616
616	6	616
616	6	616
616	6	616
657	6	616


************************

