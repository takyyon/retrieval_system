Snippets for the query:  Currently interested in isolation of root of polynomial; there is an old more recent material. Heindel, L.
************************
Total Hits:  27
************************

************************
Document:  CACM-2709.html
************************


A Genealogy of Control Structures

The issue of program control structures has
had a history of heated controversy.  To put this 
issue on a solid footing, this paper reviews numerous theoretical
results on control structures and explores 
their practical implications.  The classic result of
Bohm and Jacopini on the theoretical completeness 
of if-then-else and while-do is discussed. Several recent
ideas on control structures are then explored. 
 These include a review of various other control structures,
results on time/space limitations, and theorems 
relating the relative power of control structures under
notions of equivalence.  In conclusion, the impact 
of theoretical results on the practicing programmer and
the importance of one-in, one-out control structures 
as operational abstractions are discussed.  It is argued
further that <B>there is</B> insufficient evidence 
to warrant more than if-then-else, while-do, and their variants.

CACM November, 1975

Ledgard, H. F.
Marcotty, M.

structured programming, control structures,
goto statements, language design, PASCAL

4.2 5.24

CA751103 JB January 6, 1978  9:53 AM

2319	4	2709
2411	4	2709
2480	4	2709
2574	4	2709
2594	4	2709
2709	4	2709
2709	4	2709
2709	4	2709
2709	4	2709
2709	4	2709
2802	4	2709
2889	4	2709
2937	4	2709
2939	4	2709
2972	4	2709
2989	4	2709
3004	4	2709
3004	4	2709
3005	4	2709
3025	4	2709
3101	4	2709
3121	4	2709
3155	4	2709
1425	5	2709
2138	5	2709
2204	5	2709
2456	5	2709
2477	5	2709
2709	5	2709
2709	5	2709
2709	5	2709
2821	5	2709
3121	5	2709
1312	6	2709
308	6	2709
309	6	2709
2456	6	2709
2709	6	2709
2709	6	2709


************************

************************
Document:  CACM-1623.html
************************


An Application of FORMAC

A nonlinear circuit analysis problem is stated
and the way in which it was solved using FORMAC 
is indicated.  The solution of the problem using FORMAC
was notable since several other methods that 
were tried failed.  The problem is straightforward (although
untenable by hand) but nevertheless involved 
an elaborate use of the FORMAC language.  The program
was fairly large and utilized practically every 
command.  In particular, it made extensive use of the
PART command.  Several tricks were necessary in 
order to circumvent some of the shortcomings of the
FORMAC system.  This paper is more concerned with 
the use of programming techniques in FORMAC than with
the actual engineering problem, although readers 
may be <B>interested in</B> the problem because it is stated
in a general (mathematical) sense and could be 
of interest in areas other than circuit analysis.

CACM March, 1967

Neidleman, L. D.

CA670306 JB February 28, 1978  1:27 PM

1623	5	1623
1623	5	1623
1623	5	1623


************************

************************
Document:  CACM-3166.html
************************


Computing Standard Deviations: Accuracy

Four algorithms for the numerical computation
of the standard deviation of (unweighted) sampled data
are analyzed.  Two of the algorithms are well-known in the statistical
and computational literature; the other two are new algorithms
specifically intended for automatic computation.  Our discussion is 
expository, with emphasis on reaching a suitable definition of
"accuracy."  Each of the four algorithms <B>is an</B>alyzed for the conditions
under which it will be accurate.  We conclude that all four
algorithms will provide accurate answers for many problems, but two
of the algorithms, one new, one old, are substantially more accurate
on difficult problems than are the other two.

CACM September, 1979

Chan, T.
Lewis, J.

Mean, standard deviation, least squares, updating
estimates, rounding error analysis, condition number.

5.5 5.11 5.19

CA790907 DB January 16, 1980  4:23 PM

1619	4	3166
2731	4	3166
3159	4	3166
3159	4	3166
3166	4	3166
3166	4	3166
3166	4	3166
3166	4	3166
3166	4	3166
3167	4	3166
3167	4	3166
1411	5	3166
2731	5	3166
2799	5	3166
3159	5	3166
3166	5	3166
3166	5	3166
3166	5	3166
3167	5	3166
2731	6	3166
2799	6	3166
3166	6	3166


************************

************************
Document:  CACM-2666.html
************************


On Lions' Counter Example for Gotlieb's Method
for the Construction of School Timetables

The timetable problem <B>is an</B> essentially discrete
problem. Although the discrete problem may 
have no feasible solution, there may exist a solution
to the equivalent continuous problem.  An example 
is given, for which the nondiscrete solution can be
interpreted as a set of timetables, differing from 
week to week, which together satisfy the long-term
requirements of the timetable problem.

CACM April, 1974

Smith, G.
Sefton, I. M.

combinatorial, multi-index problem, necessary
conditions, schedule, school timetable, timetable

3.51 5.39

CA740404 JB January 18, 1978  10:02 AM

2666	5	2666
2666	5	2666
2666	5	2666


************************

************************
Document:  CACM-2194.html
************************


How To Keep the Addresses Short

An algorithm is presented for minimizing the
sum of the lengths of the blocks of coding produced 
by an assembler or compiler when (1) the length of
each computer instruction is assumed to be either 
"long" or "short" ("long," if the memory location addressed
is more than a predetermined distance from 
the current location; "short," otherwise), and (2)
there are blocks of instructions whose beginnings 
(origins) are separated by prespecified amounts. For example,
some computers permit either 8-bit addressing 
(interpreted relative to the location counter) or full
16-bit addressing of all of memory.  When assembling 
or compiling two or more blocks of instructions which
have many mutual references in such a computer, 
<B>there is</B> no simple iterative procedure for keeping
as many of the addresses short as possible.  This 
paper demonstrates that a wide class of problems of
this type can be formulated as covering problems 
solvable by means of elementary arithmetic operations
on the column vectors of a ternary matrix.

CACM May, 1971

Richards, D. L.

addressing, assembler, covering problem, integer
programming, variable-length addressing

4.11 4.12 4.21 5.41

CA710505 JB February 3, 1978  2:40 PM

2194	5	2194
2194	5	2194
2194	5	2194
2858	5	2194
3110	5	2194
2194	6	2194
2194	6	2194
2629	6	2194
2858	6	2194


************************

************************
Document:  CACM-1420.html
************************


A New Uniform Pseudorandom Number Generator

A new multiplicative congruential pseudorandom
number generator is discussed, in which the 
modulus is the largest prime within accumulator capacity
and the multiplier is a primitive <B>root of</B> that 
prime.  This generator passes the usual statistical
tests and in addition the least significant bits 
appear to be as random as the most significant bits-a
property which generators having modulus 2^k do 
not possess.

CACM June, 1966

Hutchinson, D. W.

CA660602 JB March 3, 1978  9:01 AM

1420	5	1420
1420	5	1420
1420	5	1420
1691	5	1420
1293	6	1420
1420	6	1420
1631	6	1420


************************

************************
Document:  CACM-2749.html
************************


Significant Event Simulation

This paper compares a new method of simulation
organization, called the significant event method, 
with <B>an old</B> one, called the clock pulse method, using
as examples two automobile traffic models.  The 
significant event method is found to be more efficient
than the clock pulse method at low levels of system 
interaction and less efficient at high levels.  A simple
mathematical model for the trade-off in the 
relative running time of the two methods is developed. 
The model aids in choosing between the two simulation 
methods for a particular experiment.  It is concluded
that the significant event method can be of value 
in the simulation of some systems when computational
efficiency is of sufficient importance.

CACM June, 1975

Babich, A. F.
Grason, J.
Parnas, D. L.

simulation organization, event simulation, clock
pulse simulation, significant event simulation.

8.1

CA750604 JB January 9, 1978  1:20 PM

2749	5	2749
2749	5	2749
2749	5	2749


************************

************************
Document:  CACM-2535.html
************************


The Effects of Multiplexing on a Computer-Communications System

A study is made of the way in which asynchronous
time division multiplexing changes the stochastic 
nature of the arrival process from a user to the computer
and, consequently, affects the performance 
of a time-shared computer-communications system.  It is
concluded that while, for certain values of system 
parameters, <B>there is</B> noticeable improvement in the
performance of the computer (model), in the sense 
that time-shared scheduling delays are reduced, these
improvements are offset by the transmission delays 
imposed by multiplexing so that there may be little or
no change in the computer-communications system 
performance.  Analytical and simulation results are
based on the model of the computer-communications 
system being an M/D/1 queue (the multiplexor) in tandem
with a single exponential server (the computer). 
 Analytical results include a general description of the
output process of an M/D/1 queue and the conditions 
under which this output process is approximately Poisson.

CACM March, 1973

Pack, C. D.

computer communications, time-sharing, multiplexing,
scheduling algorithms, operating systems

3.80 3.81 6.20

CA730304 JB January 24, 1978  11:13 AM

2535	5	2535
2535	5	2535
2535	5	2535


************************

************************
Document:  CACM-2184.html
************************


On the Meaning of Names in Programming Systems

It is assumed that <B>there is</B> a similarity of
function between the data names of a programming 
language and the file names of an operating system.
 The two functions are discussed in terms of the 
same basic concepts in order to identify the extent
to which they overlap. It is suggested that there 
is some similarity between the idea of a file directory
and a storable object of type context.  Manipulations 
with contexts are then discussed at length.  It is noted
that there is a simple extension of Church's 
Lambda notation that deals nicely with these ideas of
context manipulation.  Whereas a function can be 
regarded as the abstraction based upon the first two terms of
the expression Lambda(name list)(expression)(value list), 
it is found that a context can be viewed as an abstraction
based upon the first two terms in the equivalent 
expression Mu(name list)(value list)(expression).

CACM July, 1971

Fraser, A. G.

file, operating system, programming language, functions,
names, context, file directory, file dictionary, 
lambda calculus, theory of programming

3.73 4.22 4.39 5.23 5.24

CA710606 JB February 3, 1978  9:58 AM

2184	5	2184
2184	5	2184
2184	5	2184


************************

************************
Document:  CACM-1667.html
************************


Roots of Polynomials by a Root-Squaring
and Resultant Routine (Algorithm 340 [C2])

CACM November, 1968

Noltemeier, A.

root finders, roots of polynomial equations, polynomial
zeros, root-squaring operations, Graeffe 
method, resultant procedure, subresultant procedure,
testing <B>of root</B>s, acceptance criteria

5.15

CA681112 JB February 21, 1978  2:24 PM

1667	4	1667
1667	4	1667
1667	4	1667
178	5	1667
1242	5	1667
1667	5	1667
1667	5	1667
1667	5	1667
327	5	1667


************************

************************
Document:  CACM-2702.html
************************


On the Complexity of LR(k) Testing

The problem of determining whether an arbitrary
context-free grammar is a member of some easily 
parsed subclass of grammars such as the LR(k) grammars
is considered.  The time complexity of this problem 
<B>is an</B>alyzed both when k is considered to be a fixed
integer and when k is considered to be a parameter 
of the test.  In the first case, it is shown that for
every k there exists an O(n(k+2)) algorithm for 
testing the LR(k) property, where n is the size of the
grammar in question.  On the other hand, if both 
k and the subject grammar are problem parameters, then
the complexity of the problem depends very strongly 
on the representation chosen for k.  More specifically,
it is shown that this problem is NP-complete 
when k is expressed in unary.  When k is expressed in
binary the problem is complete for nondeterministic 
exponential time.  These results carry over to many
other parameterized classes of grammars, such as 
the LL(k), strong LL(k), SLR(k), LC(k), and strong LC(k) grammars.

CACM December, 1975

Hunt, H. B. III
Szymanski, T. G.
Ullman, J. D.

computational complexity, context-free grammars,
parsing, LR(k) grammars, NP-complete problems

4.12 5.23 5.25

CA751205 JB January 5, 1978  4:28 PM

2702	5	2702
2702	5	2702
2702	5	2702


************************

************************
Document:  CACM-2893.html
************************


Computers as an Innovation in American Local Governments

Computers and electronic data processing are
a major technological innovation in the operations 
of American local government. This paper establishes that
<B>there is</B> substantial variation among the larger 
local governments in the rate at which they adopt computer
technology, in the level of financial support 
they provide for EDP, and in the extensiveness and sophistication
of their automated applications.  The 
central question addressed is: What might explain the
differences between governments in the extent to 
which they adopt and use computers?  Hypotheses are
tested for several streams of explanatory factors, 
using data from more than 500 city and county governments.
 The findings identify certain local government 
milieus which are particularly conducive to higher levels
of computer innovation.  Somewhat unexpected 
findings reveal the significant impact of the distribution
of control over EDP decisions and the dominant 
political values within the government. Other important
factors include the measured need for computer 
applications and the presence of external funding support
for computing.  Finally, the paper suggests 
a framework for identifying the key determinants
of other technological innovations.

CACM December, 1977

Danziger, J. N.
Dutton, W. H.

innovation, technological innovation, computer utilization,
computer adoption, American local government, 
city government computers, county government computers.

2.0 2.45 2.49 2.9

CA771207 JB December 22, 1977  12:17 PM

2893	5	2893
2893	5	2893
2893	5	2893


************************

************************
Document:  CACM-0278.html
************************


A General Formulation of storage Allocation

Formalization of a general computer storage
allocation process is attempted.  With a given 
computer M is associated a fictitious computer M' essentially
identical to M except in respect to possession 
of unbounded primary storage.  Mappings of the total
storage set (internal and external) of M into the 
direct address set of M' are introduced.  A program
sequence P for M' is termed M-admissible (relative 
to a specific execution time period) if <B>there is</B> a mapping
underwhich P and its effective data referents 
are all located in the direct address set of M.  Storage
allocation is considered as a process of establishing 
for an arbitrary M' program  a sequence of mappings, a decoupling
of the program into M-admissible subprograms 
and a linking set of interludes.  An existence proof
in terms of a completely interpretive M program 
as indicated.  Some special cases are discussed.  Various
restrictions on generality of M' programs are 
considered under which more practical realization
of allocation processes becomes tractable.

CACM October, 1961

Roberts Jr., A. E.

CA611003 JB March 16, 1978  1:22 PM

278	5	278
278	5	278
278	5	278


************************

************************
Document:  CACM-3116.html
************************


Interference Detection Among Solids and Surfaces

In many industrial environments it is necessary to determine whether
r <B>there is</B> interference among components.  There are many potential
interference problems in products made up of assemblies of components 
and in product manufacturing and testing.  Typically, drawings
are used in an attempt to detect such unwanted interferences,
but the two-dimensional, static drafting medium does not always show
interferences among three-dimensional, moving parts.  This paper
 presents a computer representation for solids and surfaces and algorithms
which carry out interference checking among objects so represented.  
Objects are represented as polyhedra or as piecewise planar
surfaces.  Two types of interference checking are discussed:
detection of intersections among objects in fixed positions and detection
of collisions among objects moving along specified trajectories.

CACM January, 1979

Boyse, J.

Interference checking, intersection detection, collision detection, solid
representation, polyhedral representation, graphics, polygons, surfaces

3.2 8.2

CA790101 DH April 10, 1979  10:50 AM

2827	4	3116
3116	4	3116
2771	5	3116
3116	5	3116
3116	5	3116
3116	5	3116
3172	5	3116
3116	6	3116


************************

************************
Document:  CACM-1524.html
************************


A Stopping Criterion for Polynomial Root Finding

When searching for the <B>root of</B> a polynomial,
it is generally difficult to know just when to 
accept a number as an adequate approximation to the root.
 In this paper an algorithm is presented which 
allows one to terminate the iteration process on the
basis of calculated bounds for the roundoff error 
which occurs in evaluating the polynomial.  This stopping
criterion has been tested on numerous examples 
and has been found to serve as a satisfactory means
for accepting a complex number as a zero of a real 
polynomial.

CACM October, 1967

Adams, D. A.

CA671009 JB February 27, 1978  1:56 PM

1524	4	1524
1524	4	1524
1524	4	1524
1931	4	1524
2214	4	1524
2544	4	1524
1197	5	1524
1524	5	1524
1524	5	1524
1524	5	1524
311	5	1524
2544	5	1524
879	5	1524
1524	6	1524
311	6	1524
2214	6	1524


************************

************************
Document:  CACM-1869.html
************************


Block Structures, Indirect Addressing, and Garbage Collection

Programming languages have included explicit
or implicit block structures to provide a naming 
convenience for the programmer.  However, when indirect
addressing is used, as in SNOBOL, naming constraints 
may be introduced.  Two modifications to SNOBOL are described,
resulting in two desirable consequences: 
(1) naming constraints disappear even when <B>there is</B>
indirect addressing within function definitions; 
and (2) there is a significant saving in the number of
calls to the garbage collector, because some garbage 
is collected, at little expense, each time a function
returns to its calling program.  These modifications 
have been implemented as an extension to a SNOBOL dialect.

CACM July, 1969

Kain, R. Y.

block structures, indirect addressing,
garbage collection, local names, SNOBOL

4.22

CA690711 JB February 15, 1978  6:49 PM

1869	4	1869
1869	4	1869
2513	4	1869
2665	4	1869
2723	4	1869
2855	4	1869
3106	4	1869
1549	5	1869
1570	5	1869
1869	5	1869
1869	5	1869
1869	5	1869
2060	5	1869
2770	5	1869
1380	6	1869
1421	6	1869
1469	6	1869
1477	6	1869
1491	6	1869
1786	6	1869
210	6	1869
1869	6	1869
1869	6	1869
1973	6	1869
1992	6	1869
2018	6	1869
2109	6	1869
2110	6	1869
2673	6	1869


************************

************************
Document:  CACM-2598.html
************************


Extending the Information Theory Approach to Converting
Limited-Entry Decision Tables to Computer 
Programs

This paper modifies an earlier algorithm for
converting decision tables into flowcharts which 
minimize subsequent execution time when compiled into
a computer program.  The algorithms considered 
in this paper perform limited search and, accordingly,
do not necessarily result in globally optimal 
solutions.  However, the greater search effort needed
to obtain a globally optimal solution for complex 
decision tables is usually not justified by sufficient
savings in execution time.  There <B>is an</B> analogy 
between the problem of converting decision tables into
efficient flowcharts and the well-understood problem 
in information theory of noiseless coding.  The results
of the noiseless coding literature are used to 
explore the limitations of algorithms used to solve
the decision table problem.  The analogy between 
the two problems is also used to develop improvements
to the information algorithm in extending the depth 
of search under certain conditions and in proposing
additional conditions to be added to the decision 
table.  Finally, the information algorithm is compared
with an algorithm proposed in a recent paper by 
Verhelst.

CACM September, 1974

Shwayder, K.

coding, decision tables, flowcharting, information
theory, noiseless channel, sorting

3.50 5.31

CA740910 JB January 17, 1978  8:40 AM

1354	4	2598
2053	4	2598
2220	4	2598
2220	4	2598
2273	4	2598
2273	4	2598
2453	4	2598
2453	4	2598
2492	4	2598
2518	4	2598
2598	4	2598
2598	4	2598
2598	4	2598
2598	4	2598
2598	4	2598
2598	4	2598
2616	4	2598
2691	4	2598
2726	4	2598
2726	4	2598
2726	4	2598
2726	4	2598
2856	4	2598
2856	4	2598
2856	4	2598
3113	4	2598
3113	4	2598
1172	5	2598
1548	5	2598
2220	5	2598
2263	5	2598
2453	5	2598
2598	5	2598
2598	5	2598
2598	5	2598
2691	5	2598
2845	5	2598
2856	5	2598
3113	5	2598
1172	6	2598
1184	6	2598
1327	6	2598
1354	6	2598
1354	6	2598
2053	6	2598
2220	6	2598
2263	6	2598
2435	6	2598
2453	6	2598
2598	6	2598
2598	6	2598
2598	6	2598
2691	6	2598
2736	6	2598
2747	6	2598
2768	6	2598
2856	6	2598


************************

************************
Document:  CACM-1893.html
************************


Roots of Polynomials by a Root-Squaring
and Resultant routine (Algorithm 340 [C2])

CACM May, 1969

Noltemeier, A.

root finders, roots of polynomial equations, polynomial
zeros, root-squaring operations, Graeffe 
method, resultant procedure, subresultant procedure,
testing <B>of root</B>s, acceptance criteria

5.15

CA690517 JB February 17, 1978  2:29 PM

1893	5	1893
1893	5	1893
1893	5	1893


************************

************************
Document:  CACM-1014.html
************************


Machine Controls for Analysis of Variance

A major problem in using the analysis of variance,
as the number of factors increases, is the 
exponential rise in the number of interactions.  Even
though the experimenter may not be <B>interested in</B> 
these interactions it is impossible to ignore them in
most experimental designs because of the problem 
of getting error terms.  It is natural therefore to look
to the computer to handle the bulk of work involved 
in computing the interactions.  A program device
to get the computer to do this is described.

CACM August, 1964

Weldon, R. J.

CA640816 JB March 9, 1978  6:37 PM

1014	4	1014
912	5	1014
1014	5	1014
1014	5	1014
1014	5	1014


************************

************************
Document:  CACM-1433.html
************************


A Note on Linear Programming Algorithm Design: A Combinatorial Problem

As linear programming models grow bigger and
bigger in size, much actual data that must be 
memorized is often put on magnetic tape or disk, and
consequently <B>there is</B> an improportionality fast 
rise in the consumption of computer timeo cut down
this expense, an ever increasing effort is made 
to design more efficient algorithms.  This paper is
meant to support the effort.  It is attempted to 
find some characteristics of the way a pivot column
is found.  The number of repetitions of a certain 
transfer of data from tape to core memory is considered.
 After some simplification, the problem is restated 
in a general way.  The generating function of the probability
distribution and the moment generating 
function of the number of repetitions is found.  Asymptotic
formulas are given for the moments using 
a result from a paper of S. Narumi [1].  The results
may be applied to write very efficient routines 
that search for an extreme value in a table.  Formulas
provide a means of calculating the computer timings 
in this case.

CACM May, 1966

Roes, P. B. M.

CA660504 JB March 3, 1978  10:10 AM

1433	5	1433
1433	5	1433
1433	5	1433


************************



A Note on Linear Programming Algorithm Design: A Combinatorial Problem

As linear programming models grow bigger and
bigger in size, much actual data that must be 
memorized is often put on magnetic tape or disk, and
consequently there <B>is an</B> improportionality fast 
rise in the consumption of computer timeo cut down
this expense, an ever increasing effort is made 
to design more efficient algorithms.  This paper is
meant to support the effort.  It is attempted to 
find some characteristics of the way a pivot column
is found.  The number of repetitions of a certain 
transfer of data from tape to core memory is considered.
 After some simplification, the problem is restated 
in a general way.  The generating function of the probability
distribution and the moment generating 
function of the number of repetitions is found.  Asymptotic
formulas are given for the moments using 
a result from a paper of S. Narumi [1].  The results
may be applied to write very efficient routines 
that search for an extreme value in a table.  Formulas
provide a means of calculating the computer timings 
in this case.

CACM May, 1966

Roes, P. B. M.

CA660504 JB March 3, 1978  10:10 AM

1433	5	1433
1433	5	1433
1433	5	1433


************************

************************
Document:  CACM-1031.html
************************


A Note on Starting the Newton-Raphson Method

Determination of a suitable initial estimate
for a <B>root of</B> an equation f(x) = 0 by means of 
computing the roots of a sequence of related equations is described.

CACM July, 1964

Beyer, W. A.

CA640716 JB March 9, 1978  7:44 PM

1031	5	1031
1031	5	1031
1031	5	1031


************************

************************
Document:  CACM-2808.html
************************


The Lemniscate Constants

The lemniscate constants, and indeed some
of the methods used for actually computing them, 
have played an enormous part in the development of
mathematics.  An account is given here of some of 
the methods used-most of the derivations can be made
by elementary methods.  This material can be used 
for teaching purposes, and <B>there is</B> much relevant and
interesting historical material.  The acceleration 
methods developed for the purpose of evaluating
these constants are useful in other problems.

CACM January, 1975

Todd, J.

lemniscate, acceleration, elliptic functions, Euler transformation

1.2 5.0

CA750103 JB January 12, 1978  10:51 AM

2808	5	2808
2808	5	2808
2808	5	2808


************************

************************
Document:  CACM-1454.html
************************


A Simple User-Oriented Compiler Source Language
for Programming Automatic Test Equipment

For the nonprogrammer, difficulty in using
a language increases rapidly with the number of 
nonproblem-oriented conventions.  A simple language, even
if inelegant, which considers the user's background 
as part of the problem may be more effective than a source
language containing subtle and more powerful 
capabilities.  The language described in this paper is
used to write computer programs which test electronic 
equipment.  Because this testing process contains few
complex ideas, <B>there is</B> little need for the elegance 
and redundancy of a highly syntax-oriented language.
 A simple and direct language will suffice for the 
problem.  The eventual users of this language are military
depot personnel who cannot he expected to 
have computer programming skill or significant programming
training.  For this nonprogramming-oriented 
user, it was essential to create a language using familiar
engineering statements; programming-oriented 
conventions would have unnecessarily complicated his task.

CACM April, 1966

Scheff, B. H.

CA660401 JB March 3, 1978  11:09 AM

1454	5	1454
1454	5	1454
1454	5	1454


************************

************************
Document:  CACM-1867.html
************************


On the Expected Lengths of Sequences Generated
in Sorting by Replacement Selecting

In the replacement-selecting technique of sorting,
one is <B>interested in</B> the ratio L(j) of the 
expected length of the j-th sequence generated by the
technique to the number of memory cells used.  
Using complex-variable theory, it is shown that L(j)
-> 2 and that, asymptotically, the average interval 
between sign changes of L(j)-2 is 2.6662.

CACM July, 1969

Hooker, W. W.

replacement selecting, sorting, sequence lengths,
asymptotic expected length, recursion relation, 
generating function, meromorphic function

3.74 5.31

CA690713 JB February 15, 1978  6:37 PM

1867	4	1867
2272	4	1867
1638	5	1867
1867	5	1867
1867	5	1867
1867	5	1867


************************

************************
Document:  CACM-3058.html
************************


Jump Searching: A Fast Sequential Search Technique

When sequential file structures must be used
and binary searching is not feasible, jump searching 
becomes an appealing alternative.  This paper explores
variants of the classic jump searching scheme 
where the optimum jump size is the square <B>root of</B> the
number of records.  Multiple level and variable 
size jump strategies are explored, appropriate applications
are discussed and performance is evaluated.

CACM October, 1978

Shneiderman, B.

Jump searching, sequential files, file management,
search strategies, database structures, index 
searching

3.74 4.34

CA781003 DH January 29, 1979  6:15 PM

3058	4	3058
3063	4	3058
2978	5	3058
3058	5	3058
3058	5	3058
3058	5	3058


************************

************************
Document:  CACM-1049.html
************************


Numerical Solution of Nonlinear Two-Point
Boundary Problems by Finite Difference Methods

Solution of nonlinear two-point boundary-value
problems is often an extremely difficult task. 
 Quite apart from questions of reality and uniqueness,
<B>there is</B> no established numerical technique for 
this problem.  At present, shooting techniques are the
easiest method of attacking these problems.  When 
these fail, the more difficult method of finite differences
can often be used to obtain a solution.  
This paper gives examples and discusses the finite difference
method for non-linear two-point boundary-value 
problems.

CACM June, 1964

Holt, J. F.

CA640618 JB March 9, 1978  9:07 PM

1049	4	1049
1049	5	1049
1049	5	1049
1049	5	1049
416	5	1049


************************

