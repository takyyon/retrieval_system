Snippets for the query:  I am interested in hidden-line and hidden-surface algorithms for cylinders, toroids, spheres, and cones. This is a rather specialized topic in computer graphics.
************************
Total Hits:  48
************************

************************
Document:  CACM-1974.html
************************


NEATER2: A PL/I Source Statement Reformatter

NEATER2 accepts a PL/I source program and operates on it to produce
a reformatted version.  When in the LOGICAL mode, NEATER2 indicates
the logical structure of the source program in the indentation
pattern of its output.  Logic errors discovered through NEATER2
logical analys<B>is a</B>re discovered much more economically than is possible
through compilation and trial runs.  A number of options are
available to give the user full control over the output format and
to maximize the utility of NEATER2 as an aid during the early
stages of development of a PL/I source deck.  One option, USAGE, causes
NEATER2 to insert into each logical unit of coding a statement
which will case the number of times each one is executed to be recorded
during execution.  This feature is expected to provide a
major aid in optimization of PL/I programs.

CACM November, 1970

Conrow, K.
Smith, R. G.

logical analysis of PL/I source, reformatting of PL/I
source, documentation aid, execution time usage data

1.52 4.12 4.19 4.42

CA701104 JB February 10, 1978  8:40 AM

1974	5	1974
1974	5	1974
1974	5	1974
2971	5	1974
1835	6	1974
1974	6	1974
2534	6	1974


************************

************************
Document:  CACM-1385.html
************************


Computer Technology in Communist China, 1956-1965

Based on information from translations of Communist
Chinese news items and periodical literature 
for the 1965 period, computer technology in China is
reviewed under the following headings: (1) initial 
planning, organization and educational aspects of computer
technology and automation; (2) machine development 
progress: two major specific machines in 1958-59, with
Soviet aid; a vacuum in 1960-64 due to the withdrawal 
of Soviet aid; then presumably all-Chinese-made machines
from 1965 to the present; (3) computer applications; 
(4) the trend of automation: control of production processes
rather than data processing; and (5) the 
"Yun Ch'ou Hsueh" (Science of Operation and Programming)
campaign of 1958-60, during which an attempt 
was made to bring concepts such as linear programming
to ordinary Chinese workers and peasants.  Communist 
China <B>is a</B>djudged to have a marginal computer capability,
with most of its machines probably being of 
a binary nature; however, a turning point may have been reached in mid-1965.

CACM September, 1966

Audette, D. G.

CA660901 JB March 2, 1978  6:59 PM

1385	5	1385
1385	5	1385
1385	5	1385


************************

************************
Document:  CACM-2913.html
************************


The Aliasing Problem in Computer-Generated Shaded Images

Certain defects, such as jagged edges and
disappearing detail, have long been an annoyance 
in digitally generated shaded images.  Although increasing
the resolution or defocusing the display can 
attenuate them, an understanding of these defects leads
to more effective methods.  This paper explains 
the observed defects in terms of the aliasing phenomenon
inherent in sampled signals and discusses prefiltering 
as a recognized cure.  A method for evaluating filters
is presented, the application of prefiltering 
to <B>hidden-surface algorithms</B> is discussed, and an implementation
of a filtering tiler is shown accompanied 
by examples of its effectiveness.

CACM November, 1977

Crow, F. C.

aliasing, computer graphics, convolutional
filtering, hidden-surface removal, sampling

8.2

CA771103 JB December 27, 1977  7:56 AM

2816	4	2913
2828	4	2913
2827	4	2913
2913	4	2913
3047	4	2913
2751	5	2913
2913	5	2913
2913	5	2913
2913	5	2913


************************

************************
Document:  CACM-1886.html
************************


Generation of Optimal Code for Expressions via Factorization

Given a set of expressions which are to be
compiled, methods are presented for increasing the 
efficiency of the object code produced by first factoring
the expressions, i.e. finding a set of subexpressions 
each of which occurs in two or more other expressions
or subexpressions.  Once all the factors have been 
ascertained, a sequencing procedure <B>is a</B>pplied which
orders the factors and expressions such that all 
information is computed in the correct sequence and factors
need be retained in memory a minimal amount 
of time.  An assignment algorithm is then executed in
order to minimize the total number of temporary 
storage cells required to hold the results of evaluating
the factors.  In order to make these techniques 
computationally feasible, heuristic procedures are
applied, and hence global optimal results are not 
necessarily generated.  The factorization algorithms
are also applicable to the problem of factoring 
Boolean switching expressions and of factoring polynomials
encountered in symbol manipulating systems.

CACM June, 1969

Breuer, M. A.

factorization algorithms, code optimization, sequencing
of operations, detection of common subexpressions, 
factorization of Boolean expressions

4.12 6.1

CA690607JB February 17, 1978  10:57 AM

1030	4	1886
1886	4	1886
1939	4	1886
1886	5	1886
1886	5	1886
1886	5	1886
2175	5	1886
678	5	1886
1551	6	1886
1613	6	1886
1886	6	1886


************************

************************
Document:  CACM-1623.html
************************


An Application of FORMAC

A nonlinear circuit analysis problem is stated
and the way in which it was solved using FORMAC 
is indicated.  The solution of the problem using FORMAC
was notable since several other methods that 
were tried failed.  The problem is straightforward (although
untenable by hand) but nevertheless involved 
an elaborate use of the FORMAC language.  The program
was fairly large and utilized practically every 
command.  In particular, it made extensive use of the
PART command.  Several tricks were necessary in 
order to circumvent some of the shortcomings of the
FORMAC system.  This paper is more concerned with 
the use of programming techniques in FORMAC than with
the actual engineering problem, although readers 
may be <B>interested in</B> the problem because it is stated
in a general (mathematical) sense and could be 
of interest in areas other than circuit analysis.

CACM March, 1967

Neidleman, L. D.

CA670306 JB February 28, 1978  1:27 PM

1623	5	1623
1623	5	1623
1623	5	1623


************************

************************
Document:  CACM-3032.html
************************


Reverse Path Forwarding of Broadcast Packets

A broadcast packet is for delivery to all
nodes of a network.  Algorithms for accomplishing 
this delivery through a store-and-forward packet switching
 computer network include (1) transmission 
of separately addressed packets. (2) multidestination
addressing, (3) hot potato forwarding,(4) spanning 
tree forwarding, and (5) source based forwarding.  To
this list of algorithms we add (6) reverse path 
forwarding, a broadcast routing method which exploits
routing procedures and data structures already 
available for packet switching.  Reverse path forwarding
<B>is a</B> practical algorithm for broadcast routing 
 in store-and-forward packet switching computer networks.
 The algorithm is described as being practical 
 because it is not optimal according to metrics developed
for its analysis in this paper, and also because 
it can be implemented in existing networks with less complexity
than that required for the known alternatives. 

CACM December, 1978

Dalal, Y.
Metcalfe, R.

Reverse path forwarding, broadcast packets, routing,
computer networks, store-and-forward packet 
switching, broadcast protocols

3.81 4.32 5.32

CA781207 DH  January 18, 1979  3:10 PM

3032	4	3032
3119	4	3032
2849	5	3032
3032	5	3032
3032	5	3032
3032	5	3032


************************

************************
Document:  CACM-3066.html
************************


A Controlled Experiment in Program Testing
and Code Walkthroughs/Inspections

This paper describes an experiment in program
testing, employing 59 highly experienced data 
processing professionals using seven methods to test
a small PL/I program.  The results show that the 
popular code walk through/inspection method was as effective
as other computer-based methods in finding 
errors and that the most effective methods (in terms of
errors found and cost) employed pairs of subjects 
who tested the program independently and then pooled
their findings.  The study also shows that there 
<B>is a</B> tremendous amount of variability among subjects
and that the ability to detect certain types of 
errors varies from method to method.

CACM September, 1978

Myers, G.

Software reliability, program verification, debugging,
testing, code walkthroughs, code inspections, 
personnel selection

4.6

CA780906 DH February 5, 1979  10:47 AM

3066	5	3066
3066	5	3066
3066	5	3066


************************

************************
Document:  CACM-1159.html
************************


Machine Independence: Its Technology and Economics

A survey is offered of techniques for transferring
programs, and especially compilers, from 
one computer to another.  Of the methods examined, the
"bootstrap" technique is singled out for detailed 
discussion, with emphasis on its economics. The considerations
that determine the applicability of bootstrapping 
in any specific case are discussed, and an attempt
is made to assign appropriate qualitative weights 
to them.  Finally, reasons are given for believing that the
machine-independence problem is being substantially 
diminished by current trends <B>in computer</B> design, and
that it is this process of convergence in hardware 
design rather than any foreseeable software developments
that will lead to its satisfactory resolution.

CACM December, 1965

Halpern, M. I.

CA651210 JB March 6, 1978  3:44 PM

1159	4	1159
1988	4	1159
381	4	1159
1159	5	1159
1159	5	1159
1159	5	1159
14	5	1159


************************

************************
Document:  CACM-3038.html
************************


Using Encryption for Authentication in Large Networks of Computers

Use of encryption to achieve authenticated
communication <B>in computer</B> networks is discussed. 
 Example protocols are presented for the establishment
of authenticated connections, for the management 
of authenticated mail, and for signature verification
and document integrity guarantee.  Both conventional 
and public-key encryption algorithms are considered as the basis for protocols.

CACM December, 1978

Needham, R.
Schroeder, M.

Encryption, security, authentication, networks, protocols,
public-key cryptosystems, data encryption 
standard

3.81 4.31 4.35

CA781201 DH January 22, 1979  11:18 AM

3038	4	3038
3111	4	3038
3177	4	3038
3021	5	3038
3038	5	3038
3038	5	3038
3038	5	3038
3158	5	3038
2436	6	3038
3038	6	3038
3111	6	3038


************************

************************
Document:  CACM-2817.html
************************


The Notions of Consistency and Predicate Locks in a Database System

In database systems, users access shared data
under the assumption that the data satisfies 
certain consistency constraints.  This paper defines the
concepts of transaction, consistency and schedule 
and shows that consistency requires that a transaction
cannot request new locks after releasing a lock. 
 Then it <B>is a</B>rgued that a transaction needs to lock a logical
rather than a physical subset of the database. 
 These subsets may be specified by predicates.  An
implementation of predicate locks which satisfies 
the consistency condition is suggested.

CACM November, 1976

Eswarran, K..
Gray, J..
Lorie, R..
Traiger, I. L.

consistency, lock, database, concurrency, transaction

4.32 4.33

CA761106 JB January 3, 1978  3:14 PM

2155	4	2817
2406	4	2817
2710	4	2817
2715	4	2817
2716	4	2817
2717	4	2817
2718	4	2817
2765	4	2817
2817	4	2817
2888	4	2817
2901	4	2817
2957	4	2817
2959	4	2817
2965	4	2817
3087	4	2817
3154	4	2817
2046	5	2817
2817	5	2817
2817	5	2817
2817	5	2817
3148	5	2817
1860	6	2817
2817	6	2817
2865	6	2817
2939	6	2817
3073	6	2817


************************

************************
Document:  CACM-2918.html
************************


Multiprocessor Memory Organization and Memory Interference

The structure of shared memory in a multiprocessor
computer system is examined with particular 
attention to nonin terleaved memory.  Alternative memory
organizations are compared and it is shown that 
a home memory organization, in which each processor
<B>is a</B>ssociated with one or more memories in which 
its address space is concentrated, is quite effective in
reducing memory in terference.  Home memory organization 
is shown to be particularly suited to certain specialized
computation problems as well as to possess 
advantages in terms of in terference and reliability for
general purpose computation.  Results for in terleaved 
memory are drawn from previous work and are used for
comparison.  Trace-driven simulations are used to 
verify the conclusions of the analysis.

CACM October, 1977

Smith, A. J.

memory in terference, interleaving, multiprocessing,
trace-driven simulation, queueing theory, shared 
memory

4.30 4.32 6.34

CA771008 JB December 27, 1977  10:28 AM

2918	4	2918
3119	4	2918
2859	5	2918
2918	5	2918
2918	5	2918
2918	5	2918


************************

************************
Document:  CACM-1727.html
************************


One Way of Estimating Frequencies of Jumps in a Program

For the segmentation of a program it is useful
to have a reasonable estimation of the values 
of S(ij), where S(ij) is the mean value of the number
of jumps from the i-th instruction on to the j-th 
instruction in the run time.  In the cases where the
S(ij) are estimated directly, the structure of the 
whole program must be generally taken into account;
therefore it is very difficult for the programmer 
and/or the translator to obtain a good estimation of
the S(ij).  It is easier to estimate not S(ij) but 
the quantities P(ij)=S(ij)*C(i)/SUM[S(ij), j=1,N], where
C(i) <B>is a</B>n arbitrary positive constant for each 
i.  Although the P(ij) are, for each i, proportional to
S(ij), the estimation of P(ij) is easier, because 
we must estimate only the "probabilities" of events
where instruction i is executed after instruction 
I(i).  This estimation can often be done without considering
the structure of the whole program.  In 
the first part of the paper, using the theory of the
Markov chains, an algorithm for the computation 
of the S(ij) from the P(ij) is found, and some ways
of obtaining estimates of the P(ij) are given.  In 
the second part a variant of this algorithm is derived,
avoiding the necessity of computation involving 
large matrices.

CACM July, 1968

Kral, J.

object program reduction, supervisor calls decreasing,
jump frequencies estimation, control transfers 
estimation, optimal program segmentation, Markov chain
program correspondence, program graph, one-entry 
subgraph, locally estimated jump frequencies, supervisor
overhead decreasing, program segmentation algorithm, 
jump frequencies, program segmentation problem

4.11 4.19 4.39 4.49

CA680702 JB February 22, 1978  3:05 PM

1727	5	1727
1727	5	1727
1727	5	1727


************************

************************
Document:  CACM-1924.html
************************


Organizing Matrices and Matrix Operations for Paged Memory Systems

Matrix representations and operations are examined
for the purpose of minimizing the page faulting 
occurring in a paged memory system.  It is shown that
carefully designed matrix algorithms can lead to 
enormous savings in the number of page faults occurring
when only a small part of the total matrix can 
be in main memory at one time.  Examination of addition,
multiplication, and inversion algorithms shows 
that a partitioned matrix representation (i.e. one submatrix
or partition per page) in most cases induced 
fewer page faults than a row-by-row representation.
 The number of page-pulls required by these matrix 
manipulation algorithms <B>is a</B>lso studied as a function
of the number of pages of main memory available 
to the algorithm.

CACM March, 1969

McKellar, A. C.
Coffman Jr., E. G.

matrix algorithms, array processing, paging algorithms,
paged memory systems, virtual memory systems, 
array storage allocation, storage allocation

4.12 4.39 5.14

CA690303 JB February 20, 1978  9:35 AM

1892	4	1924
1924	4	1924
2095	4	1924
2218	4	1924
2297	4	1924
2374	4	1924
2526	4	1924
2667	4	1924
2668	4	1924
2862	4	1924
2863	4	1924
1728	5	1924
1924	5	1924
1924	5	1924
1924	5	1924
2365	5	1924
2582	5	1924
3152	5	1924
987	6	1924
1751	6	1924
1754	6	1924
1924	6	1924
1924	6	1924
1924	6	1924
2017	6	1924
2130	6	1924
2362	6	1924
2365	6	1924


************************

************************
Document:  CACM-1253.html
************************


QUIKSCRIPT-A SIMSCRIPT- Like Language for the G-20

QUIKSCRIPT <B>is a</B> simulation language based on
SIMSCRIPT and programmed entirely in an algebraic 
language, 20-GATE.  The QUIKSCRIPT language, its internal
implementation, and major differences between 
QUIKSCRIPT and SIMSCRIPT are presented.  This paper is
not a programming guide to the language, but rather 
an attempt to present its flavor.  A brief description of
SIMSCRIPT is included, as is a sufficient description 
of 20-GATE to render this material understandable
to the reader familiar with algebraic languages.

CACM June, 1965

Tonge, F. M.
Keller, P.
Newell, A.

CA650602 JB March 7, 1978  12:45 PM

1253	5	1253
1253	5	1253
1253	5	1253


************************

************************
Document:  CACM-2924.html
************************


An Interactive Computer Graphics Approach to Surface Representation

An in teractive computer graphics method has been
developed for the rapid generation of arbitrary 
shaped three-dimensional surfaces.  The method <B>is a</B> synthesis
of spline theory and algorithms, an in teractive 
means for man-machine communication, and software for
static or dynamic graphics display.  The basic 
technique employed is a modified lofting method on
which sectional curves are represented by uniform 
B-splines and the surface is in terpolated between sections
by Cardinal splines.  Among the features of 
this method are algorithms which enable in teractive
modification of the B-spline representation of the 
sectional curves.  At all stages of the process, the
spatial information is graphically displayed to 
the user.  Complex surfaces can be created by the combination
of a number of shapes that have been separately 
generated and automatically joined.  The system has been
successfully in terfaced to a variety of analytical 
routines for structural, medical and graphical applications.

CACM October, 1977

Wu, Sheng-Chuan
Abel, J. F.
Greenberg, D. P.

computer graphics, three-dimensional surface representation,
splines, lofting,finite element input 
methods

3.20 3.23 3.34 8.1 8.2

CA771002 JB December 27, 1977  11:53 AM

2924	5	2924
2924	5	2924
2924	5	2924


************************

************************
Document:  CACM-2535.html
************************


The Effects of Multiplexing on a Computer-Communications System

A study is made of the way in which asynchronous
time division multiplexing changes the stochastic 
nature of the arrival process from a user to the computer
and, consequently, affects the performance 
of a time-shared computer-communications system.  It is
concluded that while, for certain values of system 
parameters, there is noticeable improvement in the
performance of the computer (model), in the sense 
that time-shared scheduling delays are reduced, these
improvements are offset by the transmission delays 
imposed by multiplexing so that there may be little or
no change in the computer-communications system 
performance.  Analytical and simulation results are
based on the model of the computer-communications 
system being an M/D/1 queue (the multiplexor) in tandem
with a single exponential server (the computer). 
 Analytical results include a general description of the
output process of an M/D/1 queue and the conditions 
under which this output process <B>is a</B>pproximately Poisson.

CACM March, 1973

Pack, C. D.

computer communications, time-sharing, multiplexing,
scheduling algorithms, operating systems

3.80 3.81 6.20

CA730304 JB January 24, 1978  11:13 AM

2535	5	2535
2535	5	2535
2535	5	2535


************************

************************
Document:  CACM-3090.html
************************


Automated Welfare Client-Tracking and Service
Integration: The Political Economy of Computing

The impacts of an automated client-tracking
system on the clients, caseworkers, administrators, 
and operations of the welfare agencies that use it are
reported.  The major impact of this system was 
to enhance the administrative  attractiveness of the
using agencies in the eyes of funders rather than 
to increase their internal administrative efficiency. 
This impact <B>is a</B> joint product of both the technical 
features of the computer-based system and of the organizational
demands placed upon different agencies, 
administrators, and caseworkers.  It illustrates the
way "successful" automated information systems fit 
the political economies of the groups that use them.    

CACM June, 1978

Kling, R.

Social impacts of computing, organizational impacts
of computing, management information systems, 
sociology of computing, information systems and
service integration, urban information systems

2.11 3.53

CA780607 DH February 12, 1979  11:01 AM

3090	5	3090
3090	5	3090
3090	5	3090
3117	5	3090
3090	6	3090


************************

************************
Document:  CACM-2273.html
************************


Conversion of Decision Tables By Rule Mask Method Without Rule Mask

Two <B>algorithms for</B> generating computer programs
from decision tables are described.  The algorithms 
allow handling limited entry, extended entry, and mixed
entry tables.  The algorithms are based on the 
rule mask method but need not have the masks at execution
time.  They perform the logical operations 
immediately rather than at the end of the interpreting
process.  Execution time can be considerably reduced 
by instantly marking rules which are not applicable (Algorithms
1 and 2) or conditions which are already 
tested (Algorithm 2).  The new algorithms combine to a
certain degree the advantages of mask methods with 
those of tree methods.

CACM October, 1972

Dathe, G.

decision tables, rule mask, rule mask method,
rule mask technique, program generator

3.50 4.12 4.19 4.29

CA721005 JB January 27, 1978  3:02 PM

1354	4	2273
1354	4	2273
1354	4	2273
1488	4	2273
1488	4	2273
1684	4	2273
1994	4	2273
2053	4	2273
2053	4	2273
2053	4	2273
2053	4	2273
2220	4	2273
2220	4	2273
2220	4	2273
2220	4	2273
2221	4	2273
2273	4	2273
2273	4	2273
2273	4	2273
2273	4	2273
2273	4	2273
2273	4	2273
2453	4	2273
2453	4	2273
2453	4	2273
2453	4	2273
2517	4	2273
2598	4	2273
2598	4	2273
2726	4	2273
2726	4	2273
2726	4	2273
2726	4	2273
2856	4	2273
2856	4	2273
2856	4	2273
2856	4	2273
2856	4	2273
3034	4	2273
3113	4	2273
1172	5	2273
1237	5	2273
1327	5	2273
1354	5	2273
2053	5	2273
2220	5	2273
2273	5	2273
2273	5	2273
2273	5	2273


************************

************************
Document:  CACM-0595.html
************************


Guides to Teaching COBOL

The teaching of COBOL can be divided into
three main subject areas.  They are the syntax of 
COBOL, the use of such syntax in solving any given problem,
and programming concepts.  It is generally 
accepted that some knowledge of the hardware and computer
logic must be possessed by the programmer. 
 The teaching problem arises in determining how thoroughly
a student must know the hardware and logic 
for that computer for which he will write COBOL programs.
 Unfortunately, historical data concerning 
students' programming proficiency <B>is a</B>lmost non-existent
and, at best, difficult to measure.  How then 
might we approach solving this problem?

CACM May, 1962

Greene, I.

CA620510 JB March 20, 1978  1:44 PM

595	5	595
595	5	595
595	5	595


************************

************************
Document:  CACM-2389.html
************************


Preliminary Report on a System for General Space Planning

A computer language and a set of programs within
that language are described which allow the 
formulating and solving of a class of space planning
problems.  The language <B>is a</B>n extension of Algol 
and includes means to represent spaces and objects, to manipulate
them, and to test the resulting arrangements 
according to a variety of constraints.  The algorithms
used to solve problems expressed in this language 
rely on heuristic programming.  Both the language
and the search algorithms are detailed.

CACM February, 1972

Eastman, C. M.

automated design, architecture, heuristic programs, space planning

3.20 3.40 3.64 3.66

CA720202 JB January 31, 1978  4:35 PM

2389	4	2389
2078	5	2389
2389	5	2389
2389	5	2389
2389	5	2389


************************

************************
Document:  CACM-1742.html
************************


On the Design of Display Processors

The flexibility and power needed in the data
channel for a computer display are considered. 
 To work efficiently, such a channel must have a sufficient number
of instructions that it is best understood 
as a small processor rather than a powerful channel.
 As it was found that successive improvements to 
the display processor design lie on a circular path, by
making improvements one can return to the original 
simple design plus one new general purpose computer for
each trip around.  The degree of physical separation 
between display and parent computer <B>is a</B> key factor in display processor design.

CACM June, 1968

Myer, T. H.

display processor design, display system, computer
graphics, graphic terminal, displays, graphics, 
display generator, display channel, display programming,
graphical interaction, remote displays

2.44 6.22 6.29 6.35

CA680603 JB February 22, 1978  4:41 PM

1742	5	1742
1742	5	1742
1742	5	1742


************************

************************
Document:  CACM-3152.html
************************


Storage Reorganization Techniques for
Matrix Computation in a Paging Environment

In order to multiply matrices while minimizing
the number of page fetches required, it is often more efficient to
reorganize the data into submatrix form and to use block multiplication 
rather than to use the best known algorithms which leave the
matrices stored in row-(or column-)oriented form.  An efficient
method for accomplishing this reorganization is given.  Th<B>is a</B>lso
makes possible the derivation of an asymptotically better bound
for multiplication of matrices given in row-oriented form by adapting
the technique of Strassen to the reorganized data.  The reorganization/block 
multiplication scheme is shown to be advantageous for
matrices and pages of realistic size; the Strassen adaptation is
not.  The former scheme is also shown to be advantageous even if
the transpose of one of the matrices is available at no additional cost.

CACM July, 1979

Fischer, P.
Probert, R.

Matrix multiplication, paging, virtual memory,
data reorganization, pagination, transpose.

4.34 5.14 5.25

CA790703 DH August 22, 1979  2:29 PM

2365	4	3152
2362	4	3152
2582	4	3152
3152	4	3152
3152	4	3152
1924	5	3152
2365	5	3152
3152	5	3152
3152	5	3152
3152	5	3152


************************

************************
Document:  CACM-2718.html
************************


A Preliminary System for the Design of DBTG Data Structures

The functional approach to database design is
introduced.  In th<B>is a</B>pproach the goal of design 
is to derive a data structure which is capable of supporting
a set of anticipated queries rather than 
a structure which "models the business" in some other
way. An operational computer program is described 
which utilizers the functional approach to design data
structures conforming to the Data Base Task Group 
specifications.  The automatic programming technology
utilized by this program, although typically used 
to generate procedure, is here used to generate declaratives.

CACM October, 1975

Gerritsen, R.

network model of databases, Data Base Task Group, database
design, data structure, automatic programming, 
translation, nonprocedural languages

3.5 3.64 3.7 4.2 5.23

CA751001 JB January 6, 1978  2:02 PM

2155	4	2718
2406	4	2718
2710	4	2718
2715	4	2718
2716	4	2718
2717	4	2718
2718	4	2718
2765	4	2718
2817	4	2718
2888	4	2718
2901	4	2718
2957	4	2718
2959	4	2718
2965	4	2718
3087	4	2718
3154	4	2718
2046	5	2718
2718	5	2718
2718	5	2718
2718	5	2718
3147	5	2718
2718	6	2718


************************

************************
Document:  CACM-2631.html
************************


An Information-Theoretic Approach to
Text Searching in Direct Access Systems

Using direct access computer files of bibliographic
information, an attempt is made to overcome 
one of the problems often associated with information
retrieval, namely, the maintenance and use of large 
dictionaries, the greater part of which is used only
infrequently.  A novel method is presented, which 
maps the hyperbolic frequency distribution.  <B>This is</B>
more suited to implementation on storage devices. 
 This method treats text as a string of characters rather
than words bounded by spaces, and chooses subsets 
of strings such that their frequencies of occurrence are
more even than those of word types.  The members 
of this subset are then used as index keys for retrieval.
The rectangular distribution of key frequencies 
results in a much simplified file organization
and promises considerable cost advantages.

CACM June, 1974

Barton, I. J.
Creasey, S. E.
Lynch, M. F.
Snell, M. J.

text searching, information theory, file organization,
direct access, information retrieval, character 
string, bit vector

3.42 3.70 3.73 3.74 5.6

CA740615 JB January 17, 1978  2:07 PM

2532	4	2631
2631	4	2631
2631	4	2631
2746	4	2631
3001	4	2631
2139	5	2631
2532	5	2631
2631	5	2631
2631	5	2631
2631	5	2631


************************

************************
Document:  CACM-2146.html
************************


Optimizing the Polyphase Sort

Various dispersion <B>algorithms for</B> the polyphase
sorting procedure are examinedhe optimum 
algorithm based on minimizing the total number of unit
strings read is displayed.  The logic of this 
algorithm is rather complicated; hence, several other
new dispersion algorithms with more straightforward 
logic are presented.  Of the simple dispersion algorithms
discussed, the  Horizontal is best.  It does 
approximately one-fourth to one and one-half percent
less reading and writing than most algorithms in 
use today.  An additional two and one-fourth to three
percent improvement can be achieved by utilizing 
the Modified Optimum Algorithm.  This algorithm is relatively
straightforward, but it requires a fairly 
close estimate of the total number of unit strings before the dispersion begins.

CACM November, 1971

Shell, D. L.

sorting, polyphase sorting, dispersion algorithms,
optimum dispersion algorithm, repetition operator

5.31

CA711103 JB February 2, 1978  11:39 AM

1117	4	2146
1117	4	2146
2017	4	2146
2017	4	2146
2017	4	2146
2146	4	2146
2146	4	2146
2146	4	2146
2146	4	2146
479	4	2146
677	4	2146
860	4	2146
861	4	2146
862	4	2146
863	4	2146
299	5	2146
2146	5	2146
2146	5	2146
2146	5	2146
862	5	2146
863	5	2146
861	5	2146


************************



Optimizing the Polyphase Sort

Various dispersion algorithms for the polyphase
sorting procedure are examinedhe optimum 
algorithm based on minimizing the total number of unit
strings read is displayed.  The logic of this 
algorithm is rather complicated; hence, several other
new dispersion algorithms with more straightforward 
logic are presented.  Of the simple dispersion algorithms
discussed, the  Horizontal is best.  It does 
approximately one-fourth to one and one-half percent
less reading and writing than most algorithms in 
use today.  An additional two and one-fourth to three
percent improvement can be achieved by utilizing 
the Modified Optimum Algorithm.  Th<B>is a</B>lgorithm is relatively
straightforward, but it requires a fairly 
close estimate of the total number of unit strings before the dispersion begins.

CACM November, 1971

Shell, D. L.

sorting, polyphase sorting, dispersion algorithms,
optimum dispersion algorithm, repetition operator

5.31

CA711103 JB February 2, 1978  11:39 AM

1117	4	2146
1117	4	2146
2017	4	2146
2017	4	2146
2017	4	2146
2146	4	2146
2146	4	2146
2146	4	2146
2146	4	2146
479	4	2146
677	4	2146
860	4	2146
861	4	2146
862	4	2146
863	4	2146
299	5	2146
2146	5	2146
2146	5	2146
2146	5	2146
862	5	2146
863	5	2146
861	5	2146


************************

************************
Document:  CACM-1735.html
************************


A Futures Market in Computer time

An auction method is described for allocating
computer time that allows the price of computer 
time to fluctuate with the demand and the relative priority
of users to be controlled so that more important 
projects get better access.  Th<B>is a</B>uction is free of the
periodic fluctuation in computer use often associated 
with monthly time allocation schemes.

CACM June, 1968

Sutherland, I. E.

computer scheduling, auction, time allocation, operating efficiency

2.40

CA680610 JB February 22, 1978  4:04 PM

1735	5	1735
1735	5	1735
1735	5	1735
2020	5	1735
1735	6	1735


************************



A Futures Market in Computer time

An auction method is described for allocating
computer time that allows the price of computer 
time to fluctuate with the demand and the relative priority
of users to be controlled so that more important 
projects get better access.  This auction is free of the
periodic fluctuation <B>in computer</B> use often associated 
with monthly time allocation schemes.

CACM June, 1968

Sutherland, I. E.

computer scheduling, auction, time allocation, operating efficiency

2.40

CA680610 JB February 22, 1978  4:04 PM

1735	5	1735
1735	5	1735
1735	5	1735
2020	5	1735
1735	6	1735


************************

************************
Document:  CACM-1764.html
************************


Panel Discussion on Computer Appreciation

Session 19 of the ACM 20 th Anniversary Conference
on August 31, 1967, was entitled Education, 
Design Experiments, and Computer Appreciation.  Its second
half consisted of a panel discussion on computer 
appreciation, organized and chaired by Elliot I. Organick.
 The four panelists were Charles H. Davidson, 
Bernard A. Galler, Richard, W. Hamming, and Alan J. Perlis.
 After making prepared statements, the panelists 
were joined in discussion by Andries van Dam and Arthur
Bohn, who had presented papers in the first 
half.  <B>This is</B> a transcript of the panel discussion,
condensed by Dr. Organick and edited by him and 
the panelists.  Some remarks referred to papers by van
Dam and Kahn or to the discussion during the first 
half of the session.  Pertinent papers are included in the references.

CACM April, 1968

Organick, E. I.

computer appreciation, students' liberal arts courses,
survey courses, beginning programming, course 
content, computer courses dropout rates, college versus
precollege, teaching and social responsibility

1.1 1.51 1.52

CA680406 JB February 23, 1978  10:34 AM

1764	5	1764
1764	5	1764
1764	5	1764


************************



Panel Discussion on Computer Appreciation

Session 19 of the ACM 20 th Anniversary Conference
on August 31, 1967, was entitled Education, 
Design Experiments, and Computer Appreciation.  Its second
half consisted of a panel discussion on computer 
appreciation, organized and chaired by Elliot I. Organick.
 The four panelists were Charles H. Davidson, 
Bernard A. Galler, Richard, W. Hamming, and Alan J. Perlis.
 After making prepared statements, the panelists 
were joined in discussion by Andries van Dam and Arthur
Bohn, who had presented papers in the first 
half.  This <B>is a</B> transcript of the panel discussion,
condensed by Dr. Organick and edited by him and 
the panelists.  Some remarks referred to papers by van
Dam and Kahn or to the discussion during the first 
half of the session.  Pertinent papers are included in the references.

CACM April, 1968

Organick, E. I.

computer appreciation, students' liberal arts courses,
survey courses, beginning programming, course 
content, computer courses dropout rates, college versus
precollege, teaching and social responsibility

1.1 1.51 1.52

CA680406 JB February 23, 1978  10:34 AM

1764	5	1764
1764	5	1764
1764	5	1764


************************

************************
Document:  CACM-3071.html
************************


An Algorithm Using Symbolic Techniques for the
Bel-Petrov Classification of Gravitational Fields

In this note, an algorithm is presented for the
symbolic calculation of certain algebraic invariants 
of the Weyl tensor which permits the determination
of the Bel-Petrov types of a gravitational field. 
 Th<B>is a</B>lgorithm, although more specialized than that
of D'Inverno and Russell-Clark, requires neither 
the use of a special coordinate system nor the spin coefficient
formalism.  The algorithm has been implemented 
in FORMAC and is designed to complete the classification
scheme proposed by Petrov in his book.  An appendix 
contains examples illustrating the use of the algorithm.

CACM September, 1978

Harris, R.
Zund, J.

General relativity, Bel-Petrov types,
FORMAC, symbolic manipulation, tensors

3.11 3.15 3.17

CA780901 DH February 5, 1979  3:43 PM

2170	4	3071
3071	4	3071
2165	5	3071
3071	5	3071
3071	5	3071
3071	5	3071


************************

************************
Document:  CACM-1890.html
************************


Simulation of Traffic Flows in a Network

A computer simulation program which deals
with traffic flows in the network of a large area 
is described.  Each road is segmented into blocks of
several ten-meter lengths and is represented by 
a bidirectional list <B>in computer</B> memory.  The movement
of cars, i.e. the transfer of cars from one block 
to the next, is expressed by a proper formula.  This
formula is based on the supposition that the speed 
of cars in a block is determined only by the density of
cars in the block, and this speed-versus-density 
curve is empirically given the numerical values.  This
simulation scheme has its excellent point in that 
it makes it possible to trace the dynamic behavior
of traffic flows in a variety of situations, some 
examples of which are given for an actual area of the city of Kyoto, Japan.

June, 1969

Sakai, T.
Nagao, M.

traffic simulation, traffic flow, traffic network
traffic control, traffic density, intersection, 
signal setting, vehicle, road network, list structure, computer simulation

3.57 3.23

CA690603 JB February 17, 1978  1:26 PM

1890	4	1890
1890	5	1890
1890	5	1890
1890	5	1890
757	5	1890


************************

************************
Document:  CACM-1908.html
************************


Time-Sharing and Batch-Processing:  An Experimental
Comparison of Their Values in a Problem - 
Solving Situation

An experimental comparison of problem-solving
using time-sharing and batch-processing computer 
systems conducted at MIT is described in this paper.
 This study is the first known attempt to evaluate 
two such systems for what may well be the predominant user
population within the next decade-the professionals 
who, as nonprogrammers, are using the computer as an
aid in decision-making and problem-solving rather 
than as a programming end in itself.  Statistically
and logically significant results indicate equal 
cost for usage of the two computer systems; however,
a much higher level of performance <B>is a</B>ttained by 
time-sharing users.  There are indications that significantly
lower costs would have resulted if the 
time-sharing users had stopped work when they reached
a performance level equal to that of the batch 
users.  The users' speed of problem-solving and their
attitudes made time-sharing the more favorable 
system.

CACM May, 1969

Gold, M. M.

time-sharing vs batch-processing, user performance,
man/machine communications, cost effectiveness, 
on-line vs off-line performance, decision-making performance,
user/programmer behavior, programming experimental 
empirical studies, problem-solving, research in man/machine
communications, man/machine symbiosis

2.11 2.40 3.36 3.51 3.80

CA690501 JB February 17, 1978  4:10 PM

1792	4	1908
1908	4	1908
1908	4	1908
1550	5	1908
1605	5	1908
1908	5	1908
1908	5	1908
1908	5	1908
2705	5	1908
2984	5	1908
1908	6	1908
1908	6	1908
3185	6	1908


************************

************************
Document:  CACM-2226.html
************************


Further Evidence for the Analysis of Algorithms
for the Zero-One Programming Problem

The purpose of this note is to report computational
experience additional to that recently 
summarized by Gue et al, with two <B>algorithms for</B> the
zero-one linear programming problem.  An error in 
Gue's paper is corrected.  The utility of one of
the algorithms as a suboptimizer is indicated.

CACM January, 1971

Proll, L. G.

operations research, integer programming, zero-one variables, algorithms

5.39 5.41

CA710108 JB February 8, 1978  10:32 AM

2226	4	2226
2226	4	2226
1658	5	2226
1666	5	2226
2226	5	2226
2226	5	2226
2226	5	2226


************************

************************
Document:  CACM-2402.html
************************


Pictorial Pattern Recognition and the
Phase Problem of X-ray Crystallography

The availability of interactive, three-dimensional,
computer graphics systems coupled to powerful 
digital computers encourages the development of algorithms
adapted to this environment.  Pictorial pattern 
recognition techniques make possible a number of approaches
to X-ray structure determination based on 
molecular model building, i.e. the use of chemical information
to frame "structural hypotheses" which 
can computationally be tested and refined by reference
to the experimental data.  Application of standard 
pattern recognition algorithms is hindered by the fact
that the cross-correlation between a model and 
the correct structure cannot be computed because of
a fundamental incompleteness in the measured data. 
 However, it is possible to compute an upper bound to such
a cross-correlation.  A simple example demonstrates 
that this information can be the basis of a technique
for structure determination that can make effective 
use of an interactive graphics system. Model building
by cross-correlations has intrinsic advantages 
over usual crystallographic techniques based on the
autocorrelation or Patterson function, especially 
for large structures.  <B>This is</B> significant, for crystallography
of biological macromolecules hasbeen 
and will continue to be a field of intense interest.

CACM January, 1972

Lesk, A. M.

pictorial pattern recognition, phase problem,
X-ray crystallography, interactive graphics

3.13 3.17 3.63

CA720101 JB February 1, 1978  9:53 AM

2402	5	2402
2402	5	2402
2402	5	2402


************************

************************
Document:  CACM-0531.html
************************


Person-Matching by Electronic Methods

Record linkage in the updating of files is
accomplished in many establishments through the 
use of a preassigned number, such as payroll number,
customer number, or social security number.  In 
vital and health records, however, a unique number
is generally not preassigned to an individual for 
purposes of reporting services received to the health
department.  In order to determine whether different 
physician reports refer to the same individual, name
and other identification must be compared.  This 
<B>is a</B> laborious operation which is subject to various
errors because of name misspellings, changes of 
name upon marriage, and other problems.  We are interested
in the maintenance of a psychiatric case register 
in Maryland, where many of the reports from over a hundred
psychiatric agencies refer to the same patient. 
 These records must be linked in order to provide unduplicated
counts of individuals under care and longitudinal 
records of psychiatric history.  An earlier paper [1] describes
our general procedures for register maintenance 
by use of a digital computer (Honeywell 800).  Here
we present in more detail our initial procedures 
for the person-matching process in order to elicit comments
and suggestions from persons who have had 
experience in matching.

CACM July, 1962

Phillips Jr., W.
Bahn, A. K.
Miyasaki, M.

CA620730 JB March 17, 1978  7:51 PM

531	5	531
531	5	531
531	5	531


************************

************************
Document:  CACM-2657.html
************************


An Improved Program-Synthesizing Algorithm and Its Correctness

An improved program-synthesizing algorithm
based on the algorithm proposed by Waldinger and 
Lee in 1969 is given.  In the old algorithm, the program-synthesizing
problem is translated into a theorem-proving 
problem, and a program is obtained by analyzing a proof.
 For the improved algorithm, the analysis is 
not necessary, and a program is obtained as soon as
the proof is completed.  This <B>is a</B>chieved by using 
a modified variable tracing mechanism invented by Green
in 1969.  The correctness of the improved algorithm 
is also proved; i.e. the program thus obtained
always satisfies the specification.

CACM April, 1974

Lee, R. C. T.
Chang, C. L.
Waldinger, R. J.

program-synthesizing algorithms, theorem proving,
consequence finding, primitive resolutions

3.60 3.64 4.20 4.42 5.21 5.22 5.24

CA740413 JB January 18, 1978  9:32 AM

2657	4	2657
2719	4	2657
2210	5	2657
2657	5	2657
2657	5	2657
2657	5	2657
2719	5	2657
1626	6	2657
210	6	2657
2151	6	2657
2167	6	2657
2210	6	2657
2645	6	2657
2657	6	2657


************************



An Improved Program-Synthesizing Algorithm and Its Correctness

An improved program-synthesizing algorithm
based on the algorithm proposed by Waldinger and 
Lee in 1969 is given.  In the old algorithm, the program-synthesizing
problem is translated into a theorem-proving 
problem, and a program is obtained by analyzing a proof.
 For the improved algorithm, the analysis is 
not necessary, and a program is obtained as soon as
the proof is completed.  <B>This is</B> achieved by using 
a modified variable tracing mechanism invented by Green
in 1969.  The correctness of the improved algorithm 
is also proved; i.e. the program thus obtained
always satisfies the specification.

CACM April, 1974

Lee, R. C. T.
Chang, C. L.
Waldinger, R. J.

program-synthesizing algorithms, theorem proving,
consequence finding, primitive resolutions

3.60 3.64 4.20 4.42 5.21 5.22 5.24

CA740413 JB January 18, 1978  9:32 AM

2657	4	2657
2719	4	2657
2210	5	2657
2657	5	2657
2657	5	2657
2657	5	2657
2719	5	2657
1626	6	2657
210	6	2657
2151	6	2657
2167	6	2657
2210	6	2657
2645	6	2657
2657	6	2657


************************

************************
Document:  CACM-2368.html
************************


An Implemented Graph Algorithm for Winning Shannon Switching games

In this tutorial paper a computer program
which wins Shannon Switching Games is described.
 Since these games are played on graphs, the program
<B>is a</B> good example of the implementation of graph 
algorithms.  The two players in a Shannon Switching Game,
CONNECT and CUT, have nonsimilar goals.  Either 
CONNECT, CUT, or the player moving first is guaranteed
the existence of a winning strategy.  The simple 
strategy explained in this paper is valid in all three
cases.  In fact, the major routines never need 
to know whether the computer is CONNECT or CUT.

CACM April, 1972

Chase, S. M.

graph algorithms, graph processing, Shannon Switching
Games, game playing, graph theory, positional 
games, demonstration programs, game theory, spinning trees

3.69 5.32

CA720405 JB January 31, 1978  1:34 PM

2368	5	2368
2368	5	2368
2368	5	2368


************************

************************
Document:  CACM-1014.html
************************


Machine Controls for Analysis of Variance

A major problem in using the analysis of variance,
as the number of factors increases, is the 
exponential rise in the number of interactions.  Even
though the experimenter may not be <B>interested in</B> 
these interactions it is impossible to ignore them in
most experimental designs because of the problem 
of getting error terms.  It is natural therefore to look
to the computer to handle the bulk of work involved 
in computing the interactions.  A program device
to get the computer to do this is described.

CACM August, 1964

Weldon, R. J.

CA640816 JB March 9, 1978  6:37 PM

1014	4	1014
912	5	1014
1014	5	1014
1014	5	1014
1014	5	1014


************************

************************
Document:  CACM-2325.html
************************


Numerical Mathematics and Computer Science

Numerical mathematics is viewed as the analysis
of continuous algorithms.  Four of the components 
of numerical mathematics are discussed.  These are: foundations
(finite precision number systems, computational 
complexity), synthes<B>is a</B>nd analysis of algorithms,
analysis of error, programs and program libraries.

CACM July, 1972

Traub, J. F.

numerical mathematics, computer science, mathematics
of computation, algorithms, continuous algorithms

1.3 5.0 5.1 5.25

CA720703 JB January 30, 1978  3:17 PM

1086	4	2325
1132	4	2325
1234	4	2325
1263	4	2325
1265	4	2325
1270	4	2325
1323	4	2325
1358	4	2325
1379	4	2325
1380	4	2325
1453	4	2325
1464	4	2325
1484	4	2325
1491	4	2325
1498	4	2325
1613	4	2325
1614	4	2325
1781	4	2325
1825	4	2325
1860	4	2325
2083	4	2325
2178	4	2325
2179	4	2325
2252	4	2325
2325	4	2325
2341	4	2325
2546	4	2325
2645	4	2325
2652	4	2325
2684	4	2325
2842	4	2325
2929	4	2325
2934	4	2325
3069	4	2325
669	4	2325
679	4	2325
691	4	2325
761	4	2325
949	4	2325
989	4	2325
2325	5	2325
2325	5	2325
2325	5	2325
3184	5	2325


************************

************************
Document:  CACM-1433.html
************************


A Note on Linear Programming Algorithm Design: A Combinatorial Problem

As linear programming models grow bigger and
bigger in size, much actual data that must be 
memorized is often put on magnetic tape or disk, and
consequently there <B>is a</B>n improportionality fast 
rise in the consumption of computer timeo cut down
this expense, an ever increasing effort is made 
to design more efficient algorithms.  This paper is
meant to support the effort.  It is attempted to 
find some characteristics of the way a pivot column
is found.  The number of repetitions of a certain 
transfer of data from tape to core memory is considered.
 After some simplification, the problem is restated 
in a general way.  The generating function of the probability
distribution and the moment generating 
function of the number of repetitions is found.  Asymptotic
formulas are given for the moments using 
a result from a paper of S. Narumi [1].  The results
may be applied to write very efficient routines 
that search for an extreme value in a table.  Formulas
provide a means of calculating the computer timings 
in this case.

CACM May, 1966

Roes, P. B. M.

CA660504 JB March 3, 1978  10:10 AM

1433	5	1433
1433	5	1433
1433	5	1433


************************

************************
Document:  CACM-1397.html
************************


Proceedings of the ACM Symposium on Symbolic and Algebraic Manipulation

The ACM Symposium on Symbolic and Algebraic
Manipulation brought together over four hundred 
people interested in programming languages designed
for manipulation of algebraic formulas and symbol 
strings, in their applications, and in <B>algorithms for</B>
their implementation.  Twenty-eight papers were 
presented, followed by a lively panel discussion of
future directions.  Evening meetings were arranged 
for several interest groups.  The conference was sponsored
by the ACM Special Interest Committee on Symbolic 
and Algebraic Manipulation.  The program committee consisted
of Chairman Jean E. Sammet, Paul Abrahams, 
Thomas E. Cheatham, Max Goldstein, and Douglas Mcllroy.
 Conference arrangements were made by Lewis C. 
Clapp, Daniel Bobrow and James H. Griesmer.-Robert W. Floyd, Editor

CACM August, 1966

CA660801 JB March 2, 1978  8:17 PM

1397	4	1397
2704	4	1397
1247	5	1397
1396	5	1397
1397	5	1397
1397	5	1397
1397	5	1397
964	6	1397
1028	6	1397
1029	6	1397
1083	6	1397
1132	6	1397
1214	6	1397
1278	6	1397
1334	6	1397
1365	6	1397
1386	6	1397
1387	6	1397
1388	6	1397
1392	6	1397
1393	6	1397
1394	6	1397
1395	6	1397
1396	6	1397
1397	6	1397
1496	6	1397
284	6	1397
407	6	1397
3199	6	1397
3200	6	1397
3201	6	1397
3202	6	1397
3203	6	1397
3204	6	1397
561	6	1397
730	6	1397


************************



Proceedings of the ACM Symposium on Symbolic and Algebraic Manipulation

The ACM Symposium on Symbolic and Algebraic
Manipulation brought together over four hundred 
people <B>interested in</B> programming languages designed
for manipulation of algebraic formulas and symbol 
strings, in their applications, and in algorithms for
their implementation.  Twenty-eight papers were 
presented, followed by a lively panel discussion of
future directions.  Evening meetings were arranged 
for several interest groups.  The conference was sponsored
by the ACM Special Interest Committee on Symbolic 
and Algebraic Manipulation.  The program committee consisted
of Chairman Jean E. Sammet, Paul Abrahams, 
Thomas E. Cheatham, Max Goldstein, and Douglas Mcllroy.
 Conference arrangements were made by Lewis C. 
Clapp, Daniel Bobrow and James H. Griesmer.-Robert W. Floyd, Editor

CACM August, 1966

CA660801 JB March 2, 1978  8:17 PM

1397	4	1397
2704	4	1397
1247	5	1397
1396	5	1397
1397	5	1397
1397	5	1397
1397	5	1397
964	6	1397
1028	6	1397
1029	6	1397
1083	6	1397
1132	6	1397
1214	6	1397
1278	6	1397
1334	6	1397
1365	6	1397
1386	6	1397
1387	6	1397
1388	6	1397
1392	6	1397
1393	6	1397
1394	6	1397
1395	6	1397
1396	6	1397
1397	6	1397
1496	6	1397
284	6	1397
407	6	1397
3199	6	1397
3200	6	1397
3201	6	1397
3202	6	1397
3203	6	1397
3204	6	1397
561	6	1397
730	6	1397


************************

************************
Document:  CACM-2819.html
************************


Experiments in Text File Compression

A system for the compression of data files,
viewed as strings of characters, is presented. 
 The method is general, and applies equally well to
English, to PL/I, or to digital data.  The system 
consists of an encoder, an analysis program, and a decoder.
  Two <B>algorithms for</B> encoding a string differ 
slightly from earlier proposals.  The analysis program attempts
to find an optimal set of codes for representing 
substrings of the file.  Four new algorithms for this
operation are described and compared.  Various 
parameters in the algorithms are optimized to obtain
a high degree of compression for sample texts.

CACM November, 1976

Rubin, F.

text compression, data file compaction, Huffman
codes, N-gram encoding, comparison of algorithms

3.7 3.73 4.33

CA761104 JB January 3, 1978  3:26 PM

2530	4	2819
2623	4	2819
2819	4	2819
2537	5	2819
2819	5	2819
2819	5	2819
2819	5	2819


************************

************************
Document:  CACM-1867.html
************************


On the Expected Lengths of Sequences Generated
in Sorting by Replacement Selecting

In the replacement-selecting technique of sorting,
one is <B>interested in</B> the ratio L(j) of the 
expected length of the j-th sequence generated by the
technique to the number of memory cells used.  
Using complex-variable theory, it is shown that L(j)
-> 2 and that, asymptotically, the average interval 
between sign changes of L(j)-2 is 2.6662.

CACM July, 1969

Hooker, W. W.

replacement selecting, sorting, sequence lengths,
asymptotic expected length, recursion relation, 
generating function, meromorphic function

3.74 5.31

CA690713 JB February 15, 1978  6:37 PM

1867	4	1867
2272	4	1867
1638	5	1867
1867	5	1867
1867	5	1867
1867	5	1867


************************

************************
Document:  CACM-0616.html
************************


An Information Algebra - Phase I Report-Language
Structure Group of the CODASYL Development Committee

This report represents the results of the
first phase of the work of the Language Structure 
Group.  The goal of this work is to arrive at a proper
structure for a machine-independent problem-defining 
language, at the systems level of data processing.  The
report is based, for the most part, on a mathematical 
model called "An Information Algebra" developed primarily
by R. Bosak.  It is hoped that this report 
will be read (a) with avid interest by programming language
designers and implementors, and all those 
<B>interested in</B> developing a theoretical approach to data
processing; (b) with interest and understanding 
by professional programmers and systems analysts; and (c)
with appreciation by the businessman-analyst-manager. 
 The authors have not attempted an exhaustive discourse
in this report.  Rather, they have tried to present 
a philosophy to the professional people who are vitally
concerned with providing a working language for 
the systems analyst's use.  They trust that the ideas
in this report will stimulate others to think along 
similar lines.  Questions and comments will be welcomed,
and can be addressed to any of the members of 
the Language Structure Group:  Robert Bosak, System
Development Corporation;  Richard F. Clippinger, 
Honeywell EDP Division;  Carey Dobbs, Remington Rand
Univac Division;  Roy Goldfinger (Chairman), IBM 
Corporation;  Renee B. Jasper, Navy Management Office;
 William Keating, National Cash Register;  George 
Kendrick, General Electric Company;  Jean E. Sammet, IBM Corporation.

CACM April, 1962

CA620401 JB March 20, 1978  2:40 PM

1135	5	616
1136	5	616
2710	5	616
2765	5	616
2888	5	616
2906	5	616
493	5	616
616	5	616
616	5	616
616	5	616
729	5	616
1515	6	616
288	6	616
1936	6	616
1976	6	616
2046	6	616
2046	6	616
2046	6	616
2451	6	616
2452	6	616
2715	6	616
493	6	616
616	6	616
616	6	616
616	6	616
616	6	616
616	6	616
616	6	616
616	6	616
616	6	616
657	6	616


************************

************************
Document:  CACM-1658.html
************************


Analysis of Algorithms for the Zero-One Programming Problem

This paper is concerned with a review and examination
of several existing <B>algorithms for</B> the 
zero-one programming problem.  Computational experience
is summarized.  The machine time and storage 
requirements of several of the algorithms are compared
over several test problems of small and intermediate 
size.  Computer experiments still provide little hope
of solving problems with over 100 variables with 
a reasonable amount of machine time.

CACM December, 1968

Gue, R. L.
Liggett, J. C.
Cain, K. C.

operations research, optimization theory, integer
programming, zero-one variables, algorithms

5.39 5.41

CA681208 JB February 21, 1978  1:31 PM

1658	4	1658
1088	5	1658
1658	5	1658
1658	5	1658
1658	5	1658
2226	5	1658
1658	6	1658
1666	6	1658


************************

