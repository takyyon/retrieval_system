Snippets for the query:  Theory of distributed systems and databases. Subtopics of special interest include reliability and fault-tolerance in distributed systems, atomicity, distributed transactions, synchronization algorithms, resource allocation; lower bounds and models for asynchronous parallel systems. Also theory of communicating processes and protocols. P. Box 2158 Yale Station, New Haven, Conn. 06520
************************
Total Hits:  25
************************

************************
Document:  CACM-2406.html
************************


A Data Definition and Mapping Language

A data definition language i sa declarative
computer language for specifying data structures. 
 Most data definition languages concentrate on the declaration
of logical data structures with little 
concern for how these structures are physically realized
on a computer system.  However, the need for 
data definition languages which describe both the logical
and physical aspects of data is increasingly 
apparent.  Such languages will be a key systems, as well
as in advanced data management <B>systems and</B> distributed 
data bases.  This paper reviews past work in the data
definition language for describing both logical 
and physical aspects of data.  Applications of these
"generalized" data definition languages are also 
discussed.

CACM December, 1973

Sibley, E. H.
Taylor, R. W.

data definition language, data and storage structure,
data translation, data base management systems, 
file translation

3.51 3.70 3.73 4.29 4.82

CA731202 JB January 19, 1978  2:58 PM

2155	4	2406
2406	4	2406
2710	4	2406
2715	4	2406
2716	4	2406
2717	4	2406
2718	4	2406
2765	4	2406
2817	4	2406
2888	4	2406
2901	4	2406
2957	4	2406
2959	4	2406
2965	4	2406
3087	4	2406
3154	4	2406
2046	5	2406
2406	5	2406
2406	5	2406
2406	5	2406
2717	5	2406
2046	6	2406
2406	6	2406


************************

************************
Document:  CACM-3073.html
************************


Communicating Sequential Processes

This paper suggests that input and output are
basic primitives of programming and that parallel 
composition <B>of communicating</B> sequential processes is
a fundamental program structuring method.  When 
combined with a development of Dijkstra's guarded command,
these concepts are surprisingly versatile. 
 Their use is illustrated by sample solutions of
a variety of familiar programming exercises.

CACM August, 1978

Hoare, C.

Programming, programming languages, programming primitives,
program structures, parallel programming, 
concurrency, input, output, guarded commands, nondeterminacy,
coroutines, procedures, multiple entries, 
multiple exits, classes, data representations, recursion,
conditional critical regions, monitors, iterative 
arrays

4.20 4.22 4.32

CA780805 DH February 7, 1979  10:07 AM

249	4	3073
254	4	3073
272	4	3073
1102	4	3073
1109	4	3073
1140	4	3073
1188	4	3073
1306	4	3073
1323	4	3073
1358	4	3073
1380	4	3073
1464	4	3073
1491	4	3073
1665	4	3073
1767	4	3073
1781	4	3073
1781	4	3073
1787	4	3073
1787	4	3073
1949	4	3073
1989	4	3073
321	4	3073
2059	4	3073
2112	4	3073
2126	4	3073
2534	4	3073
2541	4	3073
435	4	3073
437	4	3073
463	4	3073
483	4	3073
491	4	3073
2698	4	3073
2732	4	3073
2733	4	3073
2820	4	3073
2896	4	3073
2972	4	3073
560	4	3073
583	4	3073
3037	4	3073
3039	4	3073
3043	4	3073
3073	4	3073
3073	4	3073
3073	4	3073
3155	4	3073
627	4	3073
631	4	3073
632	4	3073
642	4	3073
644	4	3073
653	4	3073
680	4	3073
761	4	3073
762	4	3073
763	4	3073
123	4	3073
140	4	3073
919	4	3073
989	4	3073
196	5	3073
2732	5	3073
3073	5	3073
3073	5	3073
3073	5	3073
3148	5	3073
3150	5	3073
3155	5	3073
799	5	3073
1860	6	3073
2060	6	3073
2204	6	3073
2247	6	3073
2704	6	3073
2817	6	3073
2842	6	3073
2865	6	3073
2939	6	3073
2939	6	3073
2940	6	3073
2941	6	3073
2943	6	3073
3073	6	3073
3073	6	3073
3073	6	3073
3148	6	3073
799	6	3073


************************

************************
Document:  CACM-2851.html
************************


Formal Verification of Parallel Programs

Two formal <B>models for</B> parallel computation
are presented: an abstract conceptual model and 
a parallel-program model.  The former model does not
distinguish between control and data states.  The 
latter model includes the capability for the representation
of an infinite set of control states by allowing 
there to be arbitrarily many instruction pointers (or
processes) executing the program.  An induction 
principle is presented which treats the control and
data state sets on the same ground.  Through the 
use of "place variables," it is observed that certain
correctness conditions can be expressed without 
enumeration of the set of all possible control states.
 Examples are presented in which the induction 
principle is used to demonstrate proofs of mutual exclusion.
 It is shown that assertions-oriented proof 
methods are special cases of the induction principle.
A special case of the assertions method, which 
is called parallel place assertions, is shown to be
incomplete.  A formalization of "deadlock" is then 
presented. The concept of a "norm" is introduced, which
yields an extension, to the deadlock problem, 
of Floyd's technique for proving termination.  Also discussed
is an extension of the program model which 
allows each process to have its own local variables
and permits shared global variables.  Correctness 
of certain forms of implementation is also discussed.
 An Appendix is included which relates this work 
to previous work on the satisfiability of certain logical formulas.

CACM July, 1976

Keller, R. M.

parallel program, correctness, verification,
assertions, deadlock, mutual exclusion, Petrinet

4.6 5.2 6.9 8.1

CA760702 JB January 4, 1978  1:20 PM

2228	4	2851
2280	4	2851
2379	4	2851
2320	4	2851
2482	4	2851
2597	4	2851
2740	4	2851
2777	4	2851
2851	4	2851
2851	4	2851
2895	4	2851
2912	4	2851
2920	4	2851
2946	4	2851
3128	4	2851
1877	5	2851
2150	5	2851
2851	5	2851
2851	5	2851
2851	5	2851


************************

************************
Document:  CACM-3086.html
************************


On the Complexity of Computing the Measure of U[ai, bi]

The decision tree complexity of computing the
measure of the union of n (possibly overlapping) 
intervals is shown to be  (n log n), even if comparisons
between linear functions of the interval endpoints 
are allowed.  The existence of an   (n log n) lower bound
to determine whether any two of n real numbers 
are within   of each other is also demonstrated.  These
problems provide an excellent opportunity for 
discussing the effects of the computational model on
the ease of analysis and on the results produced.

CACM July, 1978

Fredman, M.
Weide, B.

Analysis of algorithms, combinatorial problems,
computational complexity, computational models, 
decision tree programs, <B>lower bounds</B>

5.25 5.26 5.30 5.39

CA780702 DH February 8, 1979  3:46 PM

3086	5	3086
3086	5	3086
3086	5	3086


************************

************************
Document:  CACM-1885.html
************************


A Computer System for Transformational Grammar

A comprehensive system for transformational
grammar has been designed and implemented on the 
IBM 360/67 computer.  The system deals with the transformational
model of syntax, along the lines of 
Chomsky's Aspects of the <B>Theory of</B> Syntax. The major
innovations include a full,formal description of 
the syntax of a transformational grammar, a directed random
phrase structure generator, a lexical insertion 
algorithm, an extended definition of analysis, and
a simple problem-oriented programming language in 
which the algorithm for application of transformations
can be expressed.  In this paper we present the 
system as a whole, first discussing the general attitudes underlying
the development of the system, then 
outlining the system and discussing its more important
special features.  References are given to papers 
which consider some particular aspect of the system in detail.

CACM June, 1969

Friedman, J.

transformational grammar, natural language syntax,
language processing, language analysis, sentence 
generation, lexical insertion, computational linguistics, syntax

3.42

CA690608 JB February 17, 1978  10:36 AM

1885	4	1885
2795	4	1885
1885	5	1885
1885	5	1885
1885	5	1885
1928	5	1885


************************

************************
Document:  CACM-2616.html
************************


On the Conversion of Programs to Decision Tables: Method and Objectives

The problems of converting programs to decision
tables are investigated.  Objectives of these 
conversions are mainly program debugging and optimization
in practice.  Extensions to the <B>theory of</B> computation 
and computability are suggested.

CACM August, 1974

Cavouras, J. C.

decision tables, program optimization, debugging,
semantics, theory of programming, systems analysis

4.19 4.42 4.43 5.21 5.29

CA740808 JB January 17, 1978  9:43 AM

2053	4	2616
2220	4	2616
2492	4	2616
2517	4	2616
2518	4	2616
2518	4	2616
2598	4	2616
2616	4	2616
2616	4	2616
2616	4	2616
2616	4	2616
2726	4	2616
3034	4	2616
3034	4	2616
795	4	2616
931	5	2616
1548	5	2616
1684	5	2616
2517	5	2616
2616	5	2616
2616	5	2616
2616	5	2616


************************

************************
Document:  CACM-2327.html
************************


Toward an Automata <B>Theory of</B> Brains

A source of ideas for automata theory-the study
of the brain-has been pushed aside in mathematical 
development of the theory.  This paper suggests the ways
in which automata theory might evolve over the 
next 25 years if it is to contribute to an understanding
of how the brain processes information.

CACM July, 1972

Arbib, M. A.

automata theory, brain theory, network complexity,
resolution of redundancy of potential command, 
frog visual system, reticular formation mode selection

3.36 3.65 5.22

CA720701 JB January 30, 1978  3:46 PM

2327	5	2327
2327	5	2327
2327	5	2327


************************

************************
Document:  CACM-2697.html
************************


A Fast Method for Solving a Class of Tridiagonal Linear Systems

The solution of linear systems having real, symmetric,
diagonally dominant,tridiagonal coefficient 
matrices with constant diagonals is considered.  It is
proved that the diagonals of the LU decomposition 
converges when floating-point precision.  It is also
proved that the computed LU decomposition converges 
when floating-point arithmetic is used and that the limits
of the LU diagonals using floating point are 
roughly within machine precision of the limits using
real arithmetic.  This fact is exploited to reduce 
the number of floating-point operations required to
solve a linear system from 8n-7 to 5n+2k-3, where 
k is much less than n, the order of the matrix.  If the
elements of the subdiagonals and superdiagonals 
are 1, then only 4n+2k-3 operations are needed.  The
entire LU decomposition takes k words of storage, 
and considerable savings in array subscripting are achieved.
 Upper and <B>lower bounds</B> on k are obtained 
in terms of the ratio of the coefficient matrix diagonal
constants and parameters of the floating-point 
number system.  Various generalizations of these results are discussed.

CACM January, 1974

Malcolm, M. A.
Palmer, J.

numerical linear algebra, linear systems,
Toeplitz matrices, tridiagonal matrices

5 5.1 5.11 5.14 5.17

CA740102 JB January 18, 1978  2:50 PM

2697	5	2697
2697	5	2697
2697	5	2697


************************

************************
Document:  CACM-1474.html
************************


Tests of Probabilistic Models for Propagation of Roundoff Errors

In any prolonged computation it is generally
assumed that the accumulated effect of roundoff 
errors is in some sense statistical.  The purpose of this
paper is to give precise descriptions of certain 
probabilistic <B>models for</B> roundoff error, and then to
describe a series of experiments for testing the 
validity of these models.  It is concluded that the models
are in general very good.  Discrepancies are 
both rare and mild.  The test techniques can also be
used to experiment with various types of special 
arithmetic.

CACM February, 1966

Hull, T. E.
Swenson, J. R.

CA660210 JB March 3, 1978  2:37 PM

1474	5	1474
1474	5	1474
1474	5	1474
2525	5	1474
1474	6	1474


************************



Tests of Probabilistic Models for Propagation of Roundoff Errors

In any prolonged computation it is generally
assumed that the accumulated effect of roundoff 
errors is in some sense statistical.  The purpose of this
paper is to give precise descriptions of certain 
probabilistic models for roundoff error, and then to
describe a series of experiments for testing the 
validity of these models.  It is concluded that the models
are in general very good.  Discrepancies are 
both rare and mild.  The test techniques can also be
used to experiment with various types <B>of special</B> 
arithmetic.

CACM February, 1966

Hull, T. E.
Swenson, J. R.

CA660210 JB March 3, 1978  2:37 PM

1474	5	1474
1474	5	1474
1474	5	1474
2525	5	1474
1474	6	1474


************************

************************
Document:  CACM-2323.html
************************


Toward a General <B>Theory of</B> Special Functions

A list of a number of natural developments
for the field of algebraic manipulation is given. 
 Then the prospects for a general theory of functions
defined by ordinary differential equations are 
discussed.  The claim is made that recent developments
in mathematics indicate that it should be possible 
to algorithmically generate many properties of solutions
to differential equations.  Such a theory is 
preferable to a less general effort to make algebraic
manipulation systems knowledgeable about the usual 
special functions (e.g. exponential, hypergeometric).

CACM July, 1972

Moses, J.

algebraic manipulation, special functions, algebraic
simplification, symbolic integration, algebraic 
geometry, differential algebra

1.50 3.15 5.19 5.9

CA720705 JB January 30, 1978  3:07 PM

2164	4	2323
2170	4	2323
2323	4	2323
2323	4	2323
2323	4	2323
2719	4	2323
2167	5	2323
2164	5	2323
2170	5	2323
2323	5	2323
2323	5	2323
2323	5	2323


************************



Toward a General Theory of Special Functions

A list of a number of natural developments
for the field of algebraic manipulation is given. 
 Then the prospects for a general <B>theory of</B> functions
defined by ordinary differential equations are 
discussed.  The claim is made that recent developments
in mathematics indicate that it should be possible 
to algorithmically generate many properties of solutions
to differential equations.  Such a theory is 
preferable to a less general effort to make algebraic
manipulation systems knowledgeable about the usual 
special functions (e.g. exponential, hypergeometric).

CACM July, 1972

Moses, J.

algebraic manipulation, special functions, algebraic
simplification, symbolic integration, algebraic 
geometry, differential algebra

1.50 3.15 5.19 5.9

CA720705 JB January 30, 1978  3:07 PM

2164	4	2323
2170	4	2323
2323	4	2323
2323	4	2323
2323	4	2323
2719	4	2323
2167	5	2323
2164	5	2323
2170	5	2323
2323	5	2323
2323	5	2323
2323	5	2323


************************

************************
Document:  CACM-1978.html
************************


The Use of Interactive Graphics To Solve Numerical Problems

With the advent of on-line (time-sharing) computer systems
and graphic terminals, we have available a new dimension
in numerical problem solving capabilities.  Rather than simply use
the new power to achieve fast turnaround, we can develop interactive
routines which are easy to use and also take advantage of the
insight and visual capabilities of the human problem solver.  Several
on-line systems for general purpose mathematical problem solving
have already been implemented as well as some special purpose
systems for solving problems in a particular area such as ordinary
differential equations.  The advantage of restricting the problem
area is that the interface with a user can be greatly simplified.
In this paper we discuss some of the advantages accrued by such
<B>systems and</B> design considerations for interactive routines.  Furthermore,
an implementation of an on-line least squares data-fitting
program, PEG, is presented with results obtained from empirical
data.  In conclusion, area for future work in this field are discussed.

CACM October, 1970

Smith, L. B.

interactive graphics, computer graphics, graphics, least squares,
data-fitting, interactive computing, on-line mathematics

1.3 3.1 5.13 5.5

CA701012 JB February 10, 1978  9:14 AM

1978	4	1978
1978	4	1978
1978	4	1978
1307	5	1978
1589	5	1978
1813	5	1978
1978	5	1978
1978	5	1978
1978	5	1978


************************

************************
Document:  CACM-3141.html
************************


An Improved Algorithm for Decentralized Extrema-Finding
in Circular Configurations of Processes

This note presents an improvement to LeLann's
algorithm for finding the largest (or smallest) of a set of uniquely
numbered processes arranged in a circle, in which no central
controller exists and the number of processes is not known a priori.
This decentralized algorithm uses a technique of selective
message extinction in order to achieve an average number of
message passes of order (n log n) rather than O(n2).  

CACM May, 1979

Chang, E.
Roberts, R.

Decentralized algorithms, <B>distributed systems,</B> operating systems

4.32 4.35 5.25 5.32

CA790502 DH June 5, 1979  2:35 PM

3141	5	3141
3141	5	3141
3141	5	3141


************************



An Improved Algorithm for Decentralized Extrema-Finding
in Circular Configurations of Processes

This note presents an improvement to LeLann's
algorithm for finding the largest (or smallest) of a set of uniquely
numbered processes arranged in a circle, in which no central
controller exists and the number of processes is not known a priori.
This decentralized algorithm uses a technique of selective
message extinction in order to achieve an average number of
message passes of order (n log n) rather than O(n2).  

CACM May, 1979

Chang, E.
Roberts, R.

Decentralized algorithms, <B>distributed systems</B>, operating systems

4.32 4.35 5.25 5.32

CA790502 DH June 5, 1979  2:35 PM

3141	5	3141
3141	5	3141
3141	5	3141


************************

************************
Document:  CACM-2932.html
************************


Complexity of Computations

The framework for research in the <B>theory of</B> complexity
of computations is described, emphasizing 
the in terrelation between seemingly diverse problems
and methods.  Illustrative examples of practical 
and theoretical significance are given.  Directions
for new research are discussed.

CACM September, 1977

Rabin, M. O.

complexity of computations, algebraic complexity,
in tractable problems, probabilistic algorithms

5.25

CA770901 JB December 28, 1977  6:54 AM

2932	5	2932
2932	5	2932
2932	5	2932


************************

************************
Document:  CACM-3043.html
************************


Distributed Processes: A Concurrent Programming Concept

A language concept for concurrent processes
without common variables is introduced.  These 
processes communicate and synchronize by means of procedure
calls and guarded regions.  This concept 
is proposed for real-time applications controlled by
microcomputer networks with distributed storage. 
 The paper gives several examples <B>of distributed</B> processes
and shows that they include procedures, coroutines, 
classes, monitors, processes, semaphores, buffers, path
expressions, and input/output as special cases.

CACM November, 1978

Hansen, P.

Concurrent programming, distributed processes,
microprocessor networks, nondeterminism, guarded 
regions, programming languages, process communication
and scheduling, sorting arrays, coroutines, classes, 
monitors, processes, semaphores, buffers, path expressions, input/output 

3.8 4.2 4.22 4.32 5.24

CA781108 DH January 26, 1979  10:40 AM

2865	4	3043
2866	4	3043
2896	4	3043
2898	4	3043
2972	4	3043
2972	4	3043
3037	4	3043
3039	4	3043
3043	4	3043
3043	4	3043
3073	4	3043
3128	4	3043
3144	4	3043
2597	5	3043
2732	5	3043
3043	5	3043
3043	5	3043
3043	5	3043


************************

************************
Document:  CACM-3124.html
************************


Recursive Data Structures in APL

A mathematical study of three approaches for defining nested
arrays in APL is presented.  Theorems exhibiting the relationships
between the definitional systems are given and illustrated through graph
representations.  One of the approaches is used to define an
APL array to be a recursive data structure equivalent to a tree structure
in which all data is stored at the leaves as homogeneous
arrays of numbers and characters.  An extension of APL is proposed that
includes new primitive functions to manipulate the nesting
level of arrays and new operators to assist in the
construction of data-driven algorithms.  

CACM February, 1979

Gull,W.
Jenkins, M.

Nested arrays, APL arrays, recursive data structures,
trees, data-driven algorithms, <B>theory of</B> arrays

4.22 5.29

CA790203 DH April 10, 1979  3:41 PM

2060	4	3124
2294	4	3124
2470	4	3124
3124	4	3124
1469	5	3124
3124	5	3124
3124	5	3124
3124	5	3124


************************

************************
Document:  CACM-3128.html
************************


Synchronization with Eventcounts and Sequencers

Synchronization of concurrent processes requires controlling the relative 
ordering of events in the processes.
A new synchronization mechanism is proposed, using 
abstract objects called eventcounts and sequencers, that allows processes
to control the ordering of events directly, rather than using mutual
exclusion to protect manipulations of shared variables that control
ordering of events.  Direct control of ordering seems to simplify
correctness arguments and also simplifies implementation <B>in distributed</B>
systems.  The mechanism is defined formally, and then several
examples of its use are given.  The relationship of the mechanism
to protection mechanisms in the system is explained; in particular,
eventcounts are shown to be applicable to situations where confinement
of information matters.  An implementation of eventcount
s and sequencers in a system with shared memory is described.

CACM February, 1979

Reed, D.
Kanodia, R.

Process synchronization, interprocess communication, distributed
systems, security models, mutual exclusion, semaphores

4.30 4.32

CA790207 DH April 12, 1979  10:03 AM

2320	4	3128
2597	4	3128
2700	4	3128
2777	4	3128
2840	4	3128
2851	4	3128
2865	4	3128
2866	4	3128
2869	4	3128
2895	4	3128
2898	4	3128
2912	4	3128
2938	4	3128
2945	4	3128
2946	4	3128
2946	4	3128
2972	4	3128
3043	4	3128
3128	4	3128
3128	4	3128
3128	4	3128
3128	4	3128
3128	4	3128
3128	4	3128
3128	4	3128
3128	4	3128
3128	4	3128
3144	4	3128
3148	4	3128
3158	4	3128
2150	5	3128
2376	5	3128
2436	5	3128
2597	5	3128
2865	5	3128
2866	5	3128
2870	5	3128
2912	5	3128
3082	5	3128
3128	5	3128
3128	5	3128
3128	5	3128


************************

************************
Document:  CACM-1698.html
************************


A Statistical Model for Console Behavior in Multiuser Computers

The ability of a computer system to communicate
with the outside world efficiently is as important 
as its ability to perform computations efficiently. 
It is quite difficult to characterize a particular 
user, but rather easy to characterize the entire user community.
 Based on the properties of this community 
we have postulated a hypothetical "virtual console."
 No claim is made that a virtual console behaves 
like any actual console, but the entire collection of
virtual consoles models the collection of actual 
consoles.  Using the model we answer questions like: 
How many processes are suspended waiting for console 
input?  What is the maximum rate at which a process can
execute?  What bounds can be set on overall buffer 
requirements?  Answers to these and similar questions
are needed in certain aspects of operating system 
design.

CACM September, 1968

Denning, P. J.

statistical <B>models for</B> input-output, operating
system design, input-output design

4.30 4.41 5.5

CA680903 JB February 22, 1978  9:21 AM

1458	4	1698
1523	4	1698
1603	4	1698
1698	4	1698
1747	4	1698
1748	4	1698
1854	4	1698
1877	4	1698
1960	4	1698
2377	4	1698
2378	4	1698
2497	4	1698
2558	4	1698
2625	4	1698
2632	4	1698
2840	4	1698
2941	4	1698
3105	4	1698
3144	4	1698
1471	5	1698
1698	5	1698
1698	5	1698
1698	5	1698


************************

************************
Document:  CACM-2895.html
************************


A Language for Formal Problem Specification

A language for specifying the in tended behavior
<B>of communicating</B> parallel processes is described. 
 The specifications are constrain ts on the order in which
events of a computation can occur.  The language 
is used to write specifications of the readers/writers
problem and the writer priority of the second 
readers/writers problem.

CACM December, 1977 

Greif, I.

formal specifications,program correctness, parallel
processing, synchronization, readers/writers 
problem

4.22 4.32 5.24

CA771205 DMM December 22, 1977  12:44 PM

2320	4	2895
2597	4	2895
2777	4	2895
2851	4	2895
2895	4	2895
2895	4	2895
2912	4	2895
2946	4	2895
3128	4	2895
2150	5	2895
2618	5	2895
2895	5	2895
2895	5	2895
2895	5	2895


************************

************************
Document:  CACM-2305.html
************************


The "Plankalkul" of Konrad Zuse: A Forerunner
of Today's Programming Languages

Plankalkul was an attempt by Korrad Zuse in
the 1940's to devise a notational and conceptual 
system for writing what today is termed a program.  Although
this early approach to a programming language 
did not lead to practical use, the plan is described
here because it contains features that are standard 
in today's programming languages.  The investigation
is of historical interest; also, it may provide 
insights that would lead to advancements in the state
of the art.  Using modern programming terminology, 
the Plankalkul is presented to the extent it has possible
to reconstruct it from the published literature.

CACM July, 1972

Bauer, F. L.
Wossner, H.

higher programming languages, programming,
<B>theory of</B> programming, history of programming

1.2 4.22 5.29

CA720723 JB January 30, 1978  10:46 AM

2305	5	2305
2305	5	2305
2305	5	2305


************************

************************
Document:  CACM-3059.html
************************


Models for Parallel Processing WIthin Programs:
Application to CPU:I/O and I/O:I/O Overlap

Approximate queueing <B>models for</B> internal parallel
processing by individual programs in a multiprogrammed 
system are developed in this paper.  The solution technique
is developed by network decomposition.  The 
models are formulated in terms of CPU:I/O and I/O:I/O overlap
and applied to the analysis of these problems. 
 The percentage performance improvement from CPU:I/O
overlap is found to be greatest for systems which 
are in approximate CPU:I/O utilization balance and for
low degrees of multiprogramming.  The percentage 
improvement from I/O:I/O overlap is found to be greatest
for systemtems in which the I/O system is more 
utilized than the CPU.

CACM October, 1978

Towsley, D.
Chandy, K.
Browne, J.

Multiprogramming, parallel processing, queueing
network models, multiprocessing of computation 
and I/O 

4.32 8.1

CA781002 DH January 29, 1979  6:23 PM

3059	4	3059
3070	4	3059
1685	5	3059
2988	5	3059
3059	5	3059
3059	5	3059
3059	5	3059
3059	6	3059


************************

************************
Document:  CACM-1856.html
************************


The Teachable Language Comprehender: 
A Simulation Program and <B>Theory of</B> Language

The Teachable Language Comprehender (TLC) is
a program designed to be capable of being taught 
to "comprehend" English text.  When text which the program
has not seen before is input to it, it comprehends 
that text by correctly relating each (explicit or implicit)
assertion of the new text to a large memory. 
 This memory is a "semantic network" representing factual
assertions about the world.  The program also 
creates copies of the parts of its memory which have
been found to relate to the new text, adapting and 
combining these copies to represent the meaning of the
new text.  By this means, the meaning of all text 
the program successfully comprehends is encoded into
the same format as that of the memory.  In this 
form it can be added into the memory.  Both factual
assertions for the memory and the capabilities for 
correctly relating text to the memory's prior content
are to be taught to the program as they are needed. 
 TLC presently contains a relatively small number of
examples of such assertions and capabilities, but 
within the system, notations for expressing either of these
are provided.  Thus the program now corresponds 
to a general process for comprehending language, and
it provides a methodology for adding the additional 
information this process requires to actually comprehend
text of any particular kind.  The memory structure 
and comprehension process of TLC allow new factual assertions
and capabilities for relating text to such 
stored assertions to generalize automatically.  That
is, once such an assertion or capability is put 
into the system, it becomes available to help comprehend
a great many other sentences in the future. 
 Thus the addition of a single factual assertion or
linguistic capability will often provide a large 
increment in TLC's effective knowledge of the world and
in its overall ability to comprehend text.  The 
program's strategy is presented as a general theory of language comprehension.

CACM August,1969

Quillian, M. R.

natural language processing, natural language comprehension,
teachable computer program, psychological 
simulation, human memory simulation, computer
linguistics, linguistic performance theory

3.36 3.42 3.62 3.65 3.74

CA690807 JB February 15, 1978  5:46 PM

1155	4	1856
1350	4	1856
1456	4	1856
1468	4	1856
1515	4	1856
1659	4	1856
1699	4	1856
1856	4	1856
1856	4	1856
1856	4	1856
2050	4	1856
2127	4	1856
1225	5	1856
1324	5	1856
1553	5	1856
1856	5	1856
1856	5	1856
1856	5	1856
2127	5	1856
2309	5	1856
2310	5	1856
2396	5	1856
1155	6	1856
1324	6	1856
1487	6	1856
1487	6	1856
1527	6	1856
1781	6	1856
1856	6	1856
1856	6	1856
1856	6	1856
1856	6	1856
2092	6	1856
2127	6	1856
2398	6	1856


************************



The Teachable Language Comprehender: 
A Simulation Program and Theory of Language

The Teachable Language Comprehender (TLC) is
a program designed to be capable of being taught 
to "comprehend" English text.  When text which the program
has not seen before is input to it, it comprehends 
that text by correctly relating each (explicit or implicit)
assertion of the new text to a large memory. 
 This memory is a "semantic network" representing factual
assertions about the world.  The program also 
creates copies of the parts of its memory which have
been found to relate to the new text, adapting and 
combining these copies to represent the meaning of the
new text.  By this means, the meaning of all text 
the program successfully comprehends is encoded into
the same format as that of the memory.  In this 
form it can be added into the memory.  Both factual
assertions for the memory and the capabilities for 
correctly relating text to the memory's prior content
are to be taught to the program as they are needed. 
 TLC presently contains a relatively small number of
examples of such assertions and capabilities, but 
within the system, notations for expressing either of these
are provided.  Thus the program now corresponds 
to a general process for comprehending language, and
it provides a methodology for adding the additional 
information this process requires to actually comprehend
text of any particular kind.  The memory structure 
and comprehension process of TLC allow new factual assertions
and capabilities for relating text to such 
stored assertions to generalize automatically.  That
is, once such an assertion or capability is put 
into the system, it becomes available to help comprehend
a great many other sentences in the future. 
 Thus the addition of a single factual assertion or
linguistic capability will often provide a large 
increment in TLC's effective knowledge of the world and
in its overall ability to comprehend text.  The 
program's strategy is presented as a general <B>theory of</B> language comprehension.

CACM August,1969

Quillian, M. R.

natural language processing, natural language comprehension,
teachable computer program, psychological 
simulation, human memory simulation, computer
linguistics, linguistic performance theory

3.36 3.42 3.62 3.65 3.74

CA690807 JB February 15, 1978  5:46 PM

1155	4	1856
1350	4	1856
1456	4	1856
1468	4	1856
1515	4	1856
1659	4	1856
1699	4	1856
1856	4	1856
1856	4	1856
1856	4	1856
2050	4	1856
2127	4	1856
1225	5	1856
1324	5	1856
1553	5	1856
1856	5	1856
1856	5	1856
1856	5	1856
2127	5	1856
2309	5	1856
2310	5	1856
2396	5	1856
1155	6	1856
1324	6	1856
1487	6	1856
1487	6	1856
1527	6	1856
1781	6	1856
1856	6	1856
1856	6	1856
1856	6	1856
1856	6	1856
2092	6	1856
2127	6	1856
2398	6	1856


************************

